// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lambda"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BastionConfig struct {
	// Enable data api. Defaults to `false`
	Enabled bool `pulumi:"enabled"`
	// Public subnet id for the bastion host. You may use`awsx.ec2.Vpc.public_subnet_ids[0]`
	SubnetId *string `pulumi:"subnetId"`
}

// BastionConfigInput is an input type that accepts BastionConfigArgs and BastionConfigOutput values.
// You can construct a concrete instance of `BastionConfigInput` via:
//
//	BastionConfigArgs{...}
type BastionConfigInput interface {
	pulumi.Input

	ToBastionConfigOutput() BastionConfigOutput
	ToBastionConfigOutputWithContext(context.Context) BastionConfigOutput
}

type BastionConfigArgs struct {
	// Enable data api. Defaults to `false`
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Public subnet id for the bastion host. You may use`awsx.ec2.Vpc.public_subnet_ids[0]`
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (BastionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BastionConfig)(nil)).Elem()
}

func (i BastionConfigArgs) ToBastionConfigOutput() BastionConfigOutput {
	return i.ToBastionConfigOutputWithContext(context.Background())
}

func (i BastionConfigArgs) ToBastionConfigOutputWithContext(ctx context.Context) BastionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BastionConfigOutput)
}

func (i BastionConfigArgs) ToBastionConfigPtrOutput() BastionConfigPtrOutput {
	return i.ToBastionConfigPtrOutputWithContext(context.Background())
}

func (i BastionConfigArgs) ToBastionConfigPtrOutputWithContext(ctx context.Context) BastionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BastionConfigOutput).ToBastionConfigPtrOutputWithContext(ctx)
}

// BastionConfigPtrInput is an input type that accepts BastionConfigArgs, BastionConfigPtr and BastionConfigPtrOutput values.
// You can construct a concrete instance of `BastionConfigPtrInput` via:
//
//	        BastionConfigArgs{...}
//
//	or:
//
//	        nil
type BastionConfigPtrInput interface {
	pulumi.Input

	ToBastionConfigPtrOutput() BastionConfigPtrOutput
	ToBastionConfigPtrOutputWithContext(context.Context) BastionConfigPtrOutput
}

type bastionConfigPtrType BastionConfigArgs

func BastionConfigPtr(v *BastionConfigArgs) BastionConfigPtrInput {
	return (*bastionConfigPtrType)(v)
}

func (*bastionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BastionConfig)(nil)).Elem()
}

func (i *bastionConfigPtrType) ToBastionConfigPtrOutput() BastionConfigPtrOutput {
	return i.ToBastionConfigPtrOutputWithContext(context.Background())
}

func (i *bastionConfigPtrType) ToBastionConfigPtrOutputWithContext(ctx context.Context) BastionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BastionConfigPtrOutput)
}

type BastionConfigOutput struct{ *pulumi.OutputState }

func (BastionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BastionConfig)(nil)).Elem()
}

func (o BastionConfigOutput) ToBastionConfigOutput() BastionConfigOutput {
	return o
}

func (o BastionConfigOutput) ToBastionConfigOutputWithContext(ctx context.Context) BastionConfigOutput {
	return o
}

func (o BastionConfigOutput) ToBastionConfigPtrOutput() BastionConfigPtrOutput {
	return o.ToBastionConfigPtrOutputWithContext(context.Background())
}

func (o BastionConfigOutput) ToBastionConfigPtrOutputWithContext(ctx context.Context) BastionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BastionConfig) *BastionConfig {
		return &v
	}).(BastionConfigPtrOutput)
}

// Enable data api. Defaults to `false`
func (o BastionConfigOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BastionConfig) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Public subnet id for the bastion host. You may use`awsx.ec2.Vpc.public_subnet_ids[0]`
func (o BastionConfigOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BastionConfig) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type BastionConfigPtrOutput struct{ *pulumi.OutputState }

func (BastionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BastionConfig)(nil)).Elem()
}

func (o BastionConfigPtrOutput) ToBastionConfigPtrOutput() BastionConfigPtrOutput {
	return o
}

func (o BastionConfigPtrOutput) ToBastionConfigPtrOutputWithContext(ctx context.Context) BastionConfigPtrOutput {
	return o
}

func (o BastionConfigPtrOutput) Elem() BastionConfigOutput {
	return o.ApplyT(func(v *BastionConfig) BastionConfig {
		if v != nil {
			return *v
		}
		var ret BastionConfig
		return ret
	}).(BastionConfigOutput)
}

// Enable data api. Defaults to `false`
func (o BastionConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BastionConfig) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Public subnet id for the bastion host. You may use`awsx.ec2.Vpc.public_subnet_ids[0]`
func (o BastionConfigPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BastionConfig) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

type FunctionSchedule struct {
	// Expression for creating a cloudwatch event rule.
	ScheduleExpression string `pulumi:"scheduleExpression"`
	// Input for cloudwatch event target.
	ScheduleInput map[string]string `pulumi:"scheduleInput"`
}

// FunctionScheduleInput is an input type that accepts FunctionScheduleArgs and FunctionScheduleOutput values.
// You can construct a concrete instance of `FunctionScheduleInput` via:
//
//	FunctionScheduleArgs{...}
type FunctionScheduleInput interface {
	pulumi.Input

	ToFunctionScheduleOutput() FunctionScheduleOutput
	ToFunctionScheduleOutputWithContext(context.Context) FunctionScheduleOutput
}

type FunctionScheduleArgs struct {
	// Expression for creating a cloudwatch event rule.
	ScheduleExpression pulumi.StringInput `pulumi:"scheduleExpression"`
	// Input for cloudwatch event target.
	ScheduleInput pulumi.StringMapInput `pulumi:"scheduleInput"`
}

func (FunctionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionSchedule)(nil)).Elem()
}

func (i FunctionScheduleArgs) ToFunctionScheduleOutput() FunctionScheduleOutput {
	return i.ToFunctionScheduleOutputWithContext(context.Background())
}

func (i FunctionScheduleArgs) ToFunctionScheduleOutputWithContext(ctx context.Context) FunctionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionScheduleOutput)
}

func (i FunctionScheduleArgs) ToFunctionSchedulePtrOutput() FunctionSchedulePtrOutput {
	return i.ToFunctionSchedulePtrOutputWithContext(context.Background())
}

func (i FunctionScheduleArgs) ToFunctionSchedulePtrOutputWithContext(ctx context.Context) FunctionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionScheduleOutput).ToFunctionSchedulePtrOutputWithContext(ctx)
}

// FunctionSchedulePtrInput is an input type that accepts FunctionScheduleArgs, FunctionSchedulePtr and FunctionSchedulePtrOutput values.
// You can construct a concrete instance of `FunctionSchedulePtrInput` via:
//
//	        FunctionScheduleArgs{...}
//
//	or:
//
//	        nil
type FunctionSchedulePtrInput interface {
	pulumi.Input

	ToFunctionSchedulePtrOutput() FunctionSchedulePtrOutput
	ToFunctionSchedulePtrOutputWithContext(context.Context) FunctionSchedulePtrOutput
}

type functionSchedulePtrType FunctionScheduleArgs

func FunctionSchedulePtr(v *FunctionScheduleArgs) FunctionSchedulePtrInput {
	return (*functionSchedulePtrType)(v)
}

func (*functionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionSchedule)(nil)).Elem()
}

func (i *functionSchedulePtrType) ToFunctionSchedulePtrOutput() FunctionSchedulePtrOutput {
	return i.ToFunctionSchedulePtrOutputWithContext(context.Background())
}

func (i *functionSchedulePtrType) ToFunctionSchedulePtrOutputWithContext(ctx context.Context) FunctionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionSchedulePtrOutput)
}

type FunctionScheduleOutput struct{ *pulumi.OutputState }

func (FunctionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionSchedule)(nil)).Elem()
}

func (o FunctionScheduleOutput) ToFunctionScheduleOutput() FunctionScheduleOutput {
	return o
}

func (o FunctionScheduleOutput) ToFunctionScheduleOutputWithContext(ctx context.Context) FunctionScheduleOutput {
	return o
}

func (o FunctionScheduleOutput) ToFunctionSchedulePtrOutput() FunctionSchedulePtrOutput {
	return o.ToFunctionSchedulePtrOutputWithContext(context.Background())
}

func (o FunctionScheduleOutput) ToFunctionSchedulePtrOutputWithContext(ctx context.Context) FunctionSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionSchedule) *FunctionSchedule {
		return &v
	}).(FunctionSchedulePtrOutput)
}

// Expression for creating a cloudwatch event rule.
func (o FunctionScheduleOutput) ScheduleExpression() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionSchedule) string { return v.ScheduleExpression }).(pulumi.StringOutput)
}

// Input for cloudwatch event target.
func (o FunctionScheduleOutput) ScheduleInput() pulumi.StringMapOutput {
	return o.ApplyT(func(v FunctionSchedule) map[string]string { return v.ScheduleInput }).(pulumi.StringMapOutput)
}

type FunctionSchedulePtrOutput struct{ *pulumi.OutputState }

func (FunctionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionSchedule)(nil)).Elem()
}

func (o FunctionSchedulePtrOutput) ToFunctionSchedulePtrOutput() FunctionSchedulePtrOutput {
	return o
}

func (o FunctionSchedulePtrOutput) ToFunctionSchedulePtrOutputWithContext(ctx context.Context) FunctionSchedulePtrOutput {
	return o
}

func (o FunctionSchedulePtrOutput) Elem() FunctionScheduleOutput {
	return o.ApplyT(func(v *FunctionSchedule) FunctionSchedule {
		if v != nil {
			return *v
		}
		var ret FunctionSchedule
		return ret
	}).(FunctionScheduleOutput)
}

// Expression for creating a cloudwatch event rule.
func (o FunctionSchedulePtrOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduleExpression
	}).(pulumi.StringPtrOutput)
}

// Input for cloudwatch event target.
func (o FunctionSchedulePtrOutput) ScheduleInput() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FunctionSchedule) map[string]string {
		if v == nil {
			return nil
		}
		return v.ScheduleInput
	}).(pulumi.StringMapOutput)
}

type FunctionUrl struct {
	// CORS Configuration.
	CorsConfiguration *lambda.FunctionUrlCors `pulumi:"corsConfiguration"`
	// Use Lambda URL. Defaults to `false`
	UrlEnabled *bool `pulumi:"urlEnabled"`
}

// FunctionUrlInput is an input type that accepts FunctionUrlArgs and FunctionUrlOutput values.
// You can construct a concrete instance of `FunctionUrlInput` via:
//
//	FunctionUrlArgs{...}
type FunctionUrlInput interface {
	pulumi.Input

	ToFunctionUrlOutput() FunctionUrlOutput
	ToFunctionUrlOutputWithContext(context.Context) FunctionUrlOutput
}

type FunctionUrlArgs struct {
	// CORS Configuration.
	CorsConfiguration lambda.FunctionUrlCorsPtrInput `pulumi:"corsConfiguration"`
	// Use Lambda URL. Defaults to `false`
	UrlEnabled pulumi.BoolPtrInput `pulumi:"urlEnabled"`
}

func (FunctionUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionUrl)(nil)).Elem()
}

func (i FunctionUrlArgs) ToFunctionUrlOutput() FunctionUrlOutput {
	return i.ToFunctionUrlOutputWithContext(context.Background())
}

func (i FunctionUrlArgs) ToFunctionUrlOutputWithContext(ctx context.Context) FunctionUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionUrlOutput)
}

func (i FunctionUrlArgs) ToFunctionUrlPtrOutput() FunctionUrlPtrOutput {
	return i.ToFunctionUrlPtrOutputWithContext(context.Background())
}

func (i FunctionUrlArgs) ToFunctionUrlPtrOutputWithContext(ctx context.Context) FunctionUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionUrlOutput).ToFunctionUrlPtrOutputWithContext(ctx)
}

// FunctionUrlPtrInput is an input type that accepts FunctionUrlArgs, FunctionUrlPtr and FunctionUrlPtrOutput values.
// You can construct a concrete instance of `FunctionUrlPtrInput` via:
//
//	        FunctionUrlArgs{...}
//
//	or:
//
//	        nil
type FunctionUrlPtrInput interface {
	pulumi.Input

	ToFunctionUrlPtrOutput() FunctionUrlPtrOutput
	ToFunctionUrlPtrOutputWithContext(context.Context) FunctionUrlPtrOutput
}

type functionUrlPtrType FunctionUrlArgs

func FunctionUrlPtr(v *FunctionUrlArgs) FunctionUrlPtrInput {
	return (*functionUrlPtrType)(v)
}

func (*functionUrlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionUrl)(nil)).Elem()
}

func (i *functionUrlPtrType) ToFunctionUrlPtrOutput() FunctionUrlPtrOutput {
	return i.ToFunctionUrlPtrOutputWithContext(context.Background())
}

func (i *functionUrlPtrType) ToFunctionUrlPtrOutputWithContext(ctx context.Context) FunctionUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionUrlPtrOutput)
}

type FunctionUrlOutput struct{ *pulumi.OutputState }

func (FunctionUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionUrl)(nil)).Elem()
}

func (o FunctionUrlOutput) ToFunctionUrlOutput() FunctionUrlOutput {
	return o
}

func (o FunctionUrlOutput) ToFunctionUrlOutputWithContext(ctx context.Context) FunctionUrlOutput {
	return o
}

func (o FunctionUrlOutput) ToFunctionUrlPtrOutput() FunctionUrlPtrOutput {
	return o.ToFunctionUrlPtrOutputWithContext(context.Background())
}

func (o FunctionUrlOutput) ToFunctionUrlPtrOutputWithContext(ctx context.Context) FunctionUrlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionUrl) *FunctionUrl {
		return &v
	}).(FunctionUrlPtrOutput)
}

// CORS Configuration.
func (o FunctionUrlOutput) CorsConfiguration() lambda.FunctionUrlCorsPtrOutput {
	return o.ApplyT(func(v FunctionUrl) *lambda.FunctionUrlCors { return v.CorsConfiguration }).(lambda.FunctionUrlCorsPtrOutput)
}

// Use Lambda URL. Defaults to `false`
func (o FunctionUrlOutput) UrlEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FunctionUrl) *bool { return v.UrlEnabled }).(pulumi.BoolPtrOutput)
}

type FunctionUrlPtrOutput struct{ *pulumi.OutputState }

func (FunctionUrlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionUrl)(nil)).Elem()
}

func (o FunctionUrlPtrOutput) ToFunctionUrlPtrOutput() FunctionUrlPtrOutput {
	return o
}

func (o FunctionUrlPtrOutput) ToFunctionUrlPtrOutputWithContext(ctx context.Context) FunctionUrlPtrOutput {
	return o
}

func (o FunctionUrlPtrOutput) Elem() FunctionUrlOutput {
	return o.ApplyT(func(v *FunctionUrl) FunctionUrl {
		if v != nil {
			return *v
		}
		var ret FunctionUrl
		return ret
	}).(FunctionUrlOutput)
}

// CORS Configuration.
func (o FunctionUrlPtrOutput) CorsConfiguration() lambda.FunctionUrlCorsPtrOutput {
	return o.ApplyT(func(v *FunctionUrl) *lambda.FunctionUrlCors {
		if v == nil {
			return nil
		}
		return v.CorsConfiguration
	}).(lambda.FunctionUrlCorsPtrOutput)
}

// Use Lambda URL. Defaults to `false`
func (o FunctionUrlPtrOutput) UrlEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FunctionUrl) *bool {
		if v == nil {
			return nil
		}
		return v.UrlEnabled
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BastionConfigInput)(nil)).Elem(), BastionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BastionConfigPtrInput)(nil)).Elem(), BastionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionScheduleInput)(nil)).Elem(), FunctionScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionSchedulePtrInput)(nil)).Elem(), FunctionScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionUrlInput)(nil)).Elem(), FunctionUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionUrlPtrInput)(nil)).Elem(), FunctionUrlArgs{})
	pulumi.RegisterOutputType(BastionConfigOutput{})
	pulumi.RegisterOutputType(BastionConfigPtrOutput{})
	pulumi.RegisterOutputType(FunctionScheduleOutput{})
	pulumi.RegisterOutputType(FunctionSchedulePtrOutput{})
	pulumi.RegisterOutputType(FunctionUrlOutput{})
	pulumi.RegisterOutputType(FunctionUrlPtrOutput{})
}
