// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServerlessDatabase struct {
	pulumi.ResourceState

	Bastion_ip          pulumi.StringPtrOutput `pulumi:"bastion_ip"`
	Bastion_private_key pulumi.StringPtrOutput `pulumi:"bastion_private_key"`
	Cluster_arn         pulumi.StringOutput    `pulumi:"cluster_arn"`
	Host                pulumi.StringOutput    `pulumi:"host"`
	Name                pulumi.StringOutput    `pulumi:"name"`
	Password            pulumi.StringPtrOutput `pulumi:"password"`
	Policy_document     pulumi.StringPtrOutput `pulumi:"policy_document"`
	Port                pulumi.Float64Output   `pulumi:"port"`
	Uri                 pulumi.StringOutput    `pulumi:"uri"`
	User                pulumi.StringOutput    `pulumi:"user"`
}

// NewServerlessDatabase registers a new resource with the given unique name, arguments, and options.
func NewServerlessDatabase(ctx *pulumi.Context,
	name string, args *ServerlessDatabaseArgs, opts ...pulumi.ResourceOption) (*ServerlessDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseType == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseType'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VpcSubnets == nil {
		return nil, errors.New("invalid value for required argument 'VpcSubnets'")
	}
	var resource ServerlessDatabase
	err := ctx.RegisterRemoteComponentResource("nuage:aws:ServerlessDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type serverlessDatabaseArgs struct {
	// Enable data api. Defaults to `false`
	BastionEnabled *bool `pulumi:"bastionEnabled"`
	// List of public subnet ip addresses for the bastion host.
	BastionSubnets []string `pulumi:"bastionSubnets"`
	// Enable data api. Defaults to `false`
	DataApi *bool `pulumi:"dataApi"`
	// Name of the database.
	DatabaseName *string `pulumi:"databaseName"`
	// Database type. `mysql` or `postgresql`
	DatabaseType string `pulumi:"databaseType"`
	// List of whitelisted IP addresses. If not specified, it will be public 0.0.0.0/0
	IpWhitelist []string `pulumi:"ipWhitelist"`
	// Master user name of the db.
	MasterUserName *string `pulumi:"masterUserName"`
	// Determines whether a final DB snapshot is created before the DB instance is deleted. Defaults to `false`
	SkipFinalSnapshot *bool `pulumi:"skipFinalSnapshot"`
	// Vpc id.
	VpcId string `pulumi:"vpcId"`
	// List of subnet ip addresses.
	VpcSubnets []string `pulumi:"vpcSubnets"`
}

// The set of arguments for constructing a ServerlessDatabase resource.
type ServerlessDatabaseArgs struct {
	// Enable data api. Defaults to `false`
	BastionEnabled pulumi.BoolPtrInput
	// List of public subnet ip addresses for the bastion host.
	BastionSubnets pulumi.StringArrayInput
	// Enable data api. Defaults to `false`
	DataApi pulumi.BoolPtrInput
	// Name of the database.
	DatabaseName pulumi.StringPtrInput
	// Database type. `mysql` or `postgresql`
	DatabaseType pulumi.StringInput
	// List of whitelisted IP addresses. If not specified, it will be public 0.0.0.0/0
	IpWhitelist pulumi.StringArrayInput
	// Master user name of the db.
	MasterUserName pulumi.StringPtrInput
	// Determines whether a final DB snapshot is created before the DB instance is deleted. Defaults to `false`
	SkipFinalSnapshot pulumi.BoolPtrInput
	// Vpc id.
	VpcId pulumi.StringInput
	// List of subnet ip addresses.
	VpcSubnets pulumi.StringArrayInput
}

func (ServerlessDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessDatabaseArgs)(nil)).Elem()
}

type ServerlessDatabaseInput interface {
	pulumi.Input

	ToServerlessDatabaseOutput() ServerlessDatabaseOutput
	ToServerlessDatabaseOutputWithContext(ctx context.Context) ServerlessDatabaseOutput
}

func (*ServerlessDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessDatabase)(nil)).Elem()
}

func (i *ServerlessDatabase) ToServerlessDatabaseOutput() ServerlessDatabaseOutput {
	return i.ToServerlessDatabaseOutputWithContext(context.Background())
}

func (i *ServerlessDatabase) ToServerlessDatabaseOutputWithContext(ctx context.Context) ServerlessDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessDatabaseOutput)
}

// ServerlessDatabaseArrayInput is an input type that accepts ServerlessDatabaseArray and ServerlessDatabaseArrayOutput values.
// You can construct a concrete instance of `ServerlessDatabaseArrayInput` via:
//
//	ServerlessDatabaseArray{ ServerlessDatabaseArgs{...} }
type ServerlessDatabaseArrayInput interface {
	pulumi.Input

	ToServerlessDatabaseArrayOutput() ServerlessDatabaseArrayOutput
	ToServerlessDatabaseArrayOutputWithContext(context.Context) ServerlessDatabaseArrayOutput
}

type ServerlessDatabaseArray []ServerlessDatabaseInput

func (ServerlessDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessDatabase)(nil)).Elem()
}

func (i ServerlessDatabaseArray) ToServerlessDatabaseArrayOutput() ServerlessDatabaseArrayOutput {
	return i.ToServerlessDatabaseArrayOutputWithContext(context.Background())
}

func (i ServerlessDatabaseArray) ToServerlessDatabaseArrayOutputWithContext(ctx context.Context) ServerlessDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessDatabaseArrayOutput)
}

// ServerlessDatabaseMapInput is an input type that accepts ServerlessDatabaseMap and ServerlessDatabaseMapOutput values.
// You can construct a concrete instance of `ServerlessDatabaseMapInput` via:
//
//	ServerlessDatabaseMap{ "key": ServerlessDatabaseArgs{...} }
type ServerlessDatabaseMapInput interface {
	pulumi.Input

	ToServerlessDatabaseMapOutput() ServerlessDatabaseMapOutput
	ToServerlessDatabaseMapOutputWithContext(context.Context) ServerlessDatabaseMapOutput
}

type ServerlessDatabaseMap map[string]ServerlessDatabaseInput

func (ServerlessDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessDatabase)(nil)).Elem()
}

func (i ServerlessDatabaseMap) ToServerlessDatabaseMapOutput() ServerlessDatabaseMapOutput {
	return i.ToServerlessDatabaseMapOutputWithContext(context.Background())
}

func (i ServerlessDatabaseMap) ToServerlessDatabaseMapOutputWithContext(ctx context.Context) ServerlessDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessDatabaseMapOutput)
}

type ServerlessDatabaseOutput struct{ *pulumi.OutputState }

func (ServerlessDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessDatabase)(nil)).Elem()
}

func (o ServerlessDatabaseOutput) ToServerlessDatabaseOutput() ServerlessDatabaseOutput {
	return o
}

func (o ServerlessDatabaseOutput) ToServerlessDatabaseOutputWithContext(ctx context.Context) ServerlessDatabaseOutput {
	return o
}

type ServerlessDatabaseArrayOutput struct{ *pulumi.OutputState }

func (ServerlessDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessDatabase)(nil)).Elem()
}

func (o ServerlessDatabaseArrayOutput) ToServerlessDatabaseArrayOutput() ServerlessDatabaseArrayOutput {
	return o
}

func (o ServerlessDatabaseArrayOutput) ToServerlessDatabaseArrayOutputWithContext(ctx context.Context) ServerlessDatabaseArrayOutput {
	return o
}

func (o ServerlessDatabaseArrayOutput) Index(i pulumi.IntInput) ServerlessDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerlessDatabase {
		return vs[0].([]*ServerlessDatabase)[vs[1].(int)]
	}).(ServerlessDatabaseOutput)
}

type ServerlessDatabaseMapOutput struct{ *pulumi.OutputState }

func (ServerlessDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessDatabase)(nil)).Elem()
}

func (o ServerlessDatabaseMapOutput) ToServerlessDatabaseMapOutput() ServerlessDatabaseMapOutput {
	return o
}

func (o ServerlessDatabaseMapOutput) ToServerlessDatabaseMapOutputWithContext(ctx context.Context) ServerlessDatabaseMapOutput {
	return o
}

func (o ServerlessDatabaseMapOutput) MapIndex(k pulumi.StringInput) ServerlessDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerlessDatabase {
		return vs[0].(map[string]*ServerlessDatabase)[vs[1].(string)]
	}).(ServerlessDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessDatabaseInput)(nil)).Elem(), &ServerlessDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessDatabaseArrayInput)(nil)).Elem(), ServerlessDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessDatabaseMapInput)(nil)).Elem(), ServerlessDatabaseMap{})
	pulumi.RegisterOutputType(ServerlessDatabaseOutput{})
	pulumi.RegisterOutputType(ServerlessDatabaseArrayOutput{})
	pulumi.RegisterOutputType(ServerlessDatabaseMapOutput{})
}
