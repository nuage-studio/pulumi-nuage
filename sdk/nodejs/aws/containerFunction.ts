// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ContainerFunction extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'nuage:aws:ContainerFunction';

    /**
     * Returns true if the given object is an instance of ContainerFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerFunction.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly function_url!: pulumi.Output<string>;
    public /*out*/ readonly name!: pulumi.Output<string>;

    /**
     * Create a ContainerFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerFunctionArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.ecrRepositoryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ecrRepositoryName'");
            }
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dockerfile"] = args ? args.dockerfile : undefined;
            resourceInputs["ecrRepositoryName"] = args ? args.ecrRepositoryName : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["keepWarm"] = args ? args.keepWarm : undefined;
            resourceInputs["memorySize"] = args ? args.memorySize : undefined;
            resourceInputs["policyDocument"] = args ? args.policyDocument : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["function_url"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["function_url"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerFunction.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a ContainerFunction resource.
 */
export interface ContainerFunctionArgs {
    /**
     * Architecture, either `X86_64` or `ARM64`. Defaults to `x86_64`
     */
    architecture?: pulumi.Input<string>;
    /**
     * Dockerfile context path.
     */
    context?: pulumi.Input<string>;
    /**
     * Description of the function.
     */
    description?: pulumi.Input<string>;
    /**
     * Dockerfile path. Defaults to `./Dockerfile`
     */
    dockerfile?: pulumi.Input<string>;
    /**
     * ECR repository name for new definition.
     */
    ecrRepositoryName: pulumi.Input<string>;
    /**
     * Environment Variables
     */
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Keep warm by refreshing the lambda function every 5 minutes. Defaults to `false`
     */
    keepWarm?: pulumi.Input<boolean>;
    /**
     * Amount of memory in MB your Lambda Function can use at runtime. Defaults to `512`.
     */
    memorySize?: pulumi.Input<number>;
    /**
     * Policy Document for lambda.
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * Existing ECR repository name
     */
    repository?: pulumi.Input<string>;
    /**
     * Amount of time your Lambda Function has to run in seconds. Defaults to `3`
     */
    timeout?: pulumi.Input<number>;
    /**
     * Use Lambda URL. Defaults to `false`
     */
    url?: pulumi.Input<boolean>;
}
