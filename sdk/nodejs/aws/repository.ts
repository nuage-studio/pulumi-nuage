// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates ECR Repository with a lifecycle policy. `url` output of this component can be used within container function to push your images.
 *
 * ## Example Usage
 */
export class Repository extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'nuage:aws:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * ARN (Amazon Resource Name) of the repository
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Id of the repository
     */
    public /*out*/ readonly id!: pulumi.Output<string>;
    /**
     * Name of the repository
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Registry id of the repository
     */
    public /*out*/ readonly registry_id!: pulumi.Output<string>;
    /**
     * URL of the repository
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RepositoryArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["expireInDays"] = args ? args.expireInDays : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["id"] = undefined /*out*/;
            resourceInputs["registry_id"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["id"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["registry_id"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * Number of days for expiring images using LifecyclePolicy.
     */
    expireInDays?: pulumi.Input<number>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Name prefix as an alternative to name and adds random suffix at the end.
     */
    namePrefix?: pulumi.Input<string>;
}
