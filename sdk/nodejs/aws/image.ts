// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage build and deployment of Docker builds. It automatically builds the Docker image and pushes it to the specified repository.
 *
 * ## Example Usage
 */
export class Image extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'nuage:aws:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    public /*out*/ readonly name!: pulumi.Output<string>;
    public /*out*/ readonly uri!: pulumi.Output<string>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.buildArgs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'buildArgs'");
            }
            if ((!args || args.repositoryUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryUrl'");
            }
            resourceInputs["buildArgs"] = args ? args.buildArgs : undefined;
            resourceInputs["repositoryUrl"] = args ? args.repositoryUrl : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        } else {
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * Docker build arguments of the image.
     */
    buildArgs: pulumi.Input<inputs.aws.DockerBuildArgs>;
    /**
     * Url of the repository.
     */
    repositoryUrl: pulumi.Input<string>;
}
