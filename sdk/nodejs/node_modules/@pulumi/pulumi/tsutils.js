"use strict";
// Copyright 2016-2022, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const log = __importStar(require("./log"));
/** @internal */
function loadTypeScriptCompilerOptions(tsConfigPath) {
    var _a;
    try {
        const tsConfigString = fs.readFileSync(tsConfigPath).toString();
        // Using local `require("typescript")` to avoid always loading
        // and only load on-demand, avoid up to 300s overhead in Node runtime.
        const ts = require("typescript");
        const tsConfig = ts.parseConfigFileTextToJson(tsConfigPath, tsConfigString).config;
        return (_a = tsConfig["compilerOptions"]) !== null && _a !== void 0 ? _a : {};
    }
    catch (err) {
        log.debug(`Ignoring error in loadCompilerOptions(${tsConfigPath}}): ${err}`);
        return {};
    }
}
exports.loadTypeScriptCompilerOptions = loadTypeScriptCompilerOptions;
//# sourceMappingURL=tsutils.js.map