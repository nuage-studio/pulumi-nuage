"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__exportStar(require("./container"), exports);
__exportStar(require("./docker"), exports);
__exportStar(require("./getNetwork"), exports);
__exportStar(require("./getPlugin"), exports);
__exportStar(require("./getRegistryImage"), exports);
__exportStar(require("./getRemoteImage"), exports);
__exportStar(require("./image"), exports);
__exportStar(require("./network"), exports);
__exportStar(require("./plugin"), exports);
__exportStar(require("./provider"), exports);
__exportStar(require("./registryImage"), exports);
__exportStar(require("./remoteImage"), exports);
__exportStar(require("./secret"), exports);
__exportStar(require("./service"), exports);
__exportStar(require("./serviceConfig"), exports);
__exportStar(require("./tag"), exports);
__exportStar(require("./utils"), exports);
__exportStar(require("./volume"), exports);
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
// Import resources to register:
const container_1 = require("./container");
const network_1 = require("./network");
const plugin_1 = require("./plugin");
const registryImage_1 = require("./registryImage");
const remoteImage_1 = require("./remoteImage");
const secret_1 = require("./secret");
const service_1 = require("./service");
const serviceConfig_1 = require("./serviceConfig");
const tag_1 = require("./tag");
const volume_1 = require("./volume");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "docker:index/container:Container":
                return new container_1.Container(name, undefined, { urn });
            case "docker:index/network:Network":
                return new network_1.Network(name, undefined, { urn });
            case "docker:index/plugin:Plugin":
                return new plugin_1.Plugin(name, undefined, { urn });
            case "docker:index/registryImage:RegistryImage":
                return new registryImage_1.RegistryImage(name, undefined, { urn });
            case "docker:index/remoteImage:RemoteImage":
                return new remoteImage_1.RemoteImage(name, undefined, { urn });
            case "docker:index/secret:Secret":
                return new secret_1.Secret(name, undefined, { urn });
            case "docker:index/service:Service":
                return new service_1.Service(name, undefined, { urn });
            case "docker:index/serviceConfig:ServiceConfig":
                return new serviceConfig_1.ServiceConfig(name, undefined, { urn });
            case "docker:index/tag:Tag":
                return new tag_1.Tag(name, undefined, { urn });
            case "docker:index/volume:Volume":
                return new volume_1.Volume(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("docker", "index/container", _module);
pulumi.runtime.registerResourceModule("docker", "index/network", _module);
pulumi.runtime.registerResourceModule("docker", "index/plugin", _module);
pulumi.runtime.registerResourceModule("docker", "index/registryImage", _module);
pulumi.runtime.registerResourceModule("docker", "index/remoteImage", _module);
pulumi.runtime.registerResourceModule("docker", "index/secret", _module);
pulumi.runtime.registerResourceModule("docker", "index/service", _module);
pulumi.runtime.registerResourceModule("docker", "index/serviceConfig", _module);
pulumi.runtime.registerResourceModule("docker", "index/tag", _module);
pulumi.runtime.registerResourceModule("docker", "index/volume", _module);
const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("docker", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:docker") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map