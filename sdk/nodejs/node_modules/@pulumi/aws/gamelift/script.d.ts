import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides an GameLift Script resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.gamelift.Script("example", {storageLocation: {
 *     bucket: aws_s3_bucket.example.bucket,
 *     key: aws_s3_object.example.key,
 *     roleArn: aws_iam_role.example.arn,
 * }});
 * ```
 *
 * ## Import
 *
 * GameLift Scripts can be imported using the ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:gamelift/script:Script example <script-id>
 * ```
 */
export declare class Script extends pulumi.CustomResource {
    /**
     * Get an existing Script resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScriptState, opts?: pulumi.CustomResourceOptions): Script;
    /**
     * Returns true if the given object is an instance of Script.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Script;
    /**
     * GameLift Script ARN.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Name of the script
     */
    readonly name: pulumi.Output<string>;
    /**
     * Information indicating where your game script files are stored. See below.
     */
    readonly storageLocation: pulumi.Output<outputs.gamelift.ScriptStorageLocation>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Version that is associated with this script.
     */
    readonly version: pulumi.Output<string | undefined>;
    /**
     * A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
     */
    readonly zipFile: pulumi.Output<string | undefined>;
    /**
     * Create a Script resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ScriptArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Script resources.
 */
export interface ScriptState {
    /**
     * GameLift Script ARN.
     */
    arn?: pulumi.Input<string>;
    /**
     * Name of the script
     */
    name?: pulumi.Input<string>;
    /**
     * Information indicating where your game script files are stored. See below.
     */
    storageLocation?: pulumi.Input<inputs.gamelift.ScriptStorageLocation>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Version that is associated with this script.
     */
    version?: pulumi.Input<string>;
    /**
     * A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
     */
    zipFile?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Script resource.
 */
export interface ScriptArgs {
    /**
     * Name of the script
     */
    name?: pulumi.Input<string>;
    /**
     * Information indicating where your game script files are stored. See below.
     */
    storageLocation?: pulumi.Input<inputs.gamelift.ScriptStorageLocation>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Version that is associated with this script.
     */
    version?: pulumi.Input<string>;
    /**
     * A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
     */
    zipFile?: pulumi.Input<string>;
}
