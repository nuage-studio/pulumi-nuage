"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityProvider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Cognito User Identity Provider resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cognito.UserPool("example", {autoVerifiedAttributes: ["email"]});
 * const exampleProvider = new aws.cognito.IdentityProvider("exampleProvider", {
 *     userPoolId: example.id,
 *     providerName: "Google",
 *     providerType: "Google",
 *     providerDetails: {
 *         authorize_scopes: "email",
 *         client_id: "your client_id",
 *         client_secret: "your client_secret",
 *     },
 *     attributeMapping: {
 *         email: "email",
 *         username: "sub",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * `aws_cognito_identity_provider` resources can be imported using their User Pool ID and Provider Name, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cognito/identityProvider:IdentityProvider example us-west-2_abc123:CorpAD
 * ```
 */
class IdentityProvider extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["attributeMapping"] = state ? state.attributeMapping : undefined;
            resourceInputs["idpIdentifiers"] = state ? state.idpIdentifiers : undefined;
            resourceInputs["providerDetails"] = state ? state.providerDetails : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["userPoolId"] = state ? state.userPoolId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.providerDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerDetails'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            if ((!args || args.providerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerType'");
            }
            if ((!args || args.userPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPoolId'");
            }
            resourceInputs["attributeMapping"] = args ? args.attributeMapping : undefined;
            resourceInputs["idpIdentifiers"] = args ? args.idpIdentifiers : undefined;
            resourceInputs["providerDetails"] = args ? args.providerDetails : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
            resourceInputs["userPoolId"] = args ? args.userPoolId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityProvider.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IdentityProvider(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityProvider.__pulumiType;
    }
}
exports.IdentityProvider = IdentityProvider;
/** @internal */
IdentityProvider.__pulumiType = 'aws:cognito/identityProvider:IdentityProvider';
//# sourceMappingURL=identityProvider.js.map