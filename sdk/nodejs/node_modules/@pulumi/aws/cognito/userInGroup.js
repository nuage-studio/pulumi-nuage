"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserInGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Adds the specified user to the specified group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleUserPool = new aws.cognito.UserPool("exampleUserPool", {passwordPolicy: {
 *     temporaryPasswordValidityDays: 7,
 *     minimumLength: 6,
 *     requireUppercase: false,
 *     requireSymbols: false,
 *     requireNumbers: false,
 * }});
 * const exampleUser = new aws.cognito.User("exampleUser", {
 *     userPoolId: aws_cognito_user_pool.test.id,
 *     username: "example",
 * });
 * const exampleUserGroup = new aws.cognito.UserGroup("exampleUserGroup", {userPoolId: aws_cognito_user_pool.test.id});
 * const exampleUserInGroup = new aws.cognito.UserInGroup("exampleUserInGroup", {
 *     userPoolId: exampleUserPool.id,
 *     groupName: exampleUserGroup.name,
 *     username: exampleUser.username,
 * });
 * ```
 */
class UserInGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["userPoolId"] = state ? state.userPoolId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            if ((!args || args.userPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPoolId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["userPoolId"] = args ? args.userPoolId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserInGroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing UserInGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UserInGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UserInGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserInGroup.__pulumiType;
    }
}
exports.UserInGroup = UserInGroup;
/** @internal */
UserInGroup.__pulumiType = 'aws:cognito/userInGroup:UserInGroup';
//# sourceMappingURL=userInGroup.js.map