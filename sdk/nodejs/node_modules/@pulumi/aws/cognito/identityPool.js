"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityPool = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AWS Cognito Identity Pool.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const _default = new aws.iam.SamlProvider("default", {samlMetadataDocument: fs.readFileSync("saml-metadata.xml")});
 * const main = new aws.cognito.IdentityPool("main", {
 *     identityPoolName: "identity pool",
 *     allowUnauthenticatedIdentities: false,
 *     allowClassicFlow: false,
 *     cognitoIdentityProviders: [
 *         {
 *             clientId: "6lhlkkfbfb4q5kpp90urffae",
 *             providerName: "cognito-idp.us-east-1.amazonaws.com/us-east-1_Tv0493apJ",
 *             serverSideTokenCheck: false,
 *         },
 *         {
 *             clientId: "7kodkvfqfb4qfkp39eurffae",
 *             providerName: "cognito-idp.us-east-1.amazonaws.com/eu-west-1_Zr231apJu",
 *             serverSideTokenCheck: false,
 *         },
 *     ],
 *     supportedLoginProviders: {
 *         "graph.facebook.com": "7346241598935552",
 *         "accounts.google.com": "123456789012.apps.googleusercontent.com",
 *     },
 *     samlProviderArns: [_default.arn],
 *     openidConnectProviderArns: ["arn:aws:iam::123456789012:oidc-provider/id.example.com"],
 * });
 * ```
 *
 * ## Import
 *
 * Cognito Identity Pool can be imported using its ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cognito/identityPool:IdentityPool mypool us-west-2_abc123
 * ```
 */
class IdentityPool extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowClassicFlow"] = state ? state.allowClassicFlow : undefined;
            resourceInputs["allowUnauthenticatedIdentities"] = state ? state.allowUnauthenticatedIdentities : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cognitoIdentityProviders"] = state ? state.cognitoIdentityProviders : undefined;
            resourceInputs["developerProviderName"] = state ? state.developerProviderName : undefined;
            resourceInputs["identityPoolName"] = state ? state.identityPoolName : undefined;
            resourceInputs["openidConnectProviderArns"] = state ? state.openidConnectProviderArns : undefined;
            resourceInputs["samlProviderArns"] = state ? state.samlProviderArns : undefined;
            resourceInputs["supportedLoginProviders"] = state ? state.supportedLoginProviders : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.identityPoolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityPoolName'");
            }
            resourceInputs["allowClassicFlow"] = args ? args.allowClassicFlow : undefined;
            resourceInputs["allowUnauthenticatedIdentities"] = args ? args.allowUnauthenticatedIdentities : undefined;
            resourceInputs["cognitoIdentityProviders"] = args ? args.cognitoIdentityProviders : undefined;
            resourceInputs["developerProviderName"] = args ? args.developerProviderName : undefined;
            resourceInputs["identityPoolName"] = args ? args.identityPoolName : undefined;
            resourceInputs["openidConnectProviderArns"] = args ? args.openidConnectProviderArns : undefined;
            resourceInputs["samlProviderArns"] = args ? args.samlProviderArns : undefined;
            resourceInputs["supportedLoginProviders"] = args ? args.supportedLoginProviders : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityPool.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing IdentityPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IdentityPool(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IdentityPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityPool.__pulumiType;
    }
}
exports.IdentityPool = IdentityPool;
/** @internal */
IdentityPool.__pulumiType = 'aws:cognito/identityPool:IdentityPool';
//# sourceMappingURL=identityPool.js.map