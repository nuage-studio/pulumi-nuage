"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPool = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Cognito User Pool resource.
 *
 * ## Example Usage
 * ### Basic configuration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const pool = new aws.cognito.UserPool("pool", {});
 * ```
 * ### Enabling SMS and Software Token Multi-Factor Authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // ... other configuration ...
 * const example = new aws.cognito.UserPool("example", {
 *     mfaConfiguration: "ON",
 *     smsAuthenticationMessage: "Your code is {####}",
 *     smsConfiguration: {
 *         externalId: "example",
 *         snsCallerArn: aws_iam_role.example.arn,
 *     },
 *     softwareTokenMfaConfiguration: {
 *         enabled: true,
 *     },
 * });
 * ```
 * ### Using Account Recovery Setting
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.cognito.UserPool("test", {
 *     accountRecoverySetting: {
 *         recoveryMechanisms: [
 *             {
 *                 name: "verified_email",
 *                 priority: 1,
 *             },
 *             {
 *                 name: "verified_phone_number",
 *                 priority: 2,
 *             },
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Cognito User Pools can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cognito/userPool:UserPool pool us-west-2_abc123
 * ```
 */
class UserPool extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountRecoverySetting"] = state ? state.accountRecoverySetting : undefined;
            resourceInputs["adminCreateUserConfig"] = state ? state.adminCreateUserConfig : undefined;
            resourceInputs["aliasAttributes"] = state ? state.aliasAttributes : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoVerifiedAttributes"] = state ? state.autoVerifiedAttributes : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["customDomain"] = state ? state.customDomain : undefined;
            resourceInputs["deviceConfiguration"] = state ? state.deviceConfiguration : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["emailConfiguration"] = state ? state.emailConfiguration : undefined;
            resourceInputs["emailVerificationMessage"] = state ? state.emailVerificationMessage : undefined;
            resourceInputs["emailVerificationSubject"] = state ? state.emailVerificationSubject : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["estimatedNumberOfUsers"] = state ? state.estimatedNumberOfUsers : undefined;
            resourceInputs["lambdaConfig"] = state ? state.lambdaConfig : undefined;
            resourceInputs["lastModifiedDate"] = state ? state.lastModifiedDate : undefined;
            resourceInputs["mfaConfiguration"] = state ? state.mfaConfiguration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passwordPolicy"] = state ? state.passwordPolicy : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["smsAuthenticationMessage"] = state ? state.smsAuthenticationMessage : undefined;
            resourceInputs["smsConfiguration"] = state ? state.smsConfiguration : undefined;
            resourceInputs["smsVerificationMessage"] = state ? state.smsVerificationMessage : undefined;
            resourceInputs["softwareTokenMfaConfiguration"] = state ? state.softwareTokenMfaConfiguration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["userPoolAddOns"] = state ? state.userPoolAddOns : undefined;
            resourceInputs["usernameAttributes"] = state ? state.usernameAttributes : undefined;
            resourceInputs["usernameConfiguration"] = state ? state.usernameConfiguration : undefined;
            resourceInputs["verificationMessageTemplate"] = state ? state.verificationMessageTemplate : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["accountRecoverySetting"] = args ? args.accountRecoverySetting : undefined;
            resourceInputs["adminCreateUserConfig"] = args ? args.adminCreateUserConfig : undefined;
            resourceInputs["aliasAttributes"] = args ? args.aliasAttributes : undefined;
            resourceInputs["autoVerifiedAttributes"] = args ? args.autoVerifiedAttributes : undefined;
            resourceInputs["deviceConfiguration"] = args ? args.deviceConfiguration : undefined;
            resourceInputs["emailConfiguration"] = args ? args.emailConfiguration : undefined;
            resourceInputs["emailVerificationMessage"] = args ? args.emailVerificationMessage : undefined;
            resourceInputs["emailVerificationSubject"] = args ? args.emailVerificationSubject : undefined;
            resourceInputs["lambdaConfig"] = args ? args.lambdaConfig : undefined;
            resourceInputs["mfaConfiguration"] = args ? args.mfaConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwordPolicy"] = args ? args.passwordPolicy : undefined;
            resourceInputs["schemas"] = args ? args.schemas : undefined;
            resourceInputs["smsAuthenticationMessage"] = args ? args.smsAuthenticationMessage : undefined;
            resourceInputs["smsConfiguration"] = args ? args.smsConfiguration : undefined;
            resourceInputs["smsVerificationMessage"] = args ? args.smsVerificationMessage : undefined;
            resourceInputs["softwareTokenMfaConfiguration"] = args ? args.softwareTokenMfaConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userPoolAddOns"] = args ? args.userPoolAddOns : undefined;
            resourceInputs["usernameAttributes"] = args ? args.usernameAttributes : undefined;
            resourceInputs["usernameConfiguration"] = args ? args.usernameConfiguration : undefined;
            resourceInputs["verificationMessageTemplate"] = args ? args.verificationMessageTemplate : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["customDomain"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["estimatedNumberOfUsers"] = undefined /*out*/;
            resourceInputs["lastModifiedDate"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserPool.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing UserPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UserPool(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UserPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserPool.__pulumiType;
    }
}
exports.UserPool = UserPool;
/** @internal */
UserPool.__pulumiType = 'aws:cognito/userPool:UserPool';
//# sourceMappingURL=userPool.js.map