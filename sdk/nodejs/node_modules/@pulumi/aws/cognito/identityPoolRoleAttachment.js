"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityPoolRoleAttachment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AWS Cognito Identity Pool Roles Attachment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mainIdentityPool = new aws.cognito.IdentityPool("mainIdentityPool", {
 *     identityPoolName: "identity pool",
 *     allowUnauthenticatedIdentities: false,
 *     supportedLoginProviders: {
 *         "graph.facebook.com": "7346241598935555",
 *     },
 * });
 * const authenticatedRole = new aws.iam.Role("authenticatedRole", {assumeRolePolicy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Federated": "cognito-identity.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRoleWithWebIdentity",
 *       "Condition": {
 *         "StringEquals": {
 *           "cognito-identity.amazonaws.com:aud": "${mainIdentityPool.id}"
 *         },
 *         "ForAnyValue:StringLike": {
 *           "cognito-identity.amazonaws.com:amr": "authenticated"
 *         }
 *       }
 *     }
 *   ]
 * }
 * `});
 * const authenticatedRolePolicy = new aws.iam.RolePolicy("authenticatedRolePolicy", {
 *     role: authenticatedRole.id,
 *     policy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Action": [
 *         "mobileanalytics:PutEvents",
 *         "cognito-sync:*",
 *         "cognito-identity:*"
 *       ],
 *       "Resource": [
 *         "*"
 *       ]
 *     }
 *   ]
 * }
 * `,
 * });
 * const mainIdentityPoolRoleAttachment = new aws.cognito.IdentityPoolRoleAttachment("mainIdentityPoolRoleAttachment", {
 *     identityPoolId: mainIdentityPool.id,
 *     roleMappings: [{
 *         identityProvider: "graph.facebook.com",
 *         ambiguousRoleResolution: "AuthenticatedRole",
 *         type: "Rules",
 *         mappingRules: [{
 *             claim: "isAdmin",
 *             matchType: "Equals",
 *             roleArn: authenticatedRole.arn,
 *             value: "paid",
 *         }],
 *     }],
 *     roles: {
 *         authenticated: authenticatedRole.arn,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Cognito Identity Pool Roles Attachment can be imported using the Identity Pool ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cognito/identityPoolRoleAttachment:IdentityPoolRoleAttachment example us-west-2:b64805ad-cb56-40ba-9ffc-f5d8207e6d42
 * ```
 */
class IdentityPoolRoleAttachment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["identityPoolId"] = state ? state.identityPoolId : undefined;
            resourceInputs["roleMappings"] = state ? state.roleMappings : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.identityPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityPoolId'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            resourceInputs["identityPoolId"] = args ? args.identityPoolId : undefined;
            resourceInputs["roleMappings"] = args ? args.roleMappings : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityPoolRoleAttachment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing IdentityPoolRoleAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IdentityPoolRoleAttachment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IdentityPoolRoleAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityPoolRoleAttachment.__pulumiType;
    }
}
exports.IdentityPoolRoleAttachment = IdentityPoolRoleAttachment;
/** @internal */
IdentityPoolRoleAttachment.__pulumiType = 'aws:cognito/identityPoolRoleAttachment:IdentityPoolRoleAttachment';
//# sourceMappingURL=identityPoolRoleAttachment.js.map