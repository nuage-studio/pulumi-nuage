"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gateway = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an AWS Storage Gateway file, tape, or volume gateway in the provider region.
 *
 * > **NOTE:** The Storage Gateway API requires the gateway to be connected to properly return information after activation. If you are receiving `The specified gateway is not connected` errors during resource creation (gateway activation), ensure your gateway instance meets the [Storage Gateway requirements](https://docs.aws.amazon.com/storagegateway/latest/userguide/Requirements.html).
 *
 * ## Example Usage
 * ### Local Cache
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testVolumeAttachment = new aws.ec2.VolumeAttachment("testVolumeAttachment", {
 *     deviceName: "/dev/xvdb",
 *     volumeId: aws_ebs_volume.test.id,
 *     instanceId: aws_instance.test.id,
 * });
 * const testLocalDisk = testVolumeAttachment.deviceName.apply(deviceName => aws.storagegateway.getLocalDiskOutput({
 *     diskNode: deviceName,
 *     gatewayArn: aws_storagegateway_gateway.test.arn,
 * }));
 * const testCache = new aws.storagegateway.Cache("testCache", {
 *     diskId: testLocalDisk.apply(testLocalDisk => testLocalDisk.diskId),
 *     gatewayArn: aws_storagegateway_gateway.test.arn,
 * });
 * ```
 * ### FSx File Gateway
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.storagegateway.Gateway("example", {
 *     gatewayIpAddress: "1.2.3.4",
 *     gatewayName: "example",
 *     gatewayTimezone: "GMT",
 *     gatewayType: "FILE_FSX_SMB",
 *     smbActiveDirectorySettings: {
 *         domainName: "corp.example.com",
 *         password: "avoid-plaintext-passwords",
 *         username: "Admin",
 *     },
 * });
 * ```
 * ### S3 File Gateway
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.storagegateway.Gateway("example", {
 *     gatewayIpAddress: "1.2.3.4",
 *     gatewayName: "example",
 *     gatewayTimezone: "GMT",
 *     gatewayType: "FILE_S3",
 * });
 * ```
 * ### Tape Gateway
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.storagegateway.Gateway("example", {
 *     gatewayIpAddress: "1.2.3.4",
 *     gatewayName: "example",
 *     gatewayTimezone: "GMT",
 *     gatewayType: "VTL",
 *     mediumChangerType: "AWS-Gateway-VTL",
 *     tapeDriveType: "IBM-ULT3580-TD5",
 * });
 * ```
 * ### Volume Gateway (Cached)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.storagegateway.Gateway("example", {
 *     gatewayIpAddress: "1.2.3.4",
 *     gatewayName: "example",
 *     gatewayTimezone: "GMT",
 *     gatewayType: "CACHED",
 * });
 * ```
 * ### Volume Gateway (Stored)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.storagegateway.Gateway("example", {
 *     gatewayIpAddress: "1.2.3.4",
 *     gatewayName: "example",
 *     gatewayTimezone: "GMT",
 *     gatewayType: "STORED",
 * });
 * ```
 *
 * ## Import
 *
 * `aws_storagegateway_gateway` can be imported by using the gateway Amazon Resource Name (ARN), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:storagegateway/gateway:Gateway example arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678
 * ```
 *
 *  Certain resource arguments, like `gateway_ip_address` do not have a Storage Gateway API method for reading the information after creation, either omit the argument from the provider configuration or use `ignoreChanges` to hide the difference.
 */
class Gateway extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["activationKey"] = state ? state.activationKey : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["averageDownloadRateLimitInBitsPerSec"] = state ? state.averageDownloadRateLimitInBitsPerSec : undefined;
            resourceInputs["averageUploadRateLimitInBitsPerSec"] = state ? state.averageUploadRateLimitInBitsPerSec : undefined;
            resourceInputs["cloudwatchLogGroupArn"] = state ? state.cloudwatchLogGroupArn : undefined;
            resourceInputs["ec2InstanceId"] = state ? state.ec2InstanceId : undefined;
            resourceInputs["endpointType"] = state ? state.endpointType : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["gatewayIpAddress"] = state ? state.gatewayIpAddress : undefined;
            resourceInputs["gatewayName"] = state ? state.gatewayName : undefined;
            resourceInputs["gatewayNetworkInterfaces"] = state ? state.gatewayNetworkInterfaces : undefined;
            resourceInputs["gatewayTimezone"] = state ? state.gatewayTimezone : undefined;
            resourceInputs["gatewayType"] = state ? state.gatewayType : undefined;
            resourceInputs["gatewayVpcEndpoint"] = state ? state.gatewayVpcEndpoint : undefined;
            resourceInputs["hostEnvironment"] = state ? state.hostEnvironment : undefined;
            resourceInputs["maintenanceStartTime"] = state ? state.maintenanceStartTime : undefined;
            resourceInputs["mediumChangerType"] = state ? state.mediumChangerType : undefined;
            resourceInputs["smbActiveDirectorySettings"] = state ? state.smbActiveDirectorySettings : undefined;
            resourceInputs["smbFileShareVisibility"] = state ? state.smbFileShareVisibility : undefined;
            resourceInputs["smbGuestPassword"] = state ? state.smbGuestPassword : undefined;
            resourceInputs["smbSecurityStrategy"] = state ? state.smbSecurityStrategy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tapeDriveType"] = state ? state.tapeDriveType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.gatewayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayName'");
            }
            if ((!args || args.gatewayTimezone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayTimezone'");
            }
            resourceInputs["activationKey"] = args ? args.activationKey : undefined;
            resourceInputs["averageDownloadRateLimitInBitsPerSec"] = args ? args.averageDownloadRateLimitInBitsPerSec : undefined;
            resourceInputs["averageUploadRateLimitInBitsPerSec"] = args ? args.averageUploadRateLimitInBitsPerSec : undefined;
            resourceInputs["cloudwatchLogGroupArn"] = args ? args.cloudwatchLogGroupArn : undefined;
            resourceInputs["gatewayIpAddress"] = args ? args.gatewayIpAddress : undefined;
            resourceInputs["gatewayName"] = args ? args.gatewayName : undefined;
            resourceInputs["gatewayTimezone"] = args ? args.gatewayTimezone : undefined;
            resourceInputs["gatewayType"] = args ? args.gatewayType : undefined;
            resourceInputs["gatewayVpcEndpoint"] = args ? args.gatewayVpcEndpoint : undefined;
            resourceInputs["maintenanceStartTime"] = args ? args.maintenanceStartTime : undefined;
            resourceInputs["mediumChangerType"] = args ? args.mediumChangerType : undefined;
            resourceInputs["smbActiveDirectorySettings"] = args ? args.smbActiveDirectorySettings : undefined;
            resourceInputs["smbFileShareVisibility"] = args ? args.smbFileShareVisibility : undefined;
            resourceInputs["smbGuestPassword"] = args ? args.smbGuestPassword : undefined;
            resourceInputs["smbSecurityStrategy"] = args ? args.smbSecurityStrategy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tapeDriveType"] = args ? args.tapeDriveType : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ec2InstanceId"] = undefined /*out*/;
            resourceInputs["endpointType"] = undefined /*out*/;
            resourceInputs["gatewayId"] = undefined /*out*/;
            resourceInputs["gatewayNetworkInterfaces"] = undefined /*out*/;
            resourceInputs["hostEnvironment"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gateway.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Gateway(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }
}
exports.Gateway = Gateway;
/** @internal */
Gateway.__pulumiType = 'aws:storagegateway/gateway:Gateway';
//# sourceMappingURL=gateway.js.map