"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkingStorage = exports.UploadBuffer = exports.TapePool = exports.StoredIscsiVolume = exports.SmbFileShare = exports.NfsFileShare = exports.getLocalDiskOutput = exports.getLocalDisk = exports.Gateway = exports.FileSystemAssociation = exports.CachesIscsiVolume = exports.Cache = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Cache = null;
exports.CachesIscsiVolume = null;
exports.FileSystemAssociation = null;
exports.Gateway = null;
exports.getLocalDisk = null;
exports.getLocalDiskOutput = null;
exports.NfsFileShare = null;
exports.SmbFileShare = null;
exports.StoredIscsiVolume = null;
exports.TapePool = null;
exports.UploadBuffer = null;
exports.WorkingStorage = null;
utilities.lazyLoad(exports, ["Cache"], () => require("./cache"));
utilities.lazyLoad(exports, ["CachesIscsiVolume"], () => require("./cachesIscsiVolume"));
utilities.lazyLoad(exports, ["FileSystemAssociation"], () => require("./fileSystemAssociation"));
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));
utilities.lazyLoad(exports, ["getLocalDisk", "getLocalDiskOutput"], () => require("./getLocalDisk"));
utilities.lazyLoad(exports, ["NfsFileShare"], () => require("./nfsFileShare"));
utilities.lazyLoad(exports, ["SmbFileShare"], () => require("./smbFileShare"));
utilities.lazyLoad(exports, ["StoredIscsiVolume"], () => require("./storedIscsiVolume"));
utilities.lazyLoad(exports, ["TapePool"], () => require("./tapePool"));
utilities.lazyLoad(exports, ["UploadBuffer"], () => require("./uploadBuffer"));
utilities.lazyLoad(exports, ["WorkingStorage"], () => require("./workingStorage"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:storagegateway/cache:Cache":
                return new exports.Cache(name, undefined, { urn });
            case "aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume":
                return new exports.CachesIscsiVolume(name, undefined, { urn });
            case "aws:storagegateway/fileSystemAssociation:FileSystemAssociation":
                return new exports.FileSystemAssociation(name, undefined, { urn });
            case "aws:storagegateway/gateway:Gateway":
                return new exports.Gateway(name, undefined, { urn });
            case "aws:storagegateway/nfsFileShare:NfsFileShare":
                return new exports.NfsFileShare(name, undefined, { urn });
            case "aws:storagegateway/smbFileShare:SmbFileShare":
                return new exports.SmbFileShare(name, undefined, { urn });
            case "aws:storagegateway/storedIscsiVolume:StoredIscsiVolume":
                return new exports.StoredIscsiVolume(name, undefined, { urn });
            case "aws:storagegateway/tapePool:TapePool":
                return new exports.TapePool(name, undefined, { urn });
            case "aws:storagegateway/uploadBuffer:UploadBuffer":
                return new exports.UploadBuffer(name, undefined, { urn });
            case "aws:storagegateway/workingStorage:WorkingStorage":
                return new exports.WorkingStorage(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "storagegateway/cache", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/cachesIscsiVolume", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/fileSystemAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/gateway", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/nfsFileShare", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/smbFileShare", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/storedIscsiVolume", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/tapePool", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/uploadBuffer", _module);
pulumi.runtime.registerResourceModule("aws", "storagegateway/workingStorage", _module);
//# sourceMappingURL=index.js.map