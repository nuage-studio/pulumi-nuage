"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadBuffer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an AWS Storage Gateway upload buffer.
 *
 * > **NOTE:** The Storage Gateway API provides no method to remove an upload buffer disk. Destroying this resource does not perform any Storage Gateway actions.
 *
 * ## Example Usage
 * ### Cached and VTL Gateway Type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testLocalDisk = aws.storagegateway.getLocalDisk({
 *     diskNode: aws_volume_attachment.test.device_name,
 *     gatewayArn: aws_storagegateway_gateway.test.arn,
 * });
 * const testUploadBuffer = new aws.storagegateway.UploadBuffer("testUploadBuffer", {
 *     diskPath: testLocalDisk.then(testLocalDisk => testLocalDisk.diskPath),
 *     gatewayArn: aws_storagegateway_gateway.test.arn,
 * });
 * ```
 * ### Stored Gateway Type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = aws.storagegateway.getLocalDisk({
 *     diskNode: aws_volume_attachment.test.device_name,
 *     gatewayArn: aws_storagegateway_gateway.test.arn,
 * });
 * const example = new aws.storagegateway.UploadBuffer("example", {
 *     diskId: data.aws_storagegateway_local_disk.example.id,
 *     gatewayArn: aws_storagegateway_gateway.example.arn,
 * });
 * ```
 *
 * ## Import
 *
 * `aws_storagegateway_upload_buffer` can be imported by using the gateway Amazon Resource Name (ARN) and local disk identifier separated with a colon (`:`), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:storagegateway/uploadBuffer:UploadBuffer example arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678:pci-0000:03:00.0-scsi-0:0:0:0
 * ```
 */
class UploadBuffer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["diskId"] = state ? state.diskId : undefined;
            resourceInputs["diskPath"] = state ? state.diskPath : undefined;
            resourceInputs["gatewayArn"] = state ? state.gatewayArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.gatewayArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayArn'");
            }
            resourceInputs["diskId"] = args ? args.diskId : undefined;
            resourceInputs["diskPath"] = args ? args.diskPath : undefined;
            resourceInputs["gatewayArn"] = args ? args.gatewayArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UploadBuffer.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing UploadBuffer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UploadBuffer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UploadBuffer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UploadBuffer.__pulumiType;
    }
}
exports.UploadBuffer = UploadBuffer;
/** @internal */
UploadBuffer.__pulumiType = 'aws:storagegateway/uploadBuffer:UploadBuffer';
//# sourceMappingURL=uploadBuffer.js.map