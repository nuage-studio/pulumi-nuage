import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides an Amazon Lex Slot Type resource. For more information see
 * [Amazon Lex: How It Works](https://docs.aws.amazon.com/lex/latest/dg/how-it-works.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const flowerTypes = new aws.lex.SlotType("flower_types", {
 *     createVersion: true,
 *     description: "Types of flowers to order",
 *     enumerationValues: [
 *         {
 *             synonyms: [
 *                 "Lirium",
 *                 "Martagon",
 *             ],
 *             value: "lilies",
 *         },
 *         {
 *             synonyms: [
 *                 "Eduardoregelia",
 *                 "Podonix",
 *             ],
 *             value: "tulips",
 *         },
 *     ],
 *     name: "FlowerTypes",
 *     valueSelectionStrategy: "ORIGINAL_VALUE",
 * });
 * ```
 *
 * ## Import
 *
 * Slot types can be imported using their name.
 *
 * ```sh
 *  $ pulumi import aws:lex/slotType:SlotType flower_types FlowerTypes
 * ```
 */
export declare class SlotType extends pulumi.CustomResource {
    /**
     * Get an existing SlotType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlotTypeState, opts?: pulumi.CustomResourceOptions): SlotType;
    /**
     * Returns true if the given object is an instance of SlotType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SlotType;
    /**
     * Checksum identifying the version of the slot type that was created. The checksum is
     * not included as an argument because the resource will add it automatically when updating the slot type.
     */
    readonly checksum: pulumi.Output<string>;
    /**
     * Determines if a new slot type version is created when the initial resource is created and on each
     * update. Defaults to `false`.
     */
    readonly createVersion: pulumi.Output<boolean | undefined>;
    /**
     * The date when the slot type version was created.
     */
    readonly createdDate: pulumi.Output<string>;
    /**
     * A description of the slot type. Must be less than or equal to 200 characters in length.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * A list of EnumerationValue objects that defines the values that
     * the slot type can take. Each value can have a list of synonyms, which are additional values that help
     * train the machine learning model about the values that it resolves for a slot. Attributes are
     * documented under enumeration_value.
     */
    readonly enumerationValues: pulumi.Output<outputs.lex.SlotTypeEnumerationValue[]>;
    /**
     * The date when the `$LATEST` version of this slot type was updated.
     */
    readonly lastUpdatedDate: pulumi.Output<string>;
    /**
     * The name of the slot type. The name is not case sensitive. Must be less than or equal to 100 characters in length.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Determines the slot resolution strategy that Amazon Lex
     * uses to return slot type values. `ORIGINAL_VALUE` returns the value entered by the user if the user
     * value is similar to the slot value. `TOP_RESOLUTION` returns the first value in the resolution list
     * if there is a resolution list for the slot, otherwise null is returned. Defaults to `ORIGINAL_VALUE`.
     */
    readonly valueSelectionStrategy: pulumi.Output<string | undefined>;
    /**
     * The version of the slot type.
     */
    readonly version: pulumi.Output<string>;
    /**
     * Create a SlotType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SlotTypeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering SlotType resources.
 */
export interface SlotTypeState {
    /**
     * Checksum identifying the version of the slot type that was created. The checksum is
     * not included as an argument because the resource will add it automatically when updating the slot type.
     */
    checksum?: pulumi.Input<string>;
    /**
     * Determines if a new slot type version is created when the initial resource is created and on each
     * update. Defaults to `false`.
     */
    createVersion?: pulumi.Input<boolean>;
    /**
     * The date when the slot type version was created.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * A description of the slot type. Must be less than or equal to 200 characters in length.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of EnumerationValue objects that defines the values that
     * the slot type can take. Each value can have a list of synonyms, which are additional values that help
     * train the machine learning model about the values that it resolves for a slot. Attributes are
     * documented under enumeration_value.
     */
    enumerationValues?: pulumi.Input<pulumi.Input<inputs.lex.SlotTypeEnumerationValue>[]>;
    /**
     * The date when the `$LATEST` version of this slot type was updated.
     */
    lastUpdatedDate?: pulumi.Input<string>;
    /**
     * The name of the slot type. The name is not case sensitive. Must be less than or equal to 100 characters in length.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines the slot resolution strategy that Amazon Lex
     * uses to return slot type values. `ORIGINAL_VALUE` returns the value entered by the user if the user
     * value is similar to the slot value. `TOP_RESOLUTION` returns the first value in the resolution list
     * if there is a resolution list for the slot, otherwise null is returned. Defaults to `ORIGINAL_VALUE`.
     */
    valueSelectionStrategy?: pulumi.Input<string>;
    /**
     * The version of the slot type.
     */
    version?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a SlotType resource.
 */
export interface SlotTypeArgs {
    /**
     * Determines if a new slot type version is created when the initial resource is created and on each
     * update. Defaults to `false`.
     */
    createVersion?: pulumi.Input<boolean>;
    /**
     * A description of the slot type. Must be less than or equal to 200 characters in length.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of EnumerationValue objects that defines the values that
     * the slot type can take. Each value can have a list of synonyms, which are additional values that help
     * train the machine learning model about the values that it resolves for a slot. Attributes are
     * documented under enumeration_value.
     */
    enumerationValues: pulumi.Input<pulumi.Input<inputs.lex.SlotTypeEnumerationValue>[]>;
    /**
     * The name of the slot type. The name is not case sensitive. Must be less than or equal to 100 characters in length.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines the slot resolution strategy that Amazon Lex
     * uses to return slot type values. `ORIGINAL_VALUE` returns the value entered by the user if the user
     * value is similar to the slot value. `TOP_RESOLUTION` returns the first value in the resolution list
     * if there is a resolution list for the slot, otherwise null is returned. Defaults to `ORIGINAL_VALUE`.
     */
    valueSelectionStrategy?: pulumi.Input<string>;
}
