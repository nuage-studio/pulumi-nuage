"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workgroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a new Amazon Redshift Serverless Workgroup.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.redshiftserverless.Workgroup("example", {
 *     namespaceName: "concurrency-scaling",
 *     workgroupName: "concurrency-scaling",
 * });
 * ```
 *
 * ## Import
 *
 * Redshift Serverless Workgroups can be imported using the `workgroup_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:redshiftserverless/workgroup:Workgroup example example
 * ```
 */
class Workgroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["baseCapacity"] = state ? state.baseCapacity : undefined;
            resourceInputs["configParameters"] = state ? state.configParameters : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["enhancedVpcRouting"] = state ? state.enhancedVpcRouting : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["workgroupId"] = state ? state.workgroupId : undefined;
            resourceInputs["workgroupName"] = state ? state.workgroupName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.namespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if ((!args || args.workgroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workgroupName'");
            }
            resourceInputs["baseCapacity"] = args ? args.baseCapacity : undefined;
            resourceInputs["configParameters"] = args ? args.configParameters : undefined;
            resourceInputs["enhancedVpcRouting"] = args ? args.enhancedVpcRouting : undefined;
            resourceInputs["namespaceName"] = args ? args.namespaceName : undefined;
            resourceInputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workgroupName"] = args ? args.workgroupName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["workgroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workgroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Workgroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Workgroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Workgroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workgroup.__pulumiType;
    }
}
exports.Workgroup = Workgroup;
/** @internal */
Workgroup.__pulumiType = 'aws:redshiftserverless/workgroup:Workgroup';
//# sourceMappingURL=workgroup.js.map