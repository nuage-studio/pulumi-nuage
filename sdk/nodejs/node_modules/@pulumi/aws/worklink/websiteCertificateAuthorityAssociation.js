"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsiteCertificateAuthorityAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const example = new aws.worklink.Fleet("example", {});
 * const test = new aws.worklink.WebsiteCertificateAuthorityAssociation("test", {
 *     fleetArn: aws_worklink_fleet.test.arn,
 *     certificate: fs.readFileSync("certificate.pem"),
 * });
 * ```
 *
 * ## Import
 *
 * WorkLink Website Certificate Authority can be imported using `FLEET-ARN,WEBSITE-CA-ID`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation example arn:aws:worklink::123456789012:fleet/example,abcdefghijk
 * ```
 */
class WebsiteCertificateAuthorityAssociation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["fleetArn"] = state ? state.fleetArn : undefined;
            resourceInputs["websiteCaId"] = state ? state.websiteCaId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if ((!args || args.fleetArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fleetArn'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["fleetArn"] = args ? args.fleetArn : undefined;
            resourceInputs["websiteCaId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebsiteCertificateAuthorityAssociation.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing WebsiteCertificateAuthorityAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WebsiteCertificateAuthorityAssociation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WebsiteCertificateAuthorityAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebsiteCertificateAuthorityAssociation.__pulumiType;
    }
}
exports.WebsiteCertificateAuthorityAssociation = WebsiteCertificateAuthorityAssociation;
/** @internal */
WebsiteCertificateAuthorityAssociation.__pulumiType = 'aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation';
//# sourceMappingURL=websiteCertificateAuthorityAssociation.js.map