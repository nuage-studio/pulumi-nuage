"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQLApi = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AppSync GraphQL API.
 *
 * ## Example Usage
 * ### API Key Authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.GraphQLApi("example", {
 *     authenticationType: "API_KEY",
 * });
 * ```
 * ### AWS IAM Authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.GraphQLApi("example", {
 *     authenticationType: "AWS_IAM",
 * });
 * ```
 * ### AWS Cognito User Pool Authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.GraphQLApi("example", {
 *     authenticationType: "AMAZON_COGNITO_USER_POOLS",
 *     userPoolConfig: {
 *         awsRegion: data.aws_region.current.name,
 *         defaultAction: "DENY",
 *         userPoolId: aws_cognito_user_pool.example.id,
 *     },
 * });
 * ```
 * ### OpenID Connect Authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.GraphQLApi("example", {
 *     authenticationType: "OPENID_CONNECT",
 *     openidConnectConfig: {
 *         issuer: "https://example.com",
 *     },
 * });
 * ```
 * ### AWS Lambda Authorizer Authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.GraphQLApi("example", {
 *     authenticationType: "AWS_LAMBDA",
 *     lambdaAuthorizerConfig: {
 *         authorizerUri: "arn:aws:lambda:us-east-1:123456789012:function:custom_lambda_authorizer",
 *     },
 * });
 * const appsyncLambdaAuthorizer = new aws.lambda.Permission("appsyncLambdaAuthorizer", {
 *     action: "lambda:InvokeFunction",
 *     "function": "custom_lambda_authorizer",
 *     principal: "appsync.amazonaws.com",
 *     sourceArn: example.arn,
 * });
 * ```
 * ### With Multiple Authentication Providers
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.GraphQLApi("example", {
 *     additionalAuthenticationProviders: [{
 *         authenticationType: "AWS_IAM",
 *     }],
 *     authenticationType: "API_KEY",
 * });
 * ```
 * ### With Schema
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.GraphQLApi("example", {
 *     authenticationType: "AWS_IAM",
 *     schema: `schema {
 * 	query: Query
 * }
 * type Query {
 *   test: Int
 * }
 * `,
 * });
 * ```
 * ### Enabling Logging
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleRole = new aws.iam.Role("exampleRole", {assumeRolePolicy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [
 *         {
 *         "Effect": "Allow",
 *         "Principal": {
 *             "Service": "appsync.amazonaws.com"
 *         },
 *         "Action": "sts:AssumeRole"
 *         }
 *     ]
 * }
 * `});
 * const exampleRolePolicyAttachment = new aws.iam.RolePolicyAttachment("exampleRolePolicyAttachment", {
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs",
 *     role: exampleRole.name,
 * });
 * // ... other configuration ...
 * const exampleGraphQLApi = new aws.appsync.GraphQLApi("exampleGraphQLApi", {logConfig: {
 *     cloudwatchLogsRoleArn: exampleRole.arn,
 *     fieldLogLevel: "ERROR",
 * }});
 * ```
 *
 * ## Import
 *
 * AppSync GraphQL API can be imported using the GraphQL API ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:appsync/graphQLApi:GraphQLApi example 0123456789
 * ```
 */
class GraphQLApi extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["additionalAuthenticationProviders"] = state ? state.additionalAuthenticationProviders : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["lambdaAuthorizerConfig"] = state ? state.lambdaAuthorizerConfig : undefined;
            resourceInputs["logConfig"] = state ? state.logConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openidConnectConfig"] = state ? state.openidConnectConfig : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["uris"] = state ? state.uris : undefined;
            resourceInputs["userPoolConfig"] = state ? state.userPoolConfig : undefined;
            resourceInputs["xrayEnabled"] = state ? state.xrayEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.authenticationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationType'");
            }
            resourceInputs["additionalAuthenticationProviders"] = args ? args.additionalAuthenticationProviders : undefined;
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["lambdaAuthorizerConfig"] = args ? args.lambdaAuthorizerConfig : undefined;
            resourceInputs["logConfig"] = args ? args.logConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openidConnectConfig"] = args ? args.openidConnectConfig : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userPoolConfig"] = args ? args.userPoolConfig : undefined;
            resourceInputs["xrayEnabled"] = args ? args.xrayEnabled : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["uris"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GraphQLApi.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing GraphQLApi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GraphQLApi(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GraphQLApi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GraphQLApi.__pulumiType;
    }
}
exports.GraphQLApi = GraphQLApi;
/** @internal */
GraphQLApi.__pulumiType = 'aws:appsync/graphQLApi:GraphQLApi';
//# sourceMappingURL=graphQLApi.js.map