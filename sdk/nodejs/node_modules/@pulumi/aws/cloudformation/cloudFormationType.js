"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFormationType = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudformation.CloudFormationType("example", {
 *     schemaHandlerPackage: `s3://${aws_s3_object.example.bucket}/${aws_s3_object.example.key}`,
 *     type: "RESOURCE",
 *     typeName: "ExampleCompany::ExampleService::ExampleResource",
 *     loggingConfig: {
 *         logGroupName: aws_cloudwatch_log_group.example.name,
 *         logRoleArn: aws_iam_role.example.arn,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * `aws_cloudformation_type` can be imported with their type version Amazon Resource Name (ARN), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cloudformation/cloudFormationType:CloudFormationType example arn:aws:cloudformation:us-east-1:123456789012:type/resource/ExampleCompany-ExampleService-ExampleType/1
 * ```
 */
class CloudFormationType extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["defaultVersionId"] = state ? state.defaultVersionId : undefined;
            resourceInputs["deprecatedStatus"] = state ? state.deprecatedStatus : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["documentationUrl"] = state ? state.documentationUrl : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["isDefaultVersion"] = state ? state.isDefaultVersion : undefined;
            resourceInputs["loggingConfig"] = state ? state.loggingConfig : undefined;
            resourceInputs["provisioningType"] = state ? state.provisioningType : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["schemaHandlerPackage"] = state ? state.schemaHandlerPackage : undefined;
            resourceInputs["sourceUrl"] = state ? state.sourceUrl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["typeArn"] = state ? state.typeArn : undefined;
            resourceInputs["typeName"] = state ? state.typeName : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.schemaHandlerPackage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaHandlerPackage'");
            }
            if ((!args || args.typeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeName'");
            }
            resourceInputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            resourceInputs["loggingConfig"] = args ? args.loggingConfig : undefined;
            resourceInputs["schemaHandlerPackage"] = args ? args.schemaHandlerPackage : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["typeName"] = args ? args.typeName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["defaultVersionId"] = undefined /*out*/;
            resourceInputs["deprecatedStatus"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["documentationUrl"] = undefined /*out*/;
            resourceInputs["isDefaultVersion"] = undefined /*out*/;
            resourceInputs["provisioningType"] = undefined /*out*/;
            resourceInputs["schema"] = undefined /*out*/;
            resourceInputs["sourceUrl"] = undefined /*out*/;
            resourceInputs["typeArn"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudFormationType.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CloudFormationType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CloudFormationType(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CloudFormationType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudFormationType.__pulumiType;
    }
}
exports.CloudFormationType = CloudFormationType;
/** @internal */
CloudFormationType.__pulumiType = 'aws:cloudformation/cloudFormationType:CloudFormationType';
//# sourceMappingURL=cloudFormationType.js.map