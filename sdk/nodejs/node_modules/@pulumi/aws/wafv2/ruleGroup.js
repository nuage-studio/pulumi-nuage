"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a WAFv2 Rule Group resource.
 *
 * ## Example Usage
 * ### Simple
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.wafv2.RuleGroup("example", {
 *     capacity: 2,
 *     rules: [{
 *         action: {
 *             allow: {},
 *         },
 *         name: "rule-1",
 *         priority: 1,
 *         statement: {
 *             geoMatchStatement: {
 *                 countryCodes: [
 *                     "US",
 *                     "NL",
 *                 ],
 *             },
 *         },
 *         visibilityConfig: {
 *             cloudwatchMetricsEnabled: false,
 *             metricName: "friendly-rule-metric-name",
 *             sampledRequestsEnabled: false,
 *         },
 *     }],
 *     scope: "REGIONAL",
 *     visibilityConfig: {
 *         cloudwatchMetricsEnabled: false,
 *         metricName: "friendly-metric-name",
 *         sampledRequestsEnabled: false,
 *     },
 * });
 * ```
 * ### Complex
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testIpSet = new aws.wafv2.IpSet("testIpSet", {
 *     scope: "REGIONAL",
 *     ipAddressVersion: "IPV4",
 *     addresses: [
 *         "1.1.1.1/32",
 *         "2.2.2.2/32",
 *     ],
 * });
 * const testRegexPatternSet = new aws.wafv2.RegexPatternSet("testRegexPatternSet", {
 *     scope: "REGIONAL",
 *     regularExpressions: [{
 *         regexString: "one",
 *     }],
 * });
 * const example = new aws.wafv2.RuleGroup("example", {
 *     description: "An rule group containing all statements",
 *     scope: "REGIONAL",
 *     capacity: 500,
 *     rules: [
 *         {
 *             name: "rule-1",
 *             priority: 1,
 *             action: {
 *                 block: {},
 *             },
 *             statement: {
 *                 notStatement: {
 *                     statements: [{
 *                         andStatement: {
 *                             statements: [
 *                                 {
 *                                     geoMatchStatement: {
 *                                         countryCodes: ["US"],
 *                                     },
 *                                 },
 *                                 {
 *                                     byteMatchStatement: {
 *                                         positionalConstraint: "CONTAINS",
 *                                         searchString: "word",
 *                                         fieldToMatch: {
 *                                             allQueryArguments: {},
 *                                         },
 *                                         textTransformations: [
 *                                             {
 *                                                 priority: 5,
 *                                                 type: "CMD_LINE",
 *                                             },
 *                                             {
 *                                                 priority: 2,
 *                                                 type: "LOWERCASE",
 *                                             },
 *                                         ],
 *                                     },
 *                                 },
 *                             ],
 *                         },
 *                     }],
 *                 },
 *             },
 *             visibilityConfig: {
 *                 cloudwatchMetricsEnabled: false,
 *                 metricName: "rule-1",
 *                 sampledRequestsEnabled: false,
 *             },
 *         },
 *         {
 *             name: "rule-2",
 *             priority: 2,
 *             action: {
 *                 count: {},
 *             },
 *             statement: {
 *                 orStatement: {
 *                     statements: [
 *                         {
 *                             sqliMatchStatement: {
 *                                 fieldToMatch: {
 *                                     body: {},
 *                                 },
 *                                 textTransformations: [
 *                                     {
 *                                         priority: 5,
 *                                         type: "URL_DECODE",
 *                                     },
 *                                     {
 *                                         priority: 4,
 *                                         type: "HTML_ENTITY_DECODE",
 *                                     },
 *                                     {
 *                                         priority: 3,
 *                                         type: "COMPRESS_WHITE_SPACE",
 *                                     },
 *                                 ],
 *                             },
 *                         },
 *                         {
 *                             xssMatchStatement: {
 *                                 fieldToMatch: {
 *                                     method: {},
 *                                 },
 *                                 textTransformations: [{
 *                                     priority: 2,
 *                                     type: "NONE",
 *                                 }],
 *                             },
 *                         },
 *                     ],
 *                 },
 *             },
 *             visibilityConfig: {
 *                 cloudwatchMetricsEnabled: false,
 *                 metricName: "rule-2",
 *                 sampledRequestsEnabled: false,
 *             },
 *         },
 *         {
 *             name: "rule-3",
 *             priority: 3,
 *             action: {
 *                 block: {},
 *             },
 *             statement: {
 *                 sizeConstraintStatement: {
 *                     comparisonOperator: "GT",
 *                     size: 100,
 *                     fieldToMatch: {
 *                         singleQueryArgument: {
 *                             name: "username",
 *                         },
 *                     },
 *                     textTransformations: [{
 *                         priority: 5,
 *                         type: "NONE",
 *                     }],
 *                 },
 *             },
 *             visibilityConfig: {
 *                 cloudwatchMetricsEnabled: false,
 *                 metricName: "rule-3",
 *                 sampledRequestsEnabled: false,
 *             },
 *         },
 *         {
 *             name: "rule-4",
 *             priority: 4,
 *             action: {
 *                 block: {},
 *             },
 *             statement: {
 *                 orStatement: {
 *                     statements: [
 *                         {
 *                             ipSetReferenceStatement: {
 *                                 arn: testIpSet.arn,
 *                             },
 *                         },
 *                         {
 *                             regexPatternSetReferenceStatement: {
 *                                 arn: testRegexPatternSet.arn,
 *                                 fieldToMatch: {
 *                                     singleHeader: {
 *                                         name: "referer",
 *                                     },
 *                                 },
 *                                 textTransformations: [{
 *                                     priority: 2,
 *                                     type: "NONE",
 *                                 }],
 *                             },
 *                         },
 *                     ],
 *                 },
 *             },
 *             visibilityConfig: {
 *                 cloudwatchMetricsEnabled: false,
 *                 metricName: "rule-4",
 *                 sampledRequestsEnabled: false,
 *             },
 *         },
 *     ],
 *     visibilityConfig: {
 *         cloudwatchMetricsEnabled: false,
 *         metricName: "friendly-metric-name",
 *         sampledRequestsEnabled: false,
 *     },
 *     tags: {
 *         Name: "example-and-statement",
 *         Code: "123456",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * WAFv2 Rule Group can be imported using `ID/name/scope` e.g.,
 *
 * ```sh
 *  $ pulumi import aws:wafv2/ruleGroup:RuleGroup example a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc/example/REGIONAL
 * ```
 */
class RuleGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["customResponseBodies"] = state ? state.customResponseBodies : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lockToken"] = state ? state.lockToken : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["visibilityConfig"] = state ? state.visibilityConfig : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.visibilityConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'visibilityConfig'");
            }
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["customResponseBodies"] = args ? args.customResponseBodies : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["visibilityConfig"] = args ? args.visibilityConfig : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["lockToken"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleGroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing RuleGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RuleGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RuleGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleGroup.__pulumiType;
    }
}
exports.RuleGroup = RuleGroup;
/** @internal */
RuleGroup.__pulumiType = 'aws:wafv2/ruleGroup:RuleGroup';
//# sourceMappingURL=ruleGroup.js.map