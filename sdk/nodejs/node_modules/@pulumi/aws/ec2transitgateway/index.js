"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcAttachmentAccepter = exports.VpcAttachment = exports.TransitGateway = exports.RouteTablePropagation = exports.RouteTableAssociation = exports.RouteTable = exports.Route = exports.PrefixListReference = exports.PolicyTableAssociation = exports.PolicyTable = exports.PeeringAttachmentAccepter = exports.PeeringAttachment = exports.MulticastGroupSource = exports.MulticastGroupMember = exports.MulticastDomainAssociation = exports.MulticastDomain = exports.getVpnAttachmentOutput = exports.getVpnAttachment = exports.getVpcAttachmentsOutput = exports.getVpcAttachments = exports.getVpcAttachmentOutput = exports.getVpcAttachment = exports.getTransitGatewayOutput = exports.getTransitGateway = exports.getRouteTableOutput = exports.getRouteTable = exports.getPeeringAttachmentOutput = exports.getPeeringAttachment = exports.getMulticastDomainOutput = exports.getMulticastDomain = exports.getDirectConnectGatewayAttachmentOutput = exports.getDirectConnectGatewayAttachment = exports.getConnectPeerOutput = exports.getConnectPeer = exports.getConnectOutput = exports.getConnect = exports.getAttachmentOutput = exports.getAttachment = exports.ConnectPeer = exports.Connect = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Connect = null;
exports.ConnectPeer = null;
exports.getAttachment = null;
exports.getAttachmentOutput = null;
exports.getConnect = null;
exports.getConnectOutput = null;
exports.getConnectPeer = null;
exports.getConnectPeerOutput = null;
exports.getDirectConnectGatewayAttachment = null;
exports.getDirectConnectGatewayAttachmentOutput = null;
exports.getMulticastDomain = null;
exports.getMulticastDomainOutput = null;
exports.getPeeringAttachment = null;
exports.getPeeringAttachmentOutput = null;
exports.getRouteTable = null;
exports.getRouteTableOutput = null;
exports.getTransitGateway = null;
exports.getTransitGatewayOutput = null;
exports.getVpcAttachment = null;
exports.getVpcAttachmentOutput = null;
exports.getVpcAttachments = null;
exports.getVpcAttachmentsOutput = null;
exports.getVpnAttachment = null;
exports.getVpnAttachmentOutput = null;
exports.MulticastDomain = null;
exports.MulticastDomainAssociation = null;
exports.MulticastGroupMember = null;
exports.MulticastGroupSource = null;
exports.PeeringAttachment = null;
exports.PeeringAttachmentAccepter = null;
exports.PolicyTable = null;
exports.PolicyTableAssociation = null;
exports.PrefixListReference = null;
exports.Route = null;
exports.RouteTable = null;
exports.RouteTableAssociation = null;
exports.RouteTablePropagation = null;
exports.TransitGateway = null;
exports.VpcAttachment = null;
exports.VpcAttachmentAccepter = null;
utilities.lazyLoad(exports, ["Connect"], () => require("./connect"));
utilities.lazyLoad(exports, ["ConnectPeer"], () => require("./connectPeer"));
utilities.lazyLoad(exports, ["getAttachment", "getAttachmentOutput"], () => require("./getAttachment"));
utilities.lazyLoad(exports, ["getConnect", "getConnectOutput"], () => require("./getConnect"));
utilities.lazyLoad(exports, ["getConnectPeer", "getConnectPeerOutput"], () => require("./getConnectPeer"));
utilities.lazyLoad(exports, ["getDirectConnectGatewayAttachment", "getDirectConnectGatewayAttachmentOutput"], () => require("./getDirectConnectGatewayAttachment"));
utilities.lazyLoad(exports, ["getMulticastDomain", "getMulticastDomainOutput"], () => require("./getMulticastDomain"));
utilities.lazyLoad(exports, ["getPeeringAttachment", "getPeeringAttachmentOutput"], () => require("./getPeeringAttachment"));
utilities.lazyLoad(exports, ["getRouteTable", "getRouteTableOutput"], () => require("./getRouteTable"));
utilities.lazyLoad(exports, ["getTransitGateway", "getTransitGatewayOutput"], () => require("./getTransitGateway"));
utilities.lazyLoad(exports, ["getVpcAttachment", "getVpcAttachmentOutput"], () => require("./getVpcAttachment"));
utilities.lazyLoad(exports, ["getVpcAttachments", "getVpcAttachmentsOutput"], () => require("./getVpcAttachments"));
utilities.lazyLoad(exports, ["getVpnAttachment", "getVpnAttachmentOutput"], () => require("./getVpnAttachment"));
utilities.lazyLoad(exports, ["MulticastDomain"], () => require("./multicastDomain"));
utilities.lazyLoad(exports, ["MulticastDomainAssociation"], () => require("./multicastDomainAssociation"));
utilities.lazyLoad(exports, ["MulticastGroupMember"], () => require("./multicastGroupMember"));
utilities.lazyLoad(exports, ["MulticastGroupSource"], () => require("./multicastGroupSource"));
utilities.lazyLoad(exports, ["PeeringAttachment"], () => require("./peeringAttachment"));
utilities.lazyLoad(exports, ["PeeringAttachmentAccepter"], () => require("./peeringAttachmentAccepter"));
utilities.lazyLoad(exports, ["PolicyTable"], () => require("./policyTable"));
utilities.lazyLoad(exports, ["PolicyTableAssociation"], () => require("./policyTableAssociation"));
utilities.lazyLoad(exports, ["PrefixListReference"], () => require("./prefixListReference"));
utilities.lazyLoad(exports, ["Route"], () => require("./route"));
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));
utilities.lazyLoad(exports, ["RouteTableAssociation"], () => require("./routeTableAssociation"));
utilities.lazyLoad(exports, ["RouteTablePropagation"], () => require("./routeTablePropagation"));
utilities.lazyLoad(exports, ["TransitGateway"], () => require("./transitGateway"));
utilities.lazyLoad(exports, ["VpcAttachment"], () => require("./vpcAttachment"));
utilities.lazyLoad(exports, ["VpcAttachmentAccepter"], () => require("./vpcAttachmentAccepter"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:ec2transitgateway/connect:Connect":
                return new exports.Connect(name, undefined, { urn });
            case "aws:ec2transitgateway/connectPeer:ConnectPeer":
                return new exports.ConnectPeer(name, undefined, { urn });
            case "aws:ec2transitgateway/multicastDomain:MulticastDomain":
                return new exports.MulticastDomain(name, undefined, { urn });
            case "aws:ec2transitgateway/multicastDomainAssociation:MulticastDomainAssociation":
                return new exports.MulticastDomainAssociation(name, undefined, { urn });
            case "aws:ec2transitgateway/multicastGroupMember:MulticastGroupMember":
                return new exports.MulticastGroupMember(name, undefined, { urn });
            case "aws:ec2transitgateway/multicastGroupSource:MulticastGroupSource":
                return new exports.MulticastGroupSource(name, undefined, { urn });
            case "aws:ec2transitgateway/peeringAttachment:PeeringAttachment":
                return new exports.PeeringAttachment(name, undefined, { urn });
            case "aws:ec2transitgateway/peeringAttachmentAccepter:PeeringAttachmentAccepter":
                return new exports.PeeringAttachmentAccepter(name, undefined, { urn });
            case "aws:ec2transitgateway/policyTable:PolicyTable":
                return new exports.PolicyTable(name, undefined, { urn });
            case "aws:ec2transitgateway/policyTableAssociation:PolicyTableAssociation":
                return new exports.PolicyTableAssociation(name, undefined, { urn });
            case "aws:ec2transitgateway/prefixListReference:PrefixListReference":
                return new exports.PrefixListReference(name, undefined, { urn });
            case "aws:ec2transitgateway/route:Route":
                return new exports.Route(name, undefined, { urn });
            case "aws:ec2transitgateway/routeTable:RouteTable":
                return new exports.RouteTable(name, undefined, { urn });
            case "aws:ec2transitgateway/routeTableAssociation:RouteTableAssociation":
                return new exports.RouteTableAssociation(name, undefined, { urn });
            case "aws:ec2transitgateway/routeTablePropagation:RouteTablePropagation":
                return new exports.RouteTablePropagation(name, undefined, { urn });
            case "aws:ec2transitgateway/transitGateway:TransitGateway":
                return new exports.TransitGateway(name, undefined, { urn });
            case "aws:ec2transitgateway/vpcAttachment:VpcAttachment":
                return new exports.VpcAttachment(name, undefined, { urn });
            case "aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter":
                return new exports.VpcAttachmentAccepter(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/connect", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/connectPeer", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/multicastDomain", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/multicastDomainAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/multicastGroupMember", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/multicastGroupSource", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/peeringAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/peeringAttachmentAccepter", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/policyTable", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/policyTableAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/prefixListReference", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/route", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/routeTable", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/routeTableAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/routeTablePropagation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/transitGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/vpcAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/vpcAttachmentAccepter", _module);
//# sourceMappingURL=index.js.map