"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MulticastDomain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an EC2 Transit Gateway Multicast Domain.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const available = aws.getAvailabilityZones({
 *     state: "available",
 * });
 * const amazonLinux = aws.ec2.getAmi({
 *     mostRecent: true,
 *     owners: ["amazon"],
 *     filters: [
 *         {
 *             name: "name",
 *             values: ["amzn-ami-hvm-*-x86_64-gp2"],
 *         },
 *         {
 *             name: "owner-alias",
 *             values: ["amazon"],
 *         },
 *     ],
 * });
 * const vpc1 = new aws.ec2.Vpc("vpc1", {cidrBlock: "10.0.0.0/16"});
 * const vpc2 = new aws.ec2.Vpc("vpc2", {cidrBlock: "10.1.0.0/16"});
 * const subnet1 = new aws.ec2.Subnet("subnet1", {
 *     vpcId: vpc1.id,
 *     cidrBlock: "10.0.1.0/24",
 *     availabilityZone: available.then(available => available.names?[0]),
 * });
 * const subnet2 = new aws.ec2.Subnet("subnet2", {
 *     vpcId: vpc1.id,
 *     cidrBlock: "10.0.2.0/24",
 *     availabilityZone: available.then(available => available.names?[1]),
 * });
 * const subnet3 = new aws.ec2.Subnet("subnet3", {
 *     vpcId: vpc2.id,
 *     cidrBlock: "10.1.1.0/24",
 *     availabilityZone: available.then(available => available.names?[0]),
 * });
 * const instance1 = new aws.ec2.Instance("instance1", {
 *     ami: amazonLinux.then(amazonLinux => amazonLinux.id),
 *     instanceType: "t2.micro",
 *     subnetId: subnet1.id,
 * });
 * const instance2 = new aws.ec2.Instance("instance2", {
 *     ami: amazonLinux.then(amazonLinux => amazonLinux.id),
 *     instanceType: "t2.micro",
 *     subnetId: subnet2.id,
 * });
 * const instance3 = new aws.ec2.Instance("instance3", {
 *     ami: amazonLinux.then(amazonLinux => amazonLinux.id),
 *     instanceType: "t2.micro",
 *     subnetId: subnet3.id,
 * });
 * const tgw = new aws.ec2transitgateway.TransitGateway("tgw", {multicastSupport: "enable"});
 * const attachment1 = new aws.ec2transitgateway.VpcAttachment("attachment1", {
 *     subnetIds: [
 *         subnet1.id,
 *         subnet2.id,
 *     ],
 *     transitGatewayId: tgw.id,
 *     vpcId: vpc1.id,
 * });
 * const attachment2 = new aws.ec2transitgateway.VpcAttachment("attachment2", {
 *     subnetIds: [subnet3.id],
 *     transitGatewayId: tgw.id,
 *     vpcId: vpc2.id,
 * });
 * const domain = new aws.ec2transitgateway.MulticastDomain("domain", {
 *     transitGatewayId: tgw.id,
 *     staticSourcesSupport: "enable",
 *     tags: {
 *         Name: "Transit_Gateway_Multicast_Domain_Example",
 *     },
 * });
 * const association3 = new aws.ec2transitgateway.MulticastDomainAssociation("association3", {
 *     subnetId: subnet3.id,
 *     transitGatewayAttachmentId: attachment2.id,
 *     transitGatewayMulticastDomainId: domain.id,
 * });
 * const source = new aws.ec2transitgateway.MulticastGroupSource("source", {
 *     groupIpAddress: "224.0.0.1",
 *     networkInterfaceId: instance3.primaryNetworkInterfaceId,
 *     transitGatewayMulticastDomainId: association3.transitGatewayMulticastDomainId,
 * });
 * const association1 = new aws.ec2transitgateway.MulticastDomainAssociation("association1", {
 *     subnetId: subnet1.id,
 *     transitGatewayAttachmentId: attachment1.id,
 *     transitGatewayMulticastDomainId: domain.id,
 * });
 * const association2 = new aws.ec2transitgateway.MulticastDomainAssociation("association2", {
 *     subnetId: subnet2.id,
 *     transitGatewayAttachmentId: attachment2.id,
 *     transitGatewayMulticastDomainId: domain.id,
 * });
 * const member1 = new aws.ec2transitgateway.MulticastGroupMember("member1", {
 *     groupIpAddress: "224.0.0.1",
 *     networkInterfaceId: instance1.primaryNetworkInterfaceId,
 *     transitGatewayMulticastDomainId: association1.transitGatewayMulticastDomainId,
 * });
 * const member2 = new aws.ec2transitgateway.MulticastGroupMember("member2", {
 *     groupIpAddress: "224.0.0.1",
 *     networkInterfaceId: instance2.primaryNetworkInterfaceId,
 *     transitGatewayMulticastDomainId: association1.transitGatewayMulticastDomainId,
 * });
 * ```
 *
 * ## Import
 *
 * `aws_ec2_transit_gateway_multicast_domain` can be imported by using the EC2 Transit Gateway Multicast Domain identifier, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2transitgateway/multicastDomain:MulticastDomain example tgw-mcast-domain-12345
 * ```
 */
class MulticastDomain extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoAcceptSharedAssociations"] = state ? state.autoAcceptSharedAssociations : undefined;
            resourceInputs["igmpv2Support"] = state ? state.igmpv2Support : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["staticSourcesSupport"] = state ? state.staticSourcesSupport : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["transitGatewayId"] = state ? state.transitGatewayId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.transitGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGatewayId'");
            }
            resourceInputs["autoAcceptSharedAssociations"] = args ? args.autoAcceptSharedAssociations : undefined;
            resourceInputs["igmpv2Support"] = args ? args.igmpv2Support : undefined;
            resourceInputs["staticSourcesSupport"] = args ? args.staticSourcesSupport : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transitGatewayId"] = args ? args.transitGatewayId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MulticastDomain.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing MulticastDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MulticastDomain(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MulticastDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MulticastDomain.__pulumiType;
    }
}
exports.MulticastDomain = MulticastDomain;
/** @internal */
MulticastDomain.__pulumiType = 'aws:ec2transitgateway/multicastDomain:MulticastDomain';
//# sourceMappingURL=multicastDomain.js.map