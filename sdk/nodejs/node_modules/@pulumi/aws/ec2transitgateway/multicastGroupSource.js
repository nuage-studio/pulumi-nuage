"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MulticastGroupSource = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Registers sources (network interfaces) with the transit gateway multicast group.
 * A multicast source is a network interface attached to a supported instance that sends multicast traffic.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2transitgateway.MulticastGroupSource("example", {
 *     groupIpAddress: "224.0.0.1",
 *     networkInterfaceId: aws_network_interface.example.id,
 *     transitGatewayMulticastDomainId: aws_ec2_transit_gateway_multicast_domain.example.id,
 * });
 * ```
 */
class MulticastGroupSource extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["groupIpAddress"] = state ? state.groupIpAddress : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["transitGatewayMulticastDomainId"] = state ? state.transitGatewayMulticastDomainId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.groupIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupIpAddress'");
            }
            if ((!args || args.networkInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            if ((!args || args.transitGatewayMulticastDomainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGatewayMulticastDomainId'");
            }
            resourceInputs["groupIpAddress"] = args ? args.groupIpAddress : undefined;
            resourceInputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            resourceInputs["transitGatewayMulticastDomainId"] = args ? args.transitGatewayMulticastDomainId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MulticastGroupSource.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing MulticastGroupSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MulticastGroupSource(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MulticastGroupSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MulticastGroupSource.__pulumiType;
    }
}
exports.MulticastGroupSource = MulticastGroupSource;
/** @internal */
MulticastGroupSource.__pulumiType = 'aws:ec2transitgateway/multicastGroupSource:MulticastGroupSource';
//# sourceMappingURL=multicastGroupSource.js.map