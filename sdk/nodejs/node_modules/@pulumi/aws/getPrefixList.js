"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrefixListOutput = exports.getPrefixList = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const privateS3VpcEndpoint = new aws.ec2.VpcEndpoint("privateS3VpcEndpoint", {
 *     vpcId: aws_vpc.foo.id,
 *     serviceName: "com.amazonaws.us-west-2.s3",
 * });
 * const privateS3PrefixList = aws.ec2.getPrefixListOutput({
 *     prefixListId: privateS3VpcEndpoint.prefixListId,
 * });
 * const bar = new aws.ec2.NetworkAcl("bar", {vpcId: aws_vpc.foo.id});
 * const privateS3NetworkAclRule = new aws.ec2.NetworkAclRule("privateS3NetworkAclRule", {
 *     networkAclId: bar.id,
 *     ruleNumber: 200,
 *     egress: false,
 *     protocol: "tcp",
 *     ruleAction: "allow",
 *     cidrBlock: privateS3PrefixList.apply(privateS3PrefixList => privateS3PrefixList.cidrBlocks?[0]),
 *     fromPort: 443,
 *     toPort: 443,
 * });
 * ```
 * ### Filter
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = pulumi.output(aws.ec2.getPrefixList({
 *     filters: [{
 *         name: "prefix-list-id",
 *         values: ["pl-68a54001"],
 *     }],
 * }));
 * ```
 */
/** @deprecated aws.getPrefixList has been deprecated in favor of aws.ec2.getPrefixList */
function getPrefixList(args, opts) {
    pulumi.log.warn("getPrefixList is deprecated: aws.getPrefixList has been deprecated in favor of aws.ec2.getPrefixList");
    args = args || {};
    if (!opts) {
        opts = {};
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws:index/getPrefixList:getPrefixList", {
        "filters": args.filters,
        "name": args.name,
        "prefixListId": args.prefixListId,
    }, opts);
}
exports.getPrefixList = getPrefixList;
function getPrefixListOutput(args, opts) {
    return pulumi.output(args).apply(a => getPrefixList(a, opts));
}
exports.getPrefixListOutput = getPrefixListOutput;
//# sourceMappingURL=getPrefixList.js.map