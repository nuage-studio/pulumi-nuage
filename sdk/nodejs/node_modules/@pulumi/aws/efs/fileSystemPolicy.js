"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystemPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic File System (EFS) File System Policy resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const fs = new aws.efs.FileSystem("fs", {});
 * const policy = new aws.efs.FileSystemPolicy("policy", {
 *     fileSystemId: fs.id,
 *     bypassPolicyLockoutSafetyCheck: true,
 *     policy: `{
 *     "Version": "2012-10-17",
 *     "Id": "ExamplePolicy01",
 *     "Statement": [
 *         {
 *             "Sid": "ExampleStatement01",
 *             "Effect": "Allow",
 *             "Principal": {
 *                 "AWS": "*"
 *             },
 *             "Resource": "${aws_efs_file_system.test.arn}",
 *             "Action": [
 *                 "elasticfilesystem:ClientMount",
 *                 "elasticfilesystem:ClientWrite"
 *             ],
 *             "Condition": {
 *                 "Bool": {
 *                     "aws:SecureTransport": "true"
 *                 }
 *             }
 *         }
 *     ]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * The EFS file system policies can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:efs/fileSystemPolicy:FileSystemPolicy foo fs-6fa144c6
 * ```
 */
class FileSystemPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bypassPolicyLockoutSafetyCheck"] = state ? state.bypassPolicyLockoutSafetyCheck : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            resourceInputs["bypassPolicyLockoutSafetyCheck"] = args ? args.bypassPolicyLockoutSafetyCheck : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileSystemPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing FileSystemPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FileSystemPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FileSystemPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystemPolicy.__pulumiType;
    }
}
exports.FileSystemPolicy = FileSystemPolicy;
/** @internal */
FileSystemPolicy.__pulumiType = 'aws:efs/fileSystemPolicy:FileSystemPolicy';
//# sourceMappingURL=fileSystemPolicy.js.map