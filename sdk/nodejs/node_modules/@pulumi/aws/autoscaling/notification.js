"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notification = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AutoScaling Group with Notification support, via SNS Topics. Each of
 * the `notifications` map to a [Notification Configuration](https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_DescribeNotificationConfigurations.html) inside Amazon Web
 * Services, and are applied to each AutoScaling Group you supply.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.sns.Topic("example", {});
 * // arn is an exported attribute
 * const bar = new aws.autoscaling.Group("bar", {});
 * // ...
 * const foo = new aws.autoscaling.Group("foo", {});
 * // ...
 * const exampleNotifications = new aws.autoscaling.Notification("exampleNotifications", {
 *     groupNames: [
 *         bar.name,
 *         foo.name,
 *     ],
 *     notifications: [
 *         "autoscaling:EC2_INSTANCE_LAUNCH",
 *         "autoscaling:EC2_INSTANCE_TERMINATE",
 *         "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
 *         "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
 *     ],
 *     topicArn: example.arn,
 * });
 * ```
 */
class Notification extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["groupNames"] = state ? state.groupNames : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["topicArn"] = state ? state.topicArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.groupNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupNames'");
            }
            if ((!args || args.notifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifications'");
            }
            if ((!args || args.topicArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicArn'");
            }
            resourceInputs["groupNames"] = args ? args.groupNames : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["topicArn"] = args ? args.topicArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Notification.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Notification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Notification(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Notification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Notification.__pulumiType;
    }
}
exports.Notification = Notification;
/** @internal */
Notification.__pulumiType = 'aws:autoscaling/notification:Notification';
//# sourceMappingURL=notification.js.map