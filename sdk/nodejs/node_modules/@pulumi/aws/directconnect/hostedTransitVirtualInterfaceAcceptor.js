"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostedTransitVirtualInterfaceAcceptor = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to manage the accepter's side of a Direct Connect hosted transit virtual interface.
 * This resource accepts ownership of a transit virtual interface created by another AWS account.
 *
 * > **NOTE:** AWS allows a Direct Connect hosted transit virtual interface to be deleted from either the allocator's or accepter's side. However, this provider only allows the Direct Connect hosted transit virtual interface to be deleted from the allocator's side by removing the corresponding `aws.directconnect.HostedTransitVirtualInterface` resource from your configuration. Removing a `aws.directconnect.HostedTransitVirtualInterfaceAcceptor` resource from your configuration will remove it from your statefile and management, **but will not delete the Direct Connect virtual interface.**
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const accepter = new aws.Provider("accepter", {});
 * // Accepter's credentials.
 * const accepterCallerIdentity = aws.getCallerIdentity({});
 * // Accepter's side of the VIF.
 * const example = new aws.directconnect.Gateway("example", {amazonSideAsn: "64512"}, {
 *     provider: aws.accepter,
 * });
 * // Creator's side of the VIF
 * const creator = new aws.directconnect.HostedTransitVirtualInterface("creator", {
 *     connectionId: "dxcon-zzzzzzzz",
 *     ownerAccountId: accepterCallerIdentity.then(accepterCallerIdentity => accepterCallerIdentity.accountId),
 *     vlan: 4094,
 *     addressFamily: "ipv4",
 *     bgpAsn: 65352,
 * }, {
 *     dependsOn: [example],
 * });
 * const accepterHostedTransitVirtualInterfaceAcceptor = new aws.directconnect.HostedTransitVirtualInterfaceAcceptor("accepterHostedTransitVirtualInterfaceAcceptor", {
 *     virtualInterfaceId: creator.id,
 *     dxGatewayId: example.id,
 *     tags: {
 *         Side: "Accepter",
 *     },
 * }, {
 *     provider: aws.accepter,
 * });
 * ```
 *
 * ## Import
 *
 * Direct Connect hosted transit virtual interfaces can be imported using the `vif id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:directconnect/hostedTransitVirtualInterfaceAcceptor:HostedTransitVirtualInterfaceAcceptor test dxvif-33cc44dd
 * ```
 */
class HostedTransitVirtualInterfaceAcceptor extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["dxGatewayId"] = state ? state.dxGatewayId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["virtualInterfaceId"] = state ? state.virtualInterfaceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dxGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dxGatewayId'");
            }
            if ((!args || args.virtualInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualInterfaceId'");
            }
            resourceInputs["dxGatewayId"] = args ? args.dxGatewayId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualInterfaceId"] = args ? args.virtualInterfaceId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HostedTransitVirtualInterfaceAcceptor.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing HostedTransitVirtualInterfaceAcceptor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new HostedTransitVirtualInterfaceAcceptor(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of HostedTransitVirtualInterfaceAcceptor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HostedTransitVirtualInterfaceAcceptor.__pulumiType;
    }
}
exports.HostedTransitVirtualInterfaceAcceptor = HostedTransitVirtualInterfaceAcceptor;
/** @internal */
HostedTransitVirtualInterfaceAcceptor.__pulumiType = 'aws:directconnect/hostedTransitVirtualInterfaceAcceptor:HostedTransitVirtualInterfaceAcceptor';
//# sourceMappingURL=hostedTransitVirtualInterfaceAcceptor.js.map