"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenZfsVolume = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Amazon FSx for OpenZFS volume.
 * See the [FSx OpenZFS User Guide](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/what-is-fsx.html) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.fsx.OpenZfsVolume("test", {parentVolumeId: aws_fsx_openzfs_file_system.test.root_volume_id});
 * ```
 *
 * ## Import
 *
 * FSx Volumes can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:fsx/openZfsVolume:OpenZfsVolume example fsvol-543ab12b1ca672f33
 * ```
 */
class OpenZfsVolume extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["copyTagsToSnapshots"] = state ? state.copyTagsToSnapshots : undefined;
            resourceInputs["dataCompressionType"] = state ? state.dataCompressionType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nfsExports"] = state ? state.nfsExports : undefined;
            resourceInputs["originSnapshot"] = state ? state.originSnapshot : undefined;
            resourceInputs["parentVolumeId"] = state ? state.parentVolumeId : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["recordSizeKib"] = state ? state.recordSizeKib : undefined;
            resourceInputs["storageCapacityQuotaGib"] = state ? state.storageCapacityQuotaGib : undefined;
            resourceInputs["storageCapacityReservationGib"] = state ? state.storageCapacityReservationGib : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["userAndGroupQuotas"] = state ? state.userAndGroupQuotas : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.parentVolumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentVolumeId'");
            }
            resourceInputs["copyTagsToSnapshots"] = args ? args.copyTagsToSnapshots : undefined;
            resourceInputs["dataCompressionType"] = args ? args.dataCompressionType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nfsExports"] = args ? args.nfsExports : undefined;
            resourceInputs["originSnapshot"] = args ? args.originSnapshot : undefined;
            resourceInputs["parentVolumeId"] = args ? args.parentVolumeId : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["recordSizeKib"] = args ? args.recordSizeKib : undefined;
            resourceInputs["storageCapacityQuotaGib"] = args ? args.storageCapacityQuotaGib : undefined;
            resourceInputs["storageCapacityReservationGib"] = args ? args.storageCapacityReservationGib : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userAndGroupQuotas"] = args ? args.userAndGroupQuotas : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpenZfsVolume.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing OpenZfsVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OpenZfsVolume(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of OpenZfsVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenZfsVolume.__pulumiType;
    }
}
exports.OpenZfsVolume = OpenZfsVolume;
/** @internal */
OpenZfsVolume.__pulumiType = 'aws:fsx/openZfsVolume:OpenZfsVolume';
//# sourceMappingURL=openZfsVolume.js.map