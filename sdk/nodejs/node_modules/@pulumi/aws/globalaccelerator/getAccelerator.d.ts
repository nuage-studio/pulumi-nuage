import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Provides information about a Global Accelerator accelerator.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const acceleratorArn = config.get("acceleratorArn") || "";
 * const acceleratorName = config.get("acceleratorName") || "";
 * const example = aws.globalaccelerator.getAccelerator({
 *     arn: acceleratorArn,
 *     name: acceleratorName,
 * });
 * ```
 */
export declare function getAccelerator(args?: GetAcceleratorArgs, opts?: pulumi.InvokeOptions): Promise<GetAcceleratorResult>;
/**
 * A collection of arguments for invoking getAccelerator.
 */
export interface GetAcceleratorArgs {
    /**
     * Full ARN of the Global Accelerator.
     */
    arn?: string;
    /**
     * Unique name of the Global Accelerator.
     */
    name?: string;
    tags?: {
        [key: string]: string;
    };
}
/**
 * A collection of values returned by getAccelerator.
 */
export interface GetAcceleratorResult {
    readonly arn: string;
    readonly attributes: outputs.globalaccelerator.GetAcceleratorAttribute[];
    readonly dnsName: string;
    readonly enabled: boolean;
    readonly hostedZoneId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ipAddressType: string;
    readonly ipSets: outputs.globalaccelerator.GetAcceleratorIpSet[];
    readonly name: string;
    readonly tags: {
        [key: string]: string;
    };
}
export declare function getAcceleratorOutput(args?: GetAcceleratorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAcceleratorResult>;
/**
 * A collection of arguments for invoking getAccelerator.
 */
export interface GetAcceleratorOutputArgs {
    /**
     * Full ARN of the Global Accelerator.
     */
    arn?: pulumi.Input<string>;
    /**
     * Unique name of the Global Accelerator.
     */
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
