"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an OpsWorks stack resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const main = new aws.opsworks.Stack("main", {
 *     region: "us-west-1",
 *     serviceRoleArn: aws_iam_role.opsworks.arn,
 *     defaultInstanceProfileArn: aws_iam_instance_profile.opsworks.arn,
 *     tags: {
 *         Name: "foobar-stack",
 *     },
 *     customJson: `{
 *  "foobar": {
 *     "version": "1.0.0"
 *   }
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * OpsWorks stacks can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:opsworks/stack:Stack bar 00000000-0000-0000-0000-000000000000
 * ```
 */
class Stack extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["agentVersion"] = state ? state.agentVersion : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["berkshelfVersion"] = state ? state.berkshelfVersion : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["configurationManagerName"] = state ? state.configurationManagerName : undefined;
            resourceInputs["configurationManagerVersion"] = state ? state.configurationManagerVersion : undefined;
            resourceInputs["customCookbooksSources"] = state ? state.customCookbooksSources : undefined;
            resourceInputs["customJson"] = state ? state.customJson : undefined;
            resourceInputs["defaultAvailabilityZone"] = state ? state.defaultAvailabilityZone : undefined;
            resourceInputs["defaultInstanceProfileArn"] = state ? state.defaultInstanceProfileArn : undefined;
            resourceInputs["defaultOs"] = state ? state.defaultOs : undefined;
            resourceInputs["defaultRootDeviceType"] = state ? state.defaultRootDeviceType : undefined;
            resourceInputs["defaultSshKeyName"] = state ? state.defaultSshKeyName : undefined;
            resourceInputs["defaultSubnetId"] = state ? state.defaultSubnetId : undefined;
            resourceInputs["hostnameTheme"] = state ? state.hostnameTheme : undefined;
            resourceInputs["manageBerkshelf"] = state ? state.manageBerkshelf : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["serviceRoleArn"] = state ? state.serviceRoleArn : undefined;
            resourceInputs["stackEndpoint"] = state ? state.stackEndpoint : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["useCustomCookbooks"] = state ? state.useCustomCookbooks : undefined;
            resourceInputs["useOpsworksSecurityGroups"] = state ? state.useOpsworksSecurityGroups : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.defaultInstanceProfileArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultInstanceProfileArn'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.serviceRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceRoleArn'");
            }
            resourceInputs["agentVersion"] = args ? args.agentVersion : undefined;
            resourceInputs["berkshelfVersion"] = args ? args.berkshelfVersion : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["configurationManagerName"] = args ? args.configurationManagerName : undefined;
            resourceInputs["configurationManagerVersion"] = args ? args.configurationManagerVersion : undefined;
            resourceInputs["customCookbooksSources"] = args ? args.customCookbooksSources : undefined;
            resourceInputs["customJson"] = args ? args.customJson : undefined;
            resourceInputs["defaultAvailabilityZone"] = args ? args.defaultAvailabilityZone : undefined;
            resourceInputs["defaultInstanceProfileArn"] = args ? args.defaultInstanceProfileArn : undefined;
            resourceInputs["defaultOs"] = args ? args.defaultOs : undefined;
            resourceInputs["defaultRootDeviceType"] = args ? args.defaultRootDeviceType : undefined;
            resourceInputs["defaultSshKeyName"] = args ? args.defaultSshKeyName : undefined;
            resourceInputs["defaultSubnetId"] = args ? args.defaultSubnetId : undefined;
            resourceInputs["hostnameTheme"] = args ? args.hostnameTheme : undefined;
            resourceInputs["manageBerkshelf"] = args ? args.manageBerkshelf : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serviceRoleArn"] = args ? args.serviceRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useCustomCookbooks"] = args ? args.useCustomCookbooks : undefined;
            resourceInputs["useOpsworksSecurityGroups"] = args ? args.useOpsworksSecurityGroups : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["stackEndpoint"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stack.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Stack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Stack(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Stack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stack.__pulumiType;
    }
}
exports.Stack = Stack;
/** @internal */
Stack.__pulumiType = 'aws:opsworks/stack:Stack';
//# sourceMappingURL=stack.js.map