"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an OpsWorks instance resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const my_instance = new aws.opsworks.Instance("my-instance", {
 *     stackId: aws_opsworks_stack.main.id,
 *     layerIds: [aws_opsworks_custom_layer["my-layer"].id],
 *     instanceType: "t2.micro",
 *     os: "Amazon Linux 2015.09",
 *     state: "stopped",
 * });
 * ```
 * ## Block devices
 *
 * Each of the `*_block_device` attributes controls a portion of the AWS
 * Instance's "Block Device Mapping". It's a good idea to familiarize yourself with [AWS's Block Device
 * Mapping docs](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html)
 * to understand the implications of using these attributes.
 *
 * ### `ebsBlockDevice`
 *
 * * `deleteOnTermination` - (Optional) Whether the volume should be destroyed on instance termination. Default is `true`.
 * * `deviceName` - (Required) Name of the device to mount.
 * * `iops` - (Optional) Amount of provisioned [IOPS](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html). This must be set with a `volumeType` of `io1`.
 * * `snapshotId` - (Optional) Snapshot ID to mount.
 * * `volumeSize` - (Optional) Size of the volume in gigabytes.
 * * `volumeType` - (Optional) Type of volume. Valid values are `standard`, `gp2`, or `io1`. Default is `standard`.
 *
 * Modifying any `ebsBlockDevice` currently requires resource replacement.
 *
 * ### `ephemeralBlockDevice`
 *
 * * `deviceName` - Name of the block device to mount on the instance.
 * * `virtualName` - The [Instance Store Device Name](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames) (e.g., `ephemeral0`).
 *
 * Each AWS Instance type has a different set of Instance Store block devices
 * available for attachment. AWS [publishes a
 * list](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#StorageOnInstanceTypes)
 * of which ephemeral devices are available on each type. The devices are always
 * identified by the `virtualName` in the format `ephemeral{0..N}`.
 *
 * ### `rootBlockDevice`
 *
 * * `deleteOnTermination` - (Optional) Whether the volume should be destroyed on instance termination. Default is `true`.
 * * `iops` - (Optional) Amount of provisioned [IOPS](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html). This must be set with a `volumeType` of `io1`.
 * * `volumeSize` - (Optional) Size of the volume in gigabytes.
 * * `volumeType` - (Optional) Type of volume. Valid values are `standard`, `gp2`, or `io1`. Default is `standard`.
 *
 * Modifying any of the `rootBlockDevice` settings requires resource
 * replacement.
 *
 * > **NOTE:** Currently, changes to `*_block_device` configuration of _existing_
 * resources cannot be automatically detected by this provider. After making updates
 * to block device configuration, resource recreation can be manually triggered by
 * using the [`up` command with the --replace argument](https://www.pulumi.com/docs/reference/cli/pulumi_up/).
 *
 * ## Import
 *
 * Opsworks Instances can be imported using the `instance id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:opsworks/instance:Instance my_instance 4d6d1710-ded9-42a1-b08e-b043ad7af1e2
 * ```
 */
class Instance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["agentVersion"] = state ? state.agentVersion : undefined;
            resourceInputs["amiId"] = state ? state.amiId : undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["autoScalingType"] = state ? state.autoScalingType : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deleteEbs"] = state ? state.deleteEbs : undefined;
            resourceInputs["deleteEip"] = state ? state.deleteEip : undefined;
            resourceInputs["ebsBlockDevices"] = state ? state.ebsBlockDevices : undefined;
            resourceInputs["ebsOptimized"] = state ? state.ebsOptimized : undefined;
            resourceInputs["ec2InstanceId"] = state ? state.ec2InstanceId : undefined;
            resourceInputs["ecsClusterArn"] = state ? state.ecsClusterArn : undefined;
            resourceInputs["elasticIp"] = state ? state.elasticIp : undefined;
            resourceInputs["ephemeralBlockDevices"] = state ? state.ephemeralBlockDevices : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["infrastructureClass"] = state ? state.infrastructureClass : undefined;
            resourceInputs["installUpdatesOnBoot"] = state ? state.installUpdatesOnBoot : undefined;
            resourceInputs["instanceProfileArn"] = state ? state.instanceProfileArn : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["lastServiceErrorId"] = state ? state.lastServiceErrorId : undefined;
            resourceInputs["layerIds"] = state ? state.layerIds : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["privateDns"] = state ? state.privateDns : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["publicDns"] = state ? state.publicDns : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["registeredBy"] = state ? state.registeredBy : undefined;
            resourceInputs["reportedAgentVersion"] = state ? state.reportedAgentVersion : undefined;
            resourceInputs["reportedOsFamily"] = state ? state.reportedOsFamily : undefined;
            resourceInputs["reportedOsName"] = state ? state.reportedOsName : undefined;
            resourceInputs["reportedOsVersion"] = state ? state.reportedOsVersion : undefined;
            resourceInputs["rootBlockDevices"] = state ? state.rootBlockDevices : undefined;
            resourceInputs["rootDeviceType"] = state ? state.rootDeviceType : undefined;
            resourceInputs["rootDeviceVolumeId"] = state ? state.rootDeviceVolumeId : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["sshHostDsaKeyFingerprint"] = state ? state.sshHostDsaKeyFingerprint : undefined;
            resourceInputs["sshHostRsaKeyFingerprint"] = state ? state.sshHostRsaKeyFingerprint : undefined;
            resourceInputs["sshKeyName"] = state ? state.sshKeyName : undefined;
            resourceInputs["stackId"] = state ? state.stackId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tenancy"] = state ? state.tenancy : undefined;
            resourceInputs["virtualizationType"] = state ? state.virtualizationType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.layerIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layerIds'");
            }
            if ((!args || args.stackId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            resourceInputs["agentVersion"] = args ? args.agentVersion : undefined;
            resourceInputs["amiId"] = args ? args.amiId : undefined;
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["autoScalingType"] = args ? args.autoScalingType : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["createdAt"] = args ? args.createdAt : undefined;
            resourceInputs["deleteEbs"] = args ? args.deleteEbs : undefined;
            resourceInputs["deleteEip"] = args ? args.deleteEip : undefined;
            resourceInputs["ebsBlockDevices"] = args ? args.ebsBlockDevices : undefined;
            resourceInputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            resourceInputs["ecsClusterArn"] = args ? args.ecsClusterArn : undefined;
            resourceInputs["elasticIp"] = args ? args.elasticIp : undefined;
            resourceInputs["ephemeralBlockDevices"] = args ? args.ephemeralBlockDevices : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["infrastructureClass"] = args ? args.infrastructureClass : undefined;
            resourceInputs["installUpdatesOnBoot"] = args ? args.installUpdatesOnBoot : undefined;
            resourceInputs["instanceProfileArn"] = args ? args.instanceProfileArn : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["layerIds"] = args ? args.layerIds : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["rootBlockDevices"] = args ? args.rootBlockDevices : undefined;
            resourceInputs["rootDeviceType"] = args ? args.rootDeviceType : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["sshKeyName"] = args ? args.sshKeyName : undefined;
            resourceInputs["stackId"] = args ? args.stackId : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tenancy"] = args ? args.tenancy : undefined;
            resourceInputs["virtualizationType"] = args ? args.virtualizationType : undefined;
            resourceInputs["ec2InstanceId"] = undefined /*out*/;
            resourceInputs["lastServiceErrorId"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["privateDns"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicDns"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["registeredBy"] = undefined /*out*/;
            resourceInputs["reportedAgentVersion"] = undefined /*out*/;
            resourceInputs["reportedOsFamily"] = undefined /*out*/;
            resourceInputs["reportedOsName"] = undefined /*out*/;
            resourceInputs["reportedOsVersion"] = undefined /*out*/;
            resourceInputs["rootDeviceVolumeId"] = undefined /*out*/;
            resourceInputs["sshHostDsaKeyFingerprint"] = undefined /*out*/;
            resourceInputs["sshHostRsaKeyFingerprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Instance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }
}
exports.Instance = Instance;
/** @internal */
Instance.__pulumiType = 'aws:opsworks/instance:Instance';
//# sourceMappingURL=instance.js.map