"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Statement = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Executes a Redshift Data Statement.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.redshiftdata.Statement("example", {
 *     clusterIdentifier: aws_redshift_cluster.example.cluster_identifier,
 *     database: aws_redshift_cluster.example.database_name,
 *     dbUser: aws_redshift_cluster.example.master_username,
 *     sql: "CREATE GROUP group_name;",
 * });
 * ```
 *
 * ## Import
 *
 * Redshift Data Statements can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:redshiftdata/statement:Statement example example
 * ```
 */
class Statement extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["dbUser"] = state ? state.dbUser : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["secretArn"] = state ? state.secretArn : undefined;
            resourceInputs["sql"] = state ? state.sql : undefined;
            resourceInputs["statementName"] = state ? state.statementName : undefined;
            resourceInputs["withEvent"] = state ? state.withEvent : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.sql === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sql'");
            }
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["dbUser"] = args ? args.dbUser : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["secretArn"] = args ? args.secretArn : undefined;
            resourceInputs["sql"] = args ? args.sql : undefined;
            resourceInputs["statementName"] = args ? args.statementName : undefined;
            resourceInputs["withEvent"] = args ? args.withEvent : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Statement.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Statement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Statement(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Statement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Statement.__pulumiType;
    }
}
exports.Statement = Statement;
/** @internal */
Statement.__pulumiType = 'aws:redshiftdata/statement:Statement';
//# sourceMappingURL=statement.js.map