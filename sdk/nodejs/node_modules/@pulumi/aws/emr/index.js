"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StudioSessionMapping = exports.Studio = exports.SecurityConfiguration = exports.ManagedScalingPolicy = exports.InstanceGroup = exports.InstanceFleet = exports.getReleaseLabelsOutput = exports.getReleaseLabels = exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Cluster = null;
exports.getReleaseLabels = null;
exports.getReleaseLabelsOutput = null;
exports.InstanceFleet = null;
exports.InstanceGroup = null;
exports.ManagedScalingPolicy = null;
exports.SecurityConfiguration = null;
exports.Studio = null;
exports.StudioSessionMapping = null;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
utilities.lazyLoad(exports, ["getReleaseLabels", "getReleaseLabelsOutput"], () => require("./getReleaseLabels"));
utilities.lazyLoad(exports, ["InstanceFleet"], () => require("./instanceFleet"));
utilities.lazyLoad(exports, ["InstanceGroup"], () => require("./instanceGroup"));
utilities.lazyLoad(exports, ["ManagedScalingPolicy"], () => require("./managedScalingPolicy"));
utilities.lazyLoad(exports, ["SecurityConfiguration"], () => require("./securityConfiguration"));
utilities.lazyLoad(exports, ["Studio"], () => require("./studio"));
utilities.lazyLoad(exports, ["StudioSessionMapping"], () => require("./studioSessionMapping"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:emr/cluster:Cluster":
                return new exports.Cluster(name, undefined, { urn });
            case "aws:emr/instanceFleet:InstanceFleet":
                return new exports.InstanceFleet(name, undefined, { urn });
            case "aws:emr/instanceGroup:InstanceGroup":
                return new exports.InstanceGroup(name, undefined, { urn });
            case "aws:emr/managedScalingPolicy:ManagedScalingPolicy":
                return new exports.ManagedScalingPolicy(name, undefined, { urn });
            case "aws:emr/securityConfiguration:SecurityConfiguration":
                return new exports.SecurityConfiguration(name, undefined, { urn });
            case "aws:emr/studio:Studio":
                return new exports.Studio(name, undefined, { urn });
            case "aws:emr/studioSessionMapping:StudioSessionMapping":
                return new exports.StudioSessionMapping(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "emr/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "emr/instanceFleet", _module);
pulumi.runtime.registerResourceModule("aws", "emr/instanceGroup", _module);
pulumi.runtime.registerResourceModule("aws", "emr/managedScalingPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "emr/securityConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "emr/studio", _module);
pulumi.runtime.registerResourceModule("aws", "emr/studioSessionMapping", _module);
//# sourceMappingURL=index.js.map