"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic MapReduce Cluster, a web service that makes it easy to process large amounts of data efficiently. See [Amazon Elastic MapReduce Documentation](https://aws.amazon.com/documentation/elastic-mapreduce/) for more information.
 *
 * To configure [Instance Groups](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for [task nodes](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-task), see the `aws.emr.InstanceGroup` resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cluster = new aws.emr.Cluster("cluster", {
 *     releaseLabel: "emr-4.6.0",
 *     applications: ["Spark"],
 *     additionalInfo: `{
 *   "instanceAwsClientConfiguration": {
 *     "proxyPort": 8099,
 *     "proxyHost": "myproxy.example.com"
 *   }
 * }
 * `,
 *     terminationProtection: false,
 *     keepJobFlowAliveWhenNoSteps: true,
 *     ec2Attributes: {
 *         subnetId: aws_subnet.main.id,
 *         emrManagedMasterSecurityGroup: aws_security_group.sg.id,
 *         emrManagedSlaveSecurityGroup: aws_security_group.sg.id,
 *         instanceProfile: aws_iam_instance_profile.emr_profile.arn,
 *     },
 *     masterInstanceGroup: {
 *         instanceType: "m4.large",
 *     },
 *     coreInstanceGroup: {
 *         instanceType: "c4.large",
 *         instanceCount: 1,
 *         ebsConfigs: [{
 *             size: 40,
 *             type: "gp2",
 *             volumesPerInstance: 1,
 *         }],
 *         bidPrice: "0.30",
 *         autoscalingPolicy: `{
 * "Constraints": {
 *   "MinCapacity": 1,
 *   "MaxCapacity": 2
 * },
 * "Rules": [
 *   {
 *     "Name": "ScaleOutMemoryPercentage",
 *     "Description": "Scale out if YARNMemoryAvailablePercentage is less than 15",
 *     "Action": {
 *       "SimpleScalingPolicyConfiguration": {
 *         "AdjustmentType": "CHANGE_IN_CAPACITY",
 *         "ScalingAdjustment": 1,
 *         "CoolDown": 300
 *       }
 *     },
 *     "Trigger": {
 *       "CloudWatchAlarmDefinition": {
 *         "ComparisonOperator": "LESS_THAN",
 *         "EvaluationPeriods": 1,
 *         "MetricName": "YARNMemoryAvailablePercentage",
 *         "Namespace": "AWS/ElasticMapReduce",
 *         "Period": 300,
 *         "Statistic": "AVERAGE",
 *         "Threshold": 15.0,
 *         "Unit": "PERCENT"
 *       }
 *     }
 *   }
 * ]
 * }
 * `,
 *     },
 *     ebsRootVolumeSize: 100,
 *     tags: {
 *         role: "rolename",
 *         env: "env",
 *     },
 *     bootstrapActions: [{
 *         path: "s3://elasticmapreduce/bootstrap-actions/run-if",
 *         name: "runif",
 *         args: [
 *             "instance.isMaster=true",
 *             "echo running on master node",
 *         ],
 *     }],
 *     configurationsJson: `  [
 *     {
 *       "Classification": "hadoop-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     },
 *     {
 *       "Classification": "spark-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     }
 *   ]
 * `,
 *     serviceRole: aws_iam_role.iam_emr_service_role.arn,
 * });
 * ```
 *
 * The `aws.emr.Cluster` resource typically requires two IAM roles, one for the EMR Cluster to use as a service, and another to place on your Cluster Instances to interact with AWS from those instances. The suggested role policy template for the EMR service is `AmazonElasticMapReduceRole`, and `AmazonElasticMapReduceforEC2Role` for the EC2 profile. See the [Getting Started](https://docs.aws.amazon.com/ElasticMapReduce/latest/ManagementGuide/emr-gs-launch-sample-cluster.html) guide for more information on these IAM roles.
 * ### Instance Fleet
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.emr.Cluster("example", {
 *     masterInstanceFleet: {
 *         instanceTypeConfigs: [{
 *             instanceType: "m4.xlarge",
 *         }],
 *         targetOnDemandCapacity: 1,
 *     },
 *     coreInstanceFleet: {
 *         instanceTypeConfigs: [
 *             {
 *                 bidPriceAsPercentageOfOnDemandPrice: 80,
 *                 ebsConfigs: [{
 *                     size: 100,
 *                     type: "gp2",
 *                     volumesPerInstance: 1,
 *                 }],
 *                 instanceType: "m3.xlarge",
 *                 weightedCapacity: 1,
 *             },
 *             {
 *                 bidPriceAsPercentageOfOnDemandPrice: 100,
 *                 ebsConfigs: [{
 *                     size: 100,
 *                     type: "gp2",
 *                     volumesPerInstance: 1,
 *                 }],
 *                 instanceType: "m4.xlarge",
 *                 weightedCapacity: 1,
 *             },
 *             {
 *                 bidPriceAsPercentageOfOnDemandPrice: 100,
 *                 ebsConfigs: [{
 *                     size: 100,
 *                     type: "gp2",
 *                     volumesPerInstance: 1,
 *                 }],
 *                 instanceType: "m4.2xlarge",
 *                 weightedCapacity: 2,
 *             },
 *         ],
 *         launchSpecifications: {
 *             spotSpecifications: [{
 *                 allocationStrategy: "capacity-optimized",
 *                 blockDurationMinutes: 0,
 *                 timeoutAction: "SWITCH_TO_ON_DEMAND",
 *                 timeoutDurationMinutes: 10,
 *             }],
 *         },
 *         name: "core fleet",
 *         targetOnDemandCapacity: 2,
 *         targetSpotCapacity: 2,
 *     },
 * });
 * const task = new aws.emr.InstanceFleet("task", {
 *     clusterId: example.id,
 *     instanceTypeConfigs: [
 *         {
 *             bidPriceAsPercentageOfOnDemandPrice: 100,
 *             ebsConfigs: [{
 *                 size: 100,
 *                 type: "gp2",
 *                 volumesPerInstance: 1,
 *             }],
 *             instanceType: "m4.xlarge",
 *             weightedCapacity: 1,
 *         },
 *         {
 *             bidPriceAsPercentageOfOnDemandPrice: 100,
 *             ebsConfigs: [{
 *                 size: 100,
 *                 type: "gp2",
 *                 volumesPerInstance: 1,
 *             }],
 *             instanceType: "m4.2xlarge",
 *             weightedCapacity: 2,
 *         },
 *     ],
 *     launchSpecifications: {
 *         spotSpecifications: [{
 *             allocationStrategy: "capacity-optimized",
 *             blockDurationMinutes: 0,
 *             timeoutAction: "TERMINATE_CLUSTER",
 *             timeoutDurationMinutes: 10,
 *         }],
 *     },
 *     targetOnDemandCapacity: 1,
 *     targetSpotCapacity: 1,
 * });
 * ```
 * ### Enable Debug Logging
 *
 * [Debug logging in EMR](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-debugging.html) is implemented as a step. It is highly recommended that you utilize the resource options configuration with `ignoreChanges` if other steps are being managed outside of this provider.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // ... other configuration ...
 * const example = new aws.emr.Cluster("example", {steps: [{
 *     actionOnFailure: "TERMINATE_CLUSTER",
 *     name: "Setup Hadoop Debugging",
 *     hadoopJarStep: {
 *         jar: "command-runner.jar",
 *         args: ["state-pusher-script"],
 *     },
 * }]});
 * ```
 * ### Multiple Node Master Instance Group
 *
 * Available in EMR version 5.23.0 and later, an EMR Cluster can be launched with three master nodes for high availability. Additional information about this functionality and its requirements can be found in the [EMR Management Guide](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-ha.html).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // This configuration is for illustrative purposes and highlights
 * // only relevant configurations for working with this functionality.
 * // Map public IP on launch must be enabled for public (Internet accessible) subnets
 * // ... other configuration ...
 * const exampleSubnet = new aws.ec2.Subnet("exampleSubnet", {mapPublicIpOnLaunch: true});
 * // ... other configuration ...
 * const exampleCluster = new aws.emr.Cluster("exampleCluster", {
 *     releaseLabel: "emr-5.24.1",
 *     terminationProtection: true,
 *     ec2Attributes: {
 *         subnetId: exampleSubnet.id,
 *     },
 *     masterInstanceGroup: {
 *         instanceCount: 3,
 *     },
 *     coreInstanceGroup: {},
 * });
 * ```
 * ### Bootable Cluster
 *
 * **NOTE:** This configuration demonstrates a minimal configuration needed to boot an example EMR Cluster. It is not meant to display best practices. As with all examples, use at your own risk.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mainVpc = new aws.ec2.Vpc("mainVpc", {
 *     cidrBlock: "168.31.0.0/16",
 *     enableDnsHostnames: true,
 *     tags: {
 *         name: "emr_test",
 *     },
 * });
 * const mainSubnet = new aws.ec2.Subnet("mainSubnet", {
 *     vpcId: mainVpc.id,
 *     cidrBlock: "168.31.0.0/20",
 *     tags: {
 *         name: "emr_test",
 *     },
 * });
 * const allowAccess = new aws.ec2.SecurityGroup("allowAccess", {
 *     description: "Allow inbound traffic",
 *     vpcId: mainVpc.id,
 *     ingress: [{
 *         fromPort: 0,
 *         toPort: 0,
 *         protocol: "-1",
 *         cidrBlocks: [mainVpc.cidrBlock],
 *     }],
 *     egress: [{
 *         fromPort: 0,
 *         toPort: 0,
 *         protocol: "-1",
 *         cidrBlocks: ["0.0.0.0/0"],
 *     }],
 *     tags: {
 *         name: "emr_test",
 *     },
 * }, {
 *     dependsOn: [mainSubnet],
 * });
 * // IAM role for EMR Service
 * const iamEmrServiceRole = new aws.iam.Role("iamEmrServiceRole", {assumeRolePolicy: `{
 *   "Version": "2008-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "elasticmapreduce.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `});
 * // IAM Role for EC2 Instance Profile
 * const iamEmrProfileRole = new aws.iam.Role("iamEmrProfileRole", {assumeRolePolicy: `{
 *   "Version": "2008-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "ec2.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `});
 * const emrProfile = new aws.iam.InstanceProfile("emrProfile", {role: iamEmrProfileRole.name});
 * const cluster = new aws.emr.Cluster("cluster", {
 *     releaseLabel: "emr-4.6.0",
 *     applications: ["Spark"],
 *     ec2Attributes: {
 *         subnetId: mainSubnet.id,
 *         emrManagedMasterSecurityGroup: allowAccess.id,
 *         emrManagedSlaveSecurityGroup: allowAccess.id,
 *         instanceProfile: emrProfile.arn,
 *     },
 *     masterInstanceGroup: {
 *         instanceType: "m5.xlarge",
 *     },
 *     coreInstanceGroup: {
 *         instanceCount: 1,
 *         instanceType: "m5.xlarge",
 *     },
 *     tags: {
 *         role: "rolename",
 *         dns_zone: "env_zone",
 *         env: "env",
 *         name: "name-env",
 *     },
 *     bootstrapActions: [{
 *         path: "s3://elasticmapreduce/bootstrap-actions/run-if",
 *         name: "runif",
 *         args: [
 *             "instance.isMaster=true",
 *             "echo running on master node",
 *         ],
 *     }],
 *     configurationsJson: `  [
 *     {
 *       "Classification": "hadoop-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     },
 *     {
 *       "Classification": "spark-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     }
 *   ]
 * `,
 *     serviceRole: iamEmrServiceRole.arn,
 * });
 * const gw = new aws.ec2.InternetGateway("gw", {vpcId: mainVpc.id});
 * const routeTable = new aws.ec2.RouteTable("routeTable", {
 *     vpcId: mainVpc.id,
 *     routes: [{
 *         cidrBlock: "0.0.0.0/0",
 *         gatewayId: gw.id,
 *     }],
 * });
 * const mainRouteTableAssociation = new aws.ec2.MainRouteTableAssociation("mainRouteTableAssociation", {
 *     vpcId: mainVpc.id,
 *     routeTableId: routeTable.id,
 * });
 * //##
 * const iamEmrServicePolicy = new aws.iam.RolePolicy("iamEmrServicePolicy", {
 *     role: iamEmrServiceRole.id,
 *     policy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [{
 *         "Effect": "Allow",
 *         "Resource": "*",
 *         "Action": [
 *             "ec2:AuthorizeSecurityGroupEgress",
 *             "ec2:AuthorizeSecurityGroupIngress",
 *             "ec2:CancelSpotInstanceRequests",
 *             "ec2:CreateNetworkInterface",
 *             "ec2:CreateSecurityGroup",
 *             "ec2:CreateTags",
 *             "ec2:DeleteNetworkInterface",
 *             "ec2:DeleteSecurityGroup",
 *             "ec2:DeleteTags",
 *             "ec2:DescribeAvailabilityZones",
 *             "ec2:DescribeAccountAttributes",
 *             "ec2:DescribeDhcpOptions",
 *             "ec2:DescribeInstanceStatus",
 *             "ec2:DescribeInstances",
 *             "ec2:DescribeKeyPairs",
 *             "ec2:DescribeNetworkAcls",
 *             "ec2:DescribeNetworkInterfaces",
 *             "ec2:DescribePrefixLists",
 *             "ec2:DescribeRouteTables",
 *             "ec2:DescribeSecurityGroups",
 *             "ec2:DescribeSpotInstanceRequests",
 *             "ec2:DescribeSpotPriceHistory",
 *             "ec2:DescribeSubnets",
 *             "ec2:DescribeVpcAttribute",
 *             "ec2:DescribeVpcEndpoints",
 *             "ec2:DescribeVpcEndpointServices",
 *             "ec2:DescribeVpcs",
 *             "ec2:DetachNetworkInterface",
 *             "ec2:ModifyImageAttribute",
 *             "ec2:ModifyInstanceAttribute",
 *             "ec2:RequestSpotInstances",
 *             "ec2:RevokeSecurityGroupEgress",
 *             "ec2:RunInstances",
 *             "ec2:TerminateInstances",
 *             "ec2:DeleteVolume",
 *             "ec2:DescribeVolumeStatus",
 *             "ec2:DescribeVolumes",
 *             "ec2:DetachVolume",
 *             "iam:GetRole",
 *             "iam:GetRolePolicy",
 *             "iam:ListInstanceProfiles",
 *             "iam:ListRolePolicies",
 *             "iam:PassRole",
 *             "s3:CreateBucket",
 *             "s3:Get*",
 *             "s3:List*",
 *             "sdb:BatchPutAttributes",
 *             "sdb:Select",
 *             "sqs:CreateQueue",
 *             "sqs:Delete*",
 *             "sqs:GetQueue*",
 *             "sqs:PurgeQueue",
 *             "sqs:ReceiveMessage"
 *         ]
 *     }]
 * }
 * `,
 * });
 * const iamEmrProfilePolicy = new aws.iam.RolePolicy("iamEmrProfilePolicy", {
 *     role: iamEmrProfileRole.id,
 *     policy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [{
 *         "Effect": "Allow",
 *         "Resource": "*",
 *         "Action": [
 *             "cloudwatch:*",
 *             "dynamodb:*",
 *             "ec2:Describe*",
 *             "elasticmapreduce:Describe*",
 *             "elasticmapreduce:ListBootstrapActions",
 *             "elasticmapreduce:ListClusters",
 *             "elasticmapreduce:ListInstanceGroups",
 *             "elasticmapreduce:ListInstances",
 *             "elasticmapreduce:ListSteps",
 *             "kinesis:CreateStream",
 *             "kinesis:DeleteStream",
 *             "kinesis:DescribeStream",
 *             "kinesis:GetRecords",
 *             "kinesis:GetShardIterator",
 *             "kinesis:MergeShards",
 *             "kinesis:PutRecord",
 *             "kinesis:SplitShard",
 *             "rds:Describe*",
 *             "s3:*",
 *             "sdb:*",
 *             "sns:*",
 *             "sqs:*"
 *         ]
 *     }]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * EMR clusters can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:emr/cluster:Cluster cluster j-123456ABCDEF
 * ```
 *
 *  Since the API does not return the actual values for Kerberos configurations, environments with those configurations will need to use the resource options configuration block `ignoreChanges` argument available to all provider resources to prevent perpetual differences, e.g. terraform resource "aws_emr_cluster" "example" {
 *
 * # ... other configuration ...
 *
 *  lifecycle {
 *
 *  ignore_changes = [kerberos_attributes]
 *
 *  } }
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["additionalInfo"] = state ? state.additionalInfo : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoTerminationPolicy"] = state ? state.autoTerminationPolicy : undefined;
            resourceInputs["autoscalingRole"] = state ? state.autoscalingRole : undefined;
            resourceInputs["bootstrapActions"] = state ? state.bootstrapActions : undefined;
            resourceInputs["clusterState"] = state ? state.clusterState : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["configurationsJson"] = state ? state.configurationsJson : undefined;
            resourceInputs["coreInstanceFleet"] = state ? state.coreInstanceFleet : undefined;
            resourceInputs["coreInstanceGroup"] = state ? state.coreInstanceGroup : undefined;
            resourceInputs["customAmiId"] = state ? state.customAmiId : undefined;
            resourceInputs["ebsRootVolumeSize"] = state ? state.ebsRootVolumeSize : undefined;
            resourceInputs["ec2Attributes"] = state ? state.ec2Attributes : undefined;
            resourceInputs["keepJobFlowAliveWhenNoSteps"] = state ? state.keepJobFlowAliveWhenNoSteps : undefined;
            resourceInputs["kerberosAttributes"] = state ? state.kerberosAttributes : undefined;
            resourceInputs["listStepsStates"] = state ? state.listStepsStates : undefined;
            resourceInputs["logEncryptionKmsKeyId"] = state ? state.logEncryptionKmsKeyId : undefined;
            resourceInputs["logUri"] = state ? state.logUri : undefined;
            resourceInputs["masterInstanceFleet"] = state ? state.masterInstanceFleet : undefined;
            resourceInputs["masterInstanceGroup"] = state ? state.masterInstanceGroup : undefined;
            resourceInputs["masterPublicDns"] = state ? state.masterPublicDns : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["releaseLabel"] = state ? state.releaseLabel : undefined;
            resourceInputs["scaleDownBehavior"] = state ? state.scaleDownBehavior : undefined;
            resourceInputs["securityConfiguration"] = state ? state.securityConfiguration : undefined;
            resourceInputs["serviceRole"] = state ? state.serviceRole : undefined;
            resourceInputs["stepConcurrencyLevel"] = state ? state.stepConcurrencyLevel : undefined;
            resourceInputs["steps"] = state ? state.steps : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            resourceInputs["visibleToAllUsers"] = state ? state.visibleToAllUsers : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.releaseLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'releaseLabel'");
            }
            if ((!args || args.serviceRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceRole'");
            }
            resourceInputs["additionalInfo"] = args ? args.additionalInfo : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["autoTerminationPolicy"] = args ? args.autoTerminationPolicy : undefined;
            resourceInputs["autoscalingRole"] = args ? args.autoscalingRole : undefined;
            resourceInputs["bootstrapActions"] = args ? args.bootstrapActions : undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["configurationsJson"] = args ? args.configurationsJson : undefined;
            resourceInputs["coreInstanceFleet"] = args ? args.coreInstanceFleet : undefined;
            resourceInputs["coreInstanceGroup"] = args ? args.coreInstanceGroup : undefined;
            resourceInputs["customAmiId"] = args ? args.customAmiId : undefined;
            resourceInputs["ebsRootVolumeSize"] = args ? args.ebsRootVolumeSize : undefined;
            resourceInputs["ec2Attributes"] = args ? args.ec2Attributes : undefined;
            resourceInputs["keepJobFlowAliveWhenNoSteps"] = args ? args.keepJobFlowAliveWhenNoSteps : undefined;
            resourceInputs["kerberosAttributes"] = args ? args.kerberosAttributes : undefined;
            resourceInputs["listStepsStates"] = args ? args.listStepsStates : undefined;
            resourceInputs["logEncryptionKmsKeyId"] = args ? args.logEncryptionKmsKeyId : undefined;
            resourceInputs["logUri"] = args ? args.logUri : undefined;
            resourceInputs["masterInstanceFleet"] = args ? args.masterInstanceFleet : undefined;
            resourceInputs["masterInstanceGroup"] = args ? args.masterInstanceGroup : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["releaseLabel"] = args ? args.releaseLabel : undefined;
            resourceInputs["scaleDownBehavior"] = args ? args.scaleDownBehavior : undefined;
            resourceInputs["securityConfiguration"] = args ? args.securityConfiguration : undefined;
            resourceInputs["serviceRole"] = args ? args.serviceRole : undefined;
            resourceInputs["stepConcurrencyLevel"] = args ? args.stepConcurrencyLevel : undefined;
            resourceInputs["steps"] = args ? args.steps : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["visibleToAllUsers"] = args ? args.visibleToAllUsers : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["clusterState"] = undefined /*out*/;
            resourceInputs["masterPublicDns"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'aws:emr/cluster:Cluster';
//# sourceMappingURL=cluster.js.map