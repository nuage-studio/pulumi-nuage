"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to manage AWS EMR Security Configurations
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.emr.SecurityConfiguration("foo", {
 *     configuration: `{
 *   "EncryptionConfiguration": {
 *     "AtRestEncryptionConfiguration": {
 *       "S3EncryptionConfiguration": {
 *         "EncryptionMode": "SSE-S3"
 *       },
 *       "LocalDiskEncryptionConfiguration": {
 *         "EncryptionKeyProviderType": "AwsKms",
 *         "AwsKmsKey": "arn:aws:kms:us-west-2:187416307283:alias/tf_emr_test_key"
 *       }
 *     },
 *     "EnableInTransitEncryption": false,
 *     "EnableAtRestEncryption": true
 *   }
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * EMR Security Configurations can be imported using the `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:emr/securityConfiguration:SecurityConfiguration sc example-sc-name
 * ```
 */
class SecurityConfiguration extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityConfiguration.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SecurityConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SecurityConfiguration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SecurityConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityConfiguration.__pulumiType;
    }
}
exports.SecurityConfiguration = SecurityConfiguration;
/** @internal */
SecurityConfiguration.__pulumiType = 'aws:emr/securityConfiguration:SecurityConfiguration';
//# sourceMappingURL=securityConfiguration.js.map