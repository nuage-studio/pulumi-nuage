"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsApplication = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Kinesis Analytics Application resource. Kinesis Analytics is a managed service that
 * allows processing and analyzing streaming data using standard SQL.
 *
 * For more details, see the [Amazon Kinesis Analytics Documentation](https://docs.aws.amazon.com/kinesisanalytics/latest/dev/what-is.html).
 *
 * > **Note:** To manage Amazon Kinesis Data Analytics for Apache Flink applications, use the `aws.kinesisanalyticsv2.Application` resource.
 *
 * ## Example Usage
 * ### Kinesis Stream Input
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testStream = new aws.kinesis.Stream("testStream", {shardCount: 1});
 * const testApplication = new aws.kinesis.AnalyticsApplication("testApplication", {inputs: {
 *     namePrefix: "test_prefix",
 *     kinesisStream: {
 *         resourceArn: testStream.arn,
 *         roleArn: aws_iam_role.test.arn,
 *     },
 *     parallelism: {
 *         count: 1,
 *     },
 *     schema: {
 *         recordColumns: [{
 *             mapping: `$.test`,
 *             name: "test",
 *             sqlType: "VARCHAR(8)",
 *         }],
 *         recordEncoding: "UTF-8",
 *         recordFormat: {
 *             mappingParameters: {
 *                 json: {
 *                     recordRowPath: "$",
 *                 },
 *             },
 *         },
 *     },
 * }});
 * ```
 * ### Starting An Application
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleLogGroup = new aws.cloudwatch.LogGroup("exampleLogGroup", {});
 * const exampleLogStream = new aws.cloudwatch.LogStream("exampleLogStream", {logGroupName: exampleLogGroup.name});
 * const exampleStream = new aws.kinesis.Stream("exampleStream", {shardCount: 1});
 * const exampleFirehoseDeliveryStream = new aws.kinesis.FirehoseDeliveryStream("exampleFirehoseDeliveryStream", {
 *     destination: "extended_s3",
 *     extendedS3Configuration: {
 *         bucketArn: aws_s3_bucket.example.arn,
 *         roleArn: aws_iam_role.example.arn,
 *     },
 * });
 * const test = new aws.kinesis.AnalyticsApplication("test", {
 *     cloudwatchLoggingOptions: {
 *         logStreamArn: exampleLogStream.arn,
 *         roleArn: aws_iam_role.example.arn,
 *     },
 *     inputs: {
 *         namePrefix: "example_prefix",
 *         schema: {
 *             recordColumns: [{
 *                 name: "COLUMN_1",
 *                 sqlType: "INTEGER",
 *             }],
 *             recordFormat: {
 *                 mappingParameters: {
 *                     csv: {
 *                         recordColumnDelimiter: ",",
 *                         recordRowDelimiter: "|",
 *                     },
 *                 },
 *             },
 *         },
 *         kinesisStream: {
 *             resourceArn: exampleStream.arn,
 *             roleArn: aws_iam_role.example.arn,
 *         },
 *         startingPositionConfigurations: [{
 *             startingPosition: "NOW",
 *         }],
 *     },
 *     outputs: [{
 *         name: "OUTPUT_1",
 *         schema: {
 *             recordFormatType: "CSV",
 *         },
 *         kinesisFirehose: {
 *             resourceArn: exampleFirehoseDeliveryStream.arn,
 *             roleArn: aws_iam_role.example.arn,
 *         },
 *     }],
 *     startApplication: true,
 * });
 * ```
 *
 * ## Import
 *
 * Kinesis Analytics Application can be imported by using ARN, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:kinesis/analyticsApplication:AnalyticsApplication example arn:aws:kinesisanalytics:us-west-2:1234567890:application/example
 * ```
 */
class AnalyticsApplication extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cloudwatchLoggingOptions"] = state ? state.cloudwatchLoggingOptions : undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["createTimestamp"] = state ? state.createTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["inputs"] = state ? state.inputs : undefined;
            resourceInputs["lastUpdateTimestamp"] = state ? state.lastUpdateTimestamp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["referenceDataSources"] = state ? state.referenceDataSources : undefined;
            resourceInputs["startApplication"] = state ? state.startApplication : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["cloudwatchLoggingOptions"] = args ? args.cloudwatchLoggingOptions : undefined;
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inputs"] = args ? args.inputs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputs"] = args ? args.outputs : undefined;
            resourceInputs["referenceDataSources"] = args ? args.referenceDataSources : undefined;
            resourceInputs["startApplication"] = args ? args.startApplication : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createTimestamp"] = undefined /*out*/;
            resourceInputs["lastUpdateTimestamp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AnalyticsApplication.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AnalyticsApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AnalyticsApplication(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AnalyticsApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AnalyticsApplication.__pulumiType;
    }
}
exports.AnalyticsApplication = AnalyticsApplication;
/** @internal */
AnalyticsApplication.__pulumiType = 'aws:kinesis/analyticsApplication:AnalyticsApplication';
//# sourceMappingURL=analyticsApplication.js.map