"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResolverRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Route53 Resolver rule.
 *
 * ## Example Usage
 * ### System rule
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const sys = new aws.route53.ResolverRule("sys", {
 *     domainName: "subdomain.example.com",
 *     ruleType: "SYSTEM",
 * });
 * ```
 * ### Forward rule
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const fwd = new aws.route53.ResolverRule("fwd", {
 *     domainName: "example.com",
 *     ruleType: "FORWARD",
 *     resolverEndpointId: aws_route53_resolver_endpoint.foo.id,
 *     targetIps: [{
 *         ip: "123.45.67.89",
 *     }],
 *     tags: {
 *         Environment: "Prod",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Route53 Resolver rules can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:route53/resolverRule:ResolverRule sys rslvr-rr-0123456789abcdef0
 * ```
 */
class ResolverRule extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["resolverEndpointId"] = state ? state.resolverEndpointId : undefined;
            resourceInputs["ruleType"] = state ? state.ruleType : undefined;
            resourceInputs["shareStatus"] = state ? state.shareStatus : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["targetIps"] = state ? state.targetIps : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.ruleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleType'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resolverEndpointId"] = args ? args.resolverEndpointId : undefined;
            resourceInputs["ruleType"] = args ? args.ruleType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetIps"] = args ? args.targetIps : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["shareStatus"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResolverRule.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ResolverRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ResolverRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ResolverRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResolverRule.__pulumiType;
    }
}
exports.ResolverRule = ResolverRule;
/** @internal */
ResolverRule.__pulumiType = 'aws:route53/resolverRule:ResolverRule';
//# sourceMappingURL=resolverRule.js.map