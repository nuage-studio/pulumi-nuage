"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrafficPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Route53 Traffic Policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.route53.TrafficPolicy("example", {
 *     comment: "example comment",
 *     document: `{
 *   "AWSPolicyFormatVersion": "2015-10-01",
 *   "RecordType": "A",
 *   "Endpoints": {
 *     "endpoint-start-NkPh": {
 *       "Type": "value",
 *       "Value": "10.0.0.2"
 *     }
 *   },
 *   "StartEndpoint": "endpoint-start-NkPh"
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Route53 Traffic Policy can be imported using the `id` and `version`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:route53/trafficPolicy:TrafficPolicy example 01a52019-d16f-422a-ae72-c306d2b6df7e/1
 * ```
 */
class TrafficPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["document"] = state ? state.document : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.document === undefined) && !opts.urn) {
                throw new Error("Missing required property 'document'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["document"] = args ? args.document : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing TrafficPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TrafficPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TrafficPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficPolicy.__pulumiType;
    }
}
exports.TrafficPolicy = TrafficPolicy;
/** @internal */
TrafficPolicy.__pulumiType = 'aws:route53/trafficPolicy:TrafficPolicy';
//# sourceMappingURL=trafficPolicy.js.map