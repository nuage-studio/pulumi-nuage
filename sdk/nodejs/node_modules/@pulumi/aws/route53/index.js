"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoneAssociation = exports.Zone = exports.VpcAssociationAuthorization = exports.TrafficPolicyInstance = exports.TrafficPolicy = exports.ResolverRuleAssociation = exports.ResolverRule = exports.ResolverQueryLogConfigAssociation = exports.ResolverQueryLogConfig = exports.ResolverFirewallRuleGroupAssociation = exports.ResolverFirewallRuleGroup = exports.ResolverFirewallRule = exports.ResolverFirewallDomainList = exports.ResolverFirewallConfig = exports.ResolverEndpoint = exports.ResolverDnsSecConfig = exports.Record = exports.QueryLog = exports.KeySigningKey = exports.HostedZoneDnsSec = exports.HealthCheck = exports.getZoneOutput = exports.getZone = exports.getTrafficPolicyDocumentOutput = exports.getTrafficPolicyDocument = exports.getResolverRulesOutput = exports.getResolverRules = exports.getResolverRuleOutput = exports.getResolverRule = exports.getResolverEndpointOutput = exports.getResolverEndpoint = exports.getDelegationSetOutput = exports.getDelegationSet = exports.DelegationSet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.DelegationSet = null;
exports.getDelegationSet = null;
exports.getDelegationSetOutput = null;
exports.getResolverEndpoint = null;
exports.getResolverEndpointOutput = null;
exports.getResolverRule = null;
exports.getResolverRuleOutput = null;
exports.getResolverRules = null;
exports.getResolverRulesOutput = null;
exports.getTrafficPolicyDocument = null;
exports.getTrafficPolicyDocumentOutput = null;
exports.getZone = null;
exports.getZoneOutput = null;
exports.HealthCheck = null;
exports.HostedZoneDnsSec = null;
exports.KeySigningKey = null;
exports.QueryLog = null;
exports.Record = null;
__exportStar(require("./recordType"), exports);
exports.ResolverDnsSecConfig = null;
exports.ResolverEndpoint = null;
exports.ResolverFirewallConfig = null;
exports.ResolverFirewallDomainList = null;
exports.ResolverFirewallRule = null;
exports.ResolverFirewallRuleGroup = null;
exports.ResolverFirewallRuleGroupAssociation = null;
exports.ResolverQueryLogConfig = null;
exports.ResolverQueryLogConfigAssociation = null;
exports.ResolverRule = null;
exports.ResolverRuleAssociation = null;
exports.TrafficPolicy = null;
exports.TrafficPolicyInstance = null;
exports.VpcAssociationAuthorization = null;
exports.Zone = null;
exports.ZoneAssociation = null;
utilities.lazyLoad(exports, ["DelegationSet"], () => require("./delegationSet"));
utilities.lazyLoad(exports, ["getDelegationSet", "getDelegationSetOutput"], () => require("./getDelegationSet"));
utilities.lazyLoad(exports, ["getResolverEndpoint", "getResolverEndpointOutput"], () => require("./getResolverEndpoint"));
utilities.lazyLoad(exports, ["getResolverRule", "getResolverRuleOutput"], () => require("./getResolverRule"));
utilities.lazyLoad(exports, ["getResolverRules", "getResolverRulesOutput"], () => require("./getResolverRules"));
utilities.lazyLoad(exports, ["getTrafficPolicyDocument", "getTrafficPolicyDocumentOutput"], () => require("./getTrafficPolicyDocument"));
utilities.lazyLoad(exports, ["getZone", "getZoneOutput"], () => require("./getZone"));
utilities.lazyLoad(exports, ["HealthCheck"], () => require("./healthCheck"));
utilities.lazyLoad(exports, ["HostedZoneDnsSec"], () => require("./hostedZoneDnsSec"));
utilities.lazyLoad(exports, ["KeySigningKey"], () => require("./keySigningKey"));
utilities.lazyLoad(exports, ["QueryLog"], () => require("./queryLog"));
utilities.lazyLoad(exports, ["Record"], () => require("./record"));
utilities.lazyLoad(exports, ["ResolverDnsSecConfig"], () => require("./resolverDnsSecConfig"));
utilities.lazyLoad(exports, ["ResolverEndpoint"], () => require("./resolverEndpoint"));
utilities.lazyLoad(exports, ["ResolverFirewallConfig"], () => require("./resolverFirewallConfig"));
utilities.lazyLoad(exports, ["ResolverFirewallDomainList"], () => require("./resolverFirewallDomainList"));
utilities.lazyLoad(exports, ["ResolverFirewallRule"], () => require("./resolverFirewallRule"));
utilities.lazyLoad(exports, ["ResolverFirewallRuleGroup"], () => require("./resolverFirewallRuleGroup"));
utilities.lazyLoad(exports, ["ResolverFirewallRuleGroupAssociation"], () => require("./resolverFirewallRuleGroupAssociation"));
utilities.lazyLoad(exports, ["ResolverQueryLogConfig"], () => require("./resolverQueryLogConfig"));
utilities.lazyLoad(exports, ["ResolverQueryLogConfigAssociation"], () => require("./resolverQueryLogConfigAssociation"));
utilities.lazyLoad(exports, ["ResolverRule"], () => require("./resolverRule"));
utilities.lazyLoad(exports, ["ResolverRuleAssociation"], () => require("./resolverRuleAssociation"));
utilities.lazyLoad(exports, ["TrafficPolicy"], () => require("./trafficPolicy"));
utilities.lazyLoad(exports, ["TrafficPolicyInstance"], () => require("./trafficPolicyInstance"));
utilities.lazyLoad(exports, ["VpcAssociationAuthorization"], () => require("./vpcAssociationAuthorization"));
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));
utilities.lazyLoad(exports, ["ZoneAssociation"], () => require("./zoneAssociation"));
// Export enums:
__exportStar(require("../types/enums/route53"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:route53/delegationSet:DelegationSet":
                return new exports.DelegationSet(name, undefined, { urn });
            case "aws:route53/healthCheck:HealthCheck":
                return new exports.HealthCheck(name, undefined, { urn });
            case "aws:route53/hostedZoneDnsSec:HostedZoneDnsSec":
                return new exports.HostedZoneDnsSec(name, undefined, { urn });
            case "aws:route53/keySigningKey:KeySigningKey":
                return new exports.KeySigningKey(name, undefined, { urn });
            case "aws:route53/queryLog:QueryLog":
                return new exports.QueryLog(name, undefined, { urn });
            case "aws:route53/record:Record":
                return new exports.Record(name, undefined, { urn });
            case "aws:route53/resolverDnsSecConfig:ResolverDnsSecConfig":
                return new exports.ResolverDnsSecConfig(name, undefined, { urn });
            case "aws:route53/resolverEndpoint:ResolverEndpoint":
                return new exports.ResolverEndpoint(name, undefined, { urn });
            case "aws:route53/resolverFirewallConfig:ResolverFirewallConfig":
                return new exports.ResolverFirewallConfig(name, undefined, { urn });
            case "aws:route53/resolverFirewallDomainList:ResolverFirewallDomainList":
                return new exports.ResolverFirewallDomainList(name, undefined, { urn });
            case "aws:route53/resolverFirewallRule:ResolverFirewallRule":
                return new exports.ResolverFirewallRule(name, undefined, { urn });
            case "aws:route53/resolverFirewallRuleGroup:ResolverFirewallRuleGroup":
                return new exports.ResolverFirewallRuleGroup(name, undefined, { urn });
            case "aws:route53/resolverFirewallRuleGroupAssociation:ResolverFirewallRuleGroupAssociation":
                return new exports.ResolverFirewallRuleGroupAssociation(name, undefined, { urn });
            case "aws:route53/resolverQueryLogConfig:ResolverQueryLogConfig":
                return new exports.ResolverQueryLogConfig(name, undefined, { urn });
            case "aws:route53/resolverQueryLogConfigAssociation:ResolverQueryLogConfigAssociation":
                return new exports.ResolverQueryLogConfigAssociation(name, undefined, { urn });
            case "aws:route53/resolverRule:ResolverRule":
                return new exports.ResolverRule(name, undefined, { urn });
            case "aws:route53/resolverRuleAssociation:ResolverRuleAssociation":
                return new exports.ResolverRuleAssociation(name, undefined, { urn });
            case "aws:route53/trafficPolicy:TrafficPolicy":
                return new exports.TrafficPolicy(name, undefined, { urn });
            case "aws:route53/trafficPolicyInstance:TrafficPolicyInstance":
                return new exports.TrafficPolicyInstance(name, undefined, { urn });
            case "aws:route53/vpcAssociationAuthorization:VpcAssociationAuthorization":
                return new exports.VpcAssociationAuthorization(name, undefined, { urn });
            case "aws:route53/zone:Zone":
                return new exports.Zone(name, undefined, { urn });
            case "aws:route53/zoneAssociation:ZoneAssociation":
                return new exports.ZoneAssociation(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "route53/delegationSet", _module);
pulumi.runtime.registerResourceModule("aws", "route53/healthCheck", _module);
pulumi.runtime.registerResourceModule("aws", "route53/hostedZoneDnsSec", _module);
pulumi.runtime.registerResourceModule("aws", "route53/keySigningKey", _module);
pulumi.runtime.registerResourceModule("aws", "route53/queryLog", _module);
pulumi.runtime.registerResourceModule("aws", "route53/record", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverDnsSecConfig", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverEndpoint", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverFirewallConfig", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverFirewallDomainList", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverFirewallRule", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverFirewallRuleGroup", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverFirewallRuleGroupAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverQueryLogConfig", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverQueryLogConfigAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverRule", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverRuleAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "route53/trafficPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "route53/trafficPolicyInstance", _module);
pulumi.runtime.registerResourceModule("aws", "route53/vpcAssociationAuthorization", _module);
pulumi.runtime.registerResourceModule("aws", "route53/zone", _module);
pulumi.runtime.registerResourceModule("aws", "route53/zoneAssociation", _module);
//# sourceMappingURL=index.js.map