"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResolverRuleOutput = exports.getResolverRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * `aws.route53.ResolverRule` provides details about a specific Route53 Resolver rule.
 *
 * ## Example Usage
 *
 * The following example shows how to get a Route53 Resolver rule based on its associated domain name and rule type.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = pulumi.output(aws.route53.getResolverRule({
 *     domainName: "subdomain.example.com",
 *     ruleType: "SYSTEM",
 * }));
 * ```
 */
function getResolverRule(args, opts) {
    args = args || {};
    if (!opts) {
        opts = {};
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws:route53/getResolverRule:getResolverRule", {
        "domainName": args.domainName,
        "name": args.name,
        "resolverEndpointId": args.resolverEndpointId,
        "resolverRuleId": args.resolverRuleId,
        "ruleType": args.ruleType,
        "tags": args.tags,
    }, opts);
}
exports.getResolverRule = getResolverRule;
function getResolverRuleOutput(args, opts) {
    return pulumi.output(args).apply(a => getResolverRule(a, opts));
}
exports.getResolverRuleOutput = getResolverRuleOutput;
//# sourceMappingURL=getResolverRule.js.map