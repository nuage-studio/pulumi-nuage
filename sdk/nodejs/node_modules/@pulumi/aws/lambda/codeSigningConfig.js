"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeSigningConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Lambda Code Signing Config resource. A code signing configuration defines a list of allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment validation checks fail).
 *
 * For information about Lambda code signing configurations and how to use them, see [configuring code signing for Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const newCsc = new aws.lambda.CodeSigningConfig("newCsc", {
 *     allowedPublishers: {
 *         signingProfileVersionArns: [
 *             aws_signer_signing_profile.example1.arn,
 *             aws_signer_signing_profile.example2.arn,
 *         ],
 *     },
 *     policies: {
 *         untrustedArtifactOnDeployment: "Warn",
 *     },
 *     description: "My awesome code signing config.",
 * });
 * ```
 *
 * ## Import
 *
 * Code Signing Configs can be imported using their ARN, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:lambda/codeSigningConfig:CodeSigningConfig imported_csc arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-0f6c334abcdea4d8b
 * ```
 */
class CodeSigningConfig extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowedPublishers"] = state ? state.allowedPublishers : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.allowedPublishers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowedPublishers'");
            }
            resourceInputs["allowedPublishers"] = args ? args.allowedPublishers : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["configId"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodeSigningConfig.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CodeSigningConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CodeSigningConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CodeSigningConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodeSigningConfig.__pulumiType;
    }
}
exports.CodeSigningConfig = CodeSigningConfig;
/** @internal */
CodeSigningConfig.__pulumiType = 'aws:lambda/codeSigningConfig:CodeSigningConfig';
//# sourceMappingURL=codeSigningConfig.js.map