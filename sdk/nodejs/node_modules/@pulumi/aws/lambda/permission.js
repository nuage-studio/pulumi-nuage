"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Permission = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Gives an external source (like an EventBridge Rule, SNS, or S3) permission to access the Lambda function.
 *
 * ## Example Usage
 * ### Basic Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const iamForLambda = new aws.iam.Role("iamForLambda", {assumeRolePolicy: JSON.stringify({
 *     Version: "2012-10-17",
 *     Statement: [{
 *         Action: "sts:AssumeRole",
 *         Effect: "Allow",
 *         Sid: "",
 *         Principal: {
 *             Service: "lambda.amazonaws.com",
 *         },
 *     }],
 * })});
 * const testLambda = new aws.lambda.Function("testLambda", {
 *     code: new pulumi.asset.FileArchive("lambdatest.zip"),
 *     role: iamForLambda.arn,
 *     handler: "exports.handler",
 *     runtime: "nodejs12.x",
 * });
 * const testAlias = new aws.lambda.Alias("testAlias", {
 *     description: "a sample description",
 *     functionName: testLambda.name,
 *     functionVersion: `$LATEST`,
 * });
 * const allowCloudwatch = new aws.lambda.Permission("allowCloudwatch", {
 *     action: "lambda:InvokeFunction",
 *     "function": testLambda.name,
 *     principal: "events.amazonaws.com",
 *     sourceArn: "arn:aws:events:eu-west-1:111122223333:rule/RunDaily",
 *     qualifier: testAlias.name,
 * });
 * ```
 * ### Usage with SNS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const defaultTopic = new aws.sns.Topic("defaultTopic", {});
 * const defaultRole = new aws.iam.Role("defaultRole", {assumeRolePolicy: JSON.stringify({
 *     Version: "2012-10-17",
 *     Statement: [{
 *         Action: "sts:AssumeRole",
 *         Effect: "Allow",
 *         Sid: "",
 *         Principal: {
 *             Service: "lambda.amazonaws.com",
 *         },
 *     }],
 * })});
 * const func = new aws.lambda.Function("func", {
 *     code: new pulumi.asset.FileArchive("lambdatest.zip"),
 *     role: defaultRole.arn,
 *     handler: "exports.handler",
 *     runtime: "python3.7",
 * });
 * const withSns = new aws.lambda.Permission("withSns", {
 *     action: "lambda:InvokeFunction",
 *     "function": func.name,
 *     principal: "sns.amazonaws.com",
 *     sourceArn: defaultTopic.arn,
 * });
 * const lambda = new aws.sns.TopicSubscription("lambda", {
 *     topic: defaultTopic.arn,
 *     protocol: "lambda",
 *     endpoint: func.arn,
 * });
 * ```
 * ### Specify Lambda permissions for API Gateway REST API
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const myDemoAPI = new aws.apigateway.RestApi("MyDemoAPI", {
 *     description: "This is my API for demonstration purposes",
 * });
 * const lambdaPermission = new aws.lambda.Permission("lambda_permission", {
 *     action: "lambda:InvokeFunction",
 *     function: "MyDemoFunction",
 *     principal: "apigateway.amazonaws.com",
 *     sourceArn: pulumi.interpolate`${myDemoAPI.executionArn}/*&#47;*&#47;*`,
 * });
 * ```
 * ## Usage with CloudWatch log group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const defaultLogGroup = new aws.cloudwatch.LogGroup("defaultLogGroup", {});
 * const defaultRole = new aws.iam.Role("defaultRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "lambda.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const loggingFunction = new aws.lambda.Function("loggingFunction", {
 *     code: new pulumi.asset.FileArchive("lamba_logging.zip"),
 *     handler: "exports.handler",
 *     role: defaultRole.arn,
 *     runtime: "python3.7",
 * });
 * const loggingPermission = new aws.lambda.Permission("loggingPermission", {
 *     action: "lambda:InvokeFunction",
 *     "function": loggingFunction.name,
 *     principal: "logs.eu-west-1.amazonaws.com",
 *     sourceArn: pulumi.interpolate`${defaultLogGroup.arn}:*`,
 * });
 * const loggingLogSubscriptionFilter = new aws.cloudwatch.LogSubscriptionFilter("loggingLogSubscriptionFilter", {
 *     destinationArn: loggingFunction.arn,
 *     filterPattern: "",
 *     logGroup: defaultLogGroup.name,
 * }, {
 *     dependsOn: [loggingPermission],
 * });
 * ```
 *
 * ## Import
 *
 * Lambda permission statements can be imported using function_name/statement_id, with an optional qualifier, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:lambda/permission:Permission test_lambda_permission my_test_lambda_function/AllowExecutionFromCloudWatch
 * ```
 *
 * ```sh
 *  $ pulumi import aws:lambda/permission:Permission test_lambda_permission my_test_lambda_function:qualifier_name/AllowExecutionFromCloudWatch
 * ```
 */
class Permission extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["eventSourceToken"] = state ? state.eventSourceToken : undefined;
            resourceInputs["function"] = state ? state.function : undefined;
            resourceInputs["functionUrlAuthType"] = state ? state.functionUrlAuthType : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["principalOrgId"] = state ? state.principalOrgId : undefined;
            resourceInputs["qualifier"] = state ? state.qualifier : undefined;
            resourceInputs["sourceAccount"] = state ? state.sourceAccount : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
            resourceInputs["statementId"] = state ? state.statementId : undefined;
            resourceInputs["statementIdPrefix"] = state ? state.statementIdPrefix : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.function === undefined) && !opts.urn) {
                throw new Error("Missing required property 'function'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["eventSourceToken"] = args ? args.eventSourceToken : undefined;
            resourceInputs["function"] = args ? args.function : undefined;
            resourceInputs["functionUrlAuthType"] = args ? args.functionUrlAuthType : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["principalOrgId"] = args ? args.principalOrgId : undefined;
            resourceInputs["qualifier"] = args ? args.qualifier : undefined;
            resourceInputs["sourceAccount"] = args ? args.sourceAccount : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
            resourceInputs["statementId"] = args ? args.statementId : undefined;
            resourceInputs["statementIdPrefix"] = args ? args.statementIdPrefix : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Permission.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Permission(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permission.__pulumiType;
    }
}
exports.Permission = Permission;
/** @internal */
Permission.__pulumiType = 'aws:lambda/permission:Permission';
//# sourceMappingURL=permission.js.map