import * as pulumi from "@pulumi/pulumi";
/**
 * Use this resource to invoke a lambda function. The lambda function is invoked with the [RequestResponse](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) invocation type.
 *
 * > **NOTE:** This resource _only_ invokes the function when the arguments call for a create or update. In other words, after an initial invocation on _apply_, if the arguments do not change, a subsequent _apply_ does not invoke the function again. To dynamically invoke the function, see the `triggers` example below. To always invoke a function on each _apply_, see the [`aws.lambda.Invocation`](https://www.terraform.io/docs/providers/aws/d/lambda_invocation.html) data source.
 *
 * ## Example Usage
 * ### Dynamic Invocation Example Using Triggers
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as crypto from "crypto";
 *
 * const example = new aws.lambda.Invocation("example", {
 *     functionName: aws_lambda_function.lambda_function_test.function_name,
 *     triggers: {
 *         redeployment: crypto.createHash('sha1').update(JSON.stringify([aws_lambda_function.example.environment])).digest('hex'),
 *     },
 *     input: JSON.stringify({
 *         key1: "value1",
 *         key2: "value2",
 *     }),
 * });
 * ```
 */
export declare class Invocation extends pulumi.CustomResource {
    /**
     * Get an existing Invocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InvocationState, opts?: pulumi.CustomResourceOptions): Invocation;
    /**
     * Returns true if the given object is an instance of Invocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Invocation;
    /**
     * Name of the lambda function.
     */
    readonly functionName: pulumi.Output<string>;
    /**
     * JSON payload to the lambda function.
     */
    readonly input: pulumi.Output<string>;
    /**
     * Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
     */
    readonly qualifier: pulumi.Output<string | undefined>;
    /**
     * String result of the lambda function invocation.
     */
    readonly result: pulumi.Output<string>;
    readonly triggers: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Create a Invocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InvocationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Invocation resources.
 */
export interface InvocationState {
    /**
     * Name of the lambda function.
     */
    functionName?: pulumi.Input<string>;
    /**
     * JSON payload to the lambda function.
     */
    input?: pulumi.Input<string>;
    /**
     * Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
     */
    qualifier?: pulumi.Input<string>;
    /**
     * String result of the lambda function invocation.
     */
    result?: pulumi.Input<string>;
    triggers?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
/**
 * The set of arguments for constructing a Invocation resource.
 */
export interface InvocationArgs {
    /**
     * Name of the lambda function.
     */
    functionName: pulumi.Input<string>;
    /**
     * JSON payload to the lambda function.
     */
    input: pulumi.Input<string>;
    /**
     * Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
     */
    qualifier?: pulumi.Input<string>;
    triggers?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
