"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Budget = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a budgets budget resource. Budgets use the cost visualisation provided by Cost Explorer to show you the status of your budgets, to provide forecasts of your estimated costs, and to track your AWS usage, including your free tier usage.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ec2 = new aws.budgets.Budget("ec2", {
 *     budgetType: "COST",
 *     costFilters: [{
 *         name: "Service",
 *         values: ["Amazon Elastic Compute Cloud - Compute"],
 *     }],
 *     limitAmount: "1200",
 *     limitUnit: "USD",
 *     notifications: [{
 *         comparisonOperator: "GREATER_THAN",
 *         notificationType: "FORECASTED",
 *         subscriberEmailAddresses: ["test@example.com"],
 *         threshold: 100,
 *         thresholdType: "PERCENTAGE",
 *     }],
 *     timePeriodEnd: "2087-06-15_00:00",
 *     timePeriodStart: "2017-07-01_00:00",
 *     timeUnit: "MONTHLY",
 * });
 * ```
 *
 * Create a budget for *$100*.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cost = new aws.budgets.Budget("cost", {
 *     // ...
 *     budgetType: "COST",
 *     limitAmount: "100",
 *     limitUnit: "USD",
 * });
 * ```
 *
 * Create a budget for s3 with a limit of *3 GB* of storage.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const s3 = new aws.budgets.Budget("s3", {
 *     // ...
 *     budgetType: "USAGE",
 *     limitAmount: "3",
 *     limitUnit: "GB",
 * });
 * ```
 *
 * Create a Savings Plan Utilization Budget
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const savingsPlanUtilization = new aws.budgets.Budget("savings_plan_utilization", {
 *     // ...
 *     budgetType: "SAVINGS_PLANS_UTILIZATION",
 *     costTypes: {
 *         includeCredit: false,
 *         includeDiscount: false,
 *         includeOtherSubscription: false,
 *         includeRecurring: false,
 *         includeRefund: false,
 *         includeSubscription: true,
 *         includeSupport: false,
 *         includeTax: false,
 *         includeUpfront: false,
 *         useBlended: false,
 *     },
 *     limitAmount: "100.0",
 *     limitUnit: "PERCENTAGE",
 * });
 * ```
 *
 * Create a RI Utilization Budget
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const riUtilization = new aws.budgets.Budget("ri_utilization", {
 *     // ...
 *     budgetType: "RI_UTILIZATION",
 *     // RI Utilization plans require a service cost filter to be set
 *     costFilters: [{
 *         name: "Service",
 *         values: ["Amazon Relational Database Service"],
 *     }],
 *     //Cost types must be defined for RI budgets because the settings conflict with the defaults
 *     costTypes: {
 *         includeCredit: false,
 *         includeDiscount: false,
 *         includeOtherSubscription: false,
 *         includeRecurring: false,
 *         includeRefund: false,
 *         includeSubscription: true,
 *         includeSupport: false,
 *         includeTax: false,
 *         includeUpfront: false,
 *         useBlended: false,
 *     },
 *     limitAmount: "100.0", // RI utilization must be 100
 *     limitUnit: "PERCENTAGE",
 * });
 * ```
 *
 * ## Import
 *
 * Budgets can be imported using `AccountID:BudgetName`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:budgets/budget:Budget myBudget 123456789012:myBudget`
 * ```
 */
class Budget extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["budgetType"] = state ? state.budgetType : undefined;
            resourceInputs["costFilterLegacy"] = state ? state.costFilterLegacy : undefined;
            resourceInputs["costFilters"] = state ? state.costFilters : undefined;
            resourceInputs["costTypes"] = state ? state.costTypes : undefined;
            resourceInputs["limitAmount"] = state ? state.limitAmount : undefined;
            resourceInputs["limitUnit"] = state ? state.limitUnit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["timePeriodEnd"] = state ? state.timePeriodEnd : undefined;
            resourceInputs["timePeriodStart"] = state ? state.timePeriodStart : undefined;
            resourceInputs["timeUnit"] = state ? state.timeUnit : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.budgetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'budgetType'");
            }
            if ((!args || args.limitAmount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'limitAmount'");
            }
            if ((!args || args.limitUnit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'limitUnit'");
            }
            if ((!args || args.timeUnit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeUnit'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["budgetType"] = args ? args.budgetType : undefined;
            resourceInputs["costFilterLegacy"] = args ? args.costFilterLegacy : undefined;
            resourceInputs["costFilters"] = args ? args.costFilters : undefined;
            resourceInputs["costTypes"] = args ? args.costTypes : undefined;
            resourceInputs["limitAmount"] = args ? args.limitAmount : undefined;
            resourceInputs["limitUnit"] = args ? args.limitUnit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["timePeriodEnd"] = args ? args.timePeriodEnd : undefined;
            resourceInputs["timePeriodStart"] = args ? args.timePeriodStart : undefined;
            resourceInputs["timeUnit"] = args ? args.timeUnit : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Budget.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Budget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Budget(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Budget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Budget.__pulumiType;
    }
}
exports.Budget = Budget;
/** @internal */
Budget.__pulumiType = 'aws:budgets/budget:Budget';
//# sourceMappingURL=budget.js.map