import * as pulumi from "@pulumi/pulumi";
import { PolicyDocument } from "../iam";
/**
 * Allows you to set a policy of an SQS Queue
 * while referencing ARN of the queue within the policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const queue = new aws.sqs.Queue("queue", {});
 * const test = new aws.sqs.QueuePolicy("test", {
 *     queueUrl: queue.id,
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Id": "sqspolicy",
 *   "Statement": [
 *     {
 *       "Sid": "First",
 *       "Effect": "Allow",
 *       "Principal": "*",
 *       "Action": "sqs:SendMessage",
 *       "Resource": "${queue.arn}",
 *       "Condition": {
 *         "ArnEquals": {
 *           "aws:SourceArn": "${aws_sns_topic.example.arn}"
 *         }
 *       }
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * SQS Queue Policies can be imported using the queue URL, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:sqs/queuePolicy:QueuePolicy test https://queue.amazonaws.com/0123456789012/myqueue
 * ```
 */
export declare class QueuePolicy extends pulumi.CustomResource {
    /**
     * Get an existing QueuePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QueuePolicyState, opts?: pulumi.CustomResourceOptions): QueuePolicy;
    /**
     * Returns true if the given object is an instance of QueuePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is QueuePolicy;
    /**
     * The JSON policy for the SQS queue.
     */
    readonly policy: pulumi.Output<string>;
    /**
     * The URL of the SQS Queue to which to attach the policy
     */
    readonly queueUrl: pulumi.Output<string>;
    /**
     * Create a QueuePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QueuePolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering QueuePolicy resources.
 */
export interface QueuePolicyState {
    /**
     * The JSON policy for the SQS queue.
     */
    policy?: pulumi.Input<string | PolicyDocument>;
    /**
     * The URL of the SQS Queue to which to attach the policy
     */
    queueUrl?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a QueuePolicy resource.
 */
export interface QueuePolicyArgs {
    /**
     * The JSON policy for the SQS queue.
     */
    policy: pulumi.Input<string | PolicyDocument>;
    /**
     * The URL of the SQS Queue to which to attach the policy
     */
    queueUrl: pulumi.Input<string>;
}
