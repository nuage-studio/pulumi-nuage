"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueuePolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Allows you to set a policy of an SQS Queue
 * while referencing ARN of the queue within the policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const queue = new aws.sqs.Queue("queue", {});
 * const test = new aws.sqs.QueuePolicy("test", {
 *     queueUrl: queue.id,
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Id": "sqspolicy",
 *   "Statement": [
 *     {
 *       "Sid": "First",
 *       "Effect": "Allow",
 *       "Principal": "*",
 *       "Action": "sqs:SendMessage",
 *       "Resource": "${queue.arn}",
 *       "Condition": {
 *         "ArnEquals": {
 *           "aws:SourceArn": "${aws_sns_topic.example.arn}"
 *         }
 *       }
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * SQS Queue Policies can be imported using the queue URL, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:sqs/queuePolicy:QueuePolicy test https://queue.amazonaws.com/0123456789012/myqueue
 * ```
 */
class QueuePolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["queueUrl"] = state ? state.queueUrl : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.queueUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueUrl'");
            }
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["queueUrl"] = args ? args.queueUrl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QueuePolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing QueuePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new QueuePolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of QueuePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QueuePolicy.__pulumiType;
    }
}
exports.QueuePolicy = QueuePolicy;
/** @internal */
QueuePolicy.__pulumiType = 'aws:sqs/queuePolicy:QueuePolicy';
//# sourceMappingURL=queuePolicy.js.map