"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecorderStatus = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages status (recording / stopped) of an AWS Config Configuration Recorder.
 *
 * > **Note:** Starting Configuration Recorder requires a `Delivery Channel` to be present. Use of `dependsOn` (as shown below) is recommended to avoid race conditions.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucketV2 = new aws.s3.BucketV2("bucketV2", {});
 * const fooDeliveryChannel = new aws.cfg.DeliveryChannel("fooDeliveryChannel", {s3BucketName: bucketV2.bucket});
 * const fooRecorderStatus = new aws.cfg.RecorderStatus("fooRecorderStatus", {isEnabled: true}, {
 *     dependsOn: [fooDeliveryChannel],
 * });
 * const role = new aws.iam.Role("role", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "config.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const rolePolicyAttachment = new aws.iam.RolePolicyAttachment("rolePolicyAttachment", {
 *     role: role.name,
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AWSConfigRole",
 * });
 * const fooRecorder = new aws.cfg.Recorder("fooRecorder", {roleArn: role.arn});
 * const rolePolicy = new aws.iam.RolePolicy("rolePolicy", {
 *     role: role.id,
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "s3:*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "${bucketV2.arn}",
 *         "${bucketV2.arn}/*"
 *       ]
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Configuration Recorder Status can be imported using the name of the Configuration Recorder, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cfg/recorderStatus:RecorderStatus foo example
 * ```
 */
class RecorderStatus extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.isEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isEnabled'");
            }
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecorderStatus.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing RecorderStatus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RecorderStatus(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RecorderStatus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecorderStatus.__pulumiType;
    }
}
exports.RecorderStatus = RecorderStatus;
/** @internal */
RecorderStatus.__pulumiType = 'aws:cfg/recorderStatus:RecorderStatus';
//# sourceMappingURL=recorderStatus.js.map