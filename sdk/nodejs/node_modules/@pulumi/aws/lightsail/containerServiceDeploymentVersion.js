"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerServiceDeploymentVersion = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lightsail.ContainerServiceDeploymentVersion("example", {
 *     containers: [{
 *         containerName: "hello-world",
 *         image: "amazon/amazon-lightsail:hello-world",
 *         commands: [],
 *         environment: {
 *             MY_ENVIRONMENT_VARIABLE: "my_value",
 *         },
 *         ports: {
 *             "80": "HTTP",
 *         },
 *     }],
 *     publicEndpoint: {
 *         containerName: "hello-world",
 *         containerPort: 80,
 *         healthCheck: {
 *             healthyThreshold: 2,
 *             unhealthyThreshold: 2,
 *             timeoutSeconds: 2,
 *             intervalSeconds: 5,
 *             path: "/",
 *             successCodes: "200-499",
 *         },
 *     },
 *     serviceName: aws_lightsail_container_service.example.name,
 * });
 * ```
 *
 * ## Import
 *
 * Lightsail Container Service Deployment Version can be imported using the `service_name` and `version` separated by a slash (`/`), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:lightsail/containerServiceDeploymentVersion:ContainerServiceDeploymentVersion example container-service-1/1
 * ```
 */
class ContainerServiceDeploymentVersion extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["containers"] = state ? state.containers : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["publicEndpoint"] = state ? state.publicEndpoint : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.containers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containers'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["containers"] = args ? args.containers : undefined;
            resourceInputs["publicEndpoint"] = args ? args.publicEndpoint : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerServiceDeploymentVersion.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ContainerServiceDeploymentVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ContainerServiceDeploymentVersion(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ContainerServiceDeploymentVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerServiceDeploymentVersion.__pulumiType;
    }
}
exports.ContainerServiceDeploymentVersion = ContainerServiceDeploymentVersion;
/** @internal */
ContainerServiceDeploymentVersion.__pulumiType = 'aws:lightsail/containerServiceDeploymentVersion:ContainerServiceDeploymentVersion';
//# sourceMappingURL=containerServiceDeploymentVersion.js.map