import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages an EMR Containers (EMR on EKS) Virtual Cluster.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.emrcontainers.VirtualCluster("example", {containerProvider: {
 *     id: aws_eks_cluster.example.name,
 *     type: "EKS",
 *     info: {
 *         eksInfo: {
 *             namespace: "default",
 *         },
 *     },
 * }});
 * ```
 *
 * ## Import
 *
 * EKS Clusters can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:emrcontainers/virtualCluster:VirtualCluster example
 * ```
 */
export declare class VirtualCluster extends pulumi.CustomResource {
    /**
     * Get an existing VirtualCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualClusterState, opts?: pulumi.CustomResourceOptions): VirtualCluster;
    /**
     * Returns true if the given object is an instance of VirtualCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is VirtualCluster;
    /**
     * ARN of the cluster.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Configuration block for the container provider associated with your cluster.
     */
    readonly containerProvider: pulumi.Output<outputs.emrcontainers.VirtualClusterContainerProvider>;
    /**
     * Name of the virtual cluster.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Create a VirtualCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualClusterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering VirtualCluster resources.
 */
export interface VirtualClusterState {
    /**
     * ARN of the cluster.
     */
    arn?: pulumi.Input<string>;
    /**
     * Configuration block for the container provider associated with your cluster.
     */
    containerProvider?: pulumi.Input<inputs.emrcontainers.VirtualClusterContainerProvider>;
    /**
     * Name of the virtual cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
/**
 * The set of arguments for constructing a VirtualCluster resource.
 */
export interface VirtualClusterArgs {
    /**
     * Configuration block for the container provider associated with your cluster.
     */
    containerProvider: pulumi.Input<inputs.emrcontainers.VirtualClusterContainerProvider>;
    /**
     * Name of the virtual cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
