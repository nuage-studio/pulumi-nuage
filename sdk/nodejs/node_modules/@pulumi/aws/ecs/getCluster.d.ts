import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * The ECS Cluster data source allows access to details of a specific
 * cluster within an AWS ECS service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ecs_mongo = pulumi.output(aws.ecs.getCluster({
 *     clusterName: "ecs-mongo-production",
 * }));
 * ```
 */
export declare function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult>;
/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    /**
     * Name of the ECS Cluster
     */
    clusterName: string;
}
/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    /**
     * ARN of the ECS Cluster
     */
    readonly arn: string;
    readonly clusterName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Number of pending tasks for the ECS Cluster
     */
    readonly pendingTasksCount: number;
    /**
     * The number of registered container instances for the ECS Cluster
     */
    readonly registeredContainerInstancesCount: number;
    /**
     * Number of running tasks for the ECS Cluster
     */
    readonly runningTasksCount: number;
    /**
     * Settings associated with the ECS Cluster.
     */
    readonly settings: outputs.ecs.GetClusterSetting[];
    /**
     * Status of the ECS Cluster
     */
    readonly status: string;
}
export declare function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult>;
/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    /**
     * Name of the ECS Cluster
     */
    clusterName: pulumi.Input<string>;
}
