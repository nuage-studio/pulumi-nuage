import * as pulumi from "@pulumi/pulumi";
/**
 * Provides an IoT role alias.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const role = new aws.iam.Role("role", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Principal": {"Service": "credentials.iot.amazonaws.com",
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `});
 * const alias = new aws.iot.RoleAlias("alias", {
 *     alias: "Thermostat-dynamodb-access-role-alias",
 *     roleArn: role.arn,
 * });
 * ```
 *
 * ## Import
 *
 * IOT Role Alias can be imported via the alias, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:iot/roleAlias:RoleAlias example myalias
 * ```
 */
export declare class RoleAlias extends pulumi.CustomResource {
    /**
     * Get an existing RoleAlias resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleAliasState, opts?: pulumi.CustomResourceOptions): RoleAlias;
    /**
     * Returns true if the given object is an instance of RoleAlias.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RoleAlias;
    /**
     * The name of the role alias.
     */
    readonly alias: pulumi.Output<string>;
    /**
     * The ARN assigned by AWS to this role alias.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The duration of the credential, in seconds. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 900 seconds (15 minutes) to 43200 seconds (12 hours).
     */
    readonly credentialDuration: pulumi.Output<number | undefined>;
    /**
     * The identity of the role to which the alias refers.
     */
    readonly roleArn: pulumi.Output<string>;
    /**
     * Create a RoleAlias resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleAliasArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering RoleAlias resources.
 */
export interface RoleAliasState {
    /**
     * The name of the role alias.
     */
    alias?: pulumi.Input<string>;
    /**
     * The ARN assigned by AWS to this role alias.
     */
    arn?: pulumi.Input<string>;
    /**
     * The duration of the credential, in seconds. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 900 seconds (15 minutes) to 43200 seconds (12 hours).
     */
    credentialDuration?: pulumi.Input<number>;
    /**
     * The identity of the role to which the alias refers.
     */
    roleArn?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a RoleAlias resource.
 */
export interface RoleAliasArgs {
    /**
     * The name of the role alias.
     */
    alias: pulumi.Input<string>;
    /**
     * The duration of the credential, in seconds. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 900 seconds (15 minutes) to 43200 seconds (12 hours).
     */
    credentialDuration?: pulumi.Input<number>;
    /**
     * The identity of the role to which the alias refers.
     */
    roleArn: pulumi.Input<string>;
}
