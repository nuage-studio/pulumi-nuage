"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubnetGroup = exports.ParameterGroup = exports.getOrderableDbInstanceOutput = exports.getOrderableDbInstance = exports.getEngineVersionOutput = exports.getEngineVersion = exports.EventSubscription = exports.ClusterSnapshot = exports.ClusterParameterGroup = exports.ClusterInstance = exports.ClusterEndpoint = exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Cluster = null;
exports.ClusterEndpoint = null;
exports.ClusterInstance = null;
exports.ClusterParameterGroup = null;
exports.ClusterSnapshot = null;
exports.EventSubscription = null;
exports.getEngineVersion = null;
exports.getEngineVersionOutput = null;
exports.getOrderableDbInstance = null;
exports.getOrderableDbInstanceOutput = null;
exports.ParameterGroup = null;
exports.SubnetGroup = null;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
utilities.lazyLoad(exports, ["ClusterEndpoint"], () => require("./clusterEndpoint"));
utilities.lazyLoad(exports, ["ClusterInstance"], () => require("./clusterInstance"));
utilities.lazyLoad(exports, ["ClusterParameterGroup"], () => require("./clusterParameterGroup"));
utilities.lazyLoad(exports, ["ClusterSnapshot"], () => require("./clusterSnapshot"));
utilities.lazyLoad(exports, ["EventSubscription"], () => require("./eventSubscription"));
utilities.lazyLoad(exports, ["getEngineVersion", "getEngineVersionOutput"], () => require("./getEngineVersion"));
utilities.lazyLoad(exports, ["getOrderableDbInstance", "getOrderableDbInstanceOutput"], () => require("./getOrderableDbInstance"));
utilities.lazyLoad(exports, ["ParameterGroup"], () => require("./parameterGroup"));
utilities.lazyLoad(exports, ["SubnetGroup"], () => require("./subnetGroup"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:neptune/cluster:Cluster":
                return new exports.Cluster(name, undefined, { urn });
            case "aws:neptune/clusterEndpoint:ClusterEndpoint":
                return new exports.ClusterEndpoint(name, undefined, { urn });
            case "aws:neptune/clusterInstance:ClusterInstance":
                return new exports.ClusterInstance(name, undefined, { urn });
            case "aws:neptune/clusterParameterGroup:ClusterParameterGroup":
                return new exports.ClusterParameterGroup(name, undefined, { urn });
            case "aws:neptune/clusterSnapshot:ClusterSnapshot":
                return new exports.ClusterSnapshot(name, undefined, { urn });
            case "aws:neptune/eventSubscription:EventSubscription":
                return new exports.EventSubscription(name, undefined, { urn });
            case "aws:neptune/parameterGroup:ParameterGroup":
                return new exports.ParameterGroup(name, undefined, { urn });
            case "aws:neptune/subnetGroup:SubnetGroup":
                return new exports.SubnetGroup(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "neptune/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/clusterEndpoint", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/clusterInstance", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/clusterParameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/clusterSnapshot", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/eventSubscription", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/parameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "neptune/subnetGroup", _module);
//# sourceMappingURL=index.js.map