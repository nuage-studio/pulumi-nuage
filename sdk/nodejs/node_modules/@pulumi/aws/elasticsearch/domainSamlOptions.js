"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainSamlOptions = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages SAML authentication options for an AWS Elasticsearch Domain.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const exampleDomain = new aws.elasticsearch.Domain("exampleDomain", {
 *     elasticsearchVersion: "1.5",
 *     clusterConfig: {
 *         instanceType: "r4.large.elasticsearch",
 *     },
 *     snapshotOptions: {
 *         automatedSnapshotStartHour: 23,
 *     },
 *     tags: {
 *         Domain: "TestDomain",
 *     },
 * });
 * const exampleDomainSamlOptions = new aws.elasticsearch.DomainSamlOptions("exampleDomainSamlOptions", {
 *     domainName: exampleDomain.domainName,
 *     samlOptions: {
 *         enabled: true,
 *         idp: {
 *             entityId: "https://example.com",
 *             metadataContent: fs.readFileSync("./saml-metadata.xml"),
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Elasticsearch domains can be imported using the `domain_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:elasticsearch/domainSamlOptions:DomainSamlOptions example domain_name
 * ```
 */
class DomainSamlOptions extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["samlOptions"] = state ? state.samlOptions : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["samlOptions"] = args ? args.samlOptions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainSamlOptions.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DomainSamlOptions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DomainSamlOptions(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DomainSamlOptions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainSamlOptions.__pulumiType;
    }
}
exports.DomainSamlOptions = DomainSamlOptions;
/** @internal */
DomainSamlOptions.__pulumiType = 'aws:elasticsearch/domainSamlOptions:DomainSamlOptions';
//# sourceMappingURL=domainSamlOptions.js.map