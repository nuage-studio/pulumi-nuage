"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * This resource manages a User resource within an Identity Store.
 *
 * > **Note:** If you use an external identity provider or Active Directory as your identity source,
 * use this resource with caution. IAM Identity Center does not support outbound synchronization,
 * so your identity source does not automatically update with the changes that you make to
 * users using this resource.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * An Identity Store User can be imported using the combination `identity_store_id/user_id`. For example
 *
 * ```sh
 *  $ pulumi import aws:identitystore/user:User example d-9c6705e95c/065212b4-9061-703b-5876-13a517ae2a7c
 * ```
 */
class User extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["addresses"] = state ? state.addresses : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["emails"] = state ? state.emails : undefined;
            resourceInputs["externalIds"] = state ? state.externalIds : undefined;
            resourceInputs["identityStoreId"] = state ? state.identityStoreId : undefined;
            resourceInputs["locale"] = state ? state.locale : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nickname"] = state ? state.nickname : undefined;
            resourceInputs["phoneNumbers"] = state ? state.phoneNumbers : undefined;
            resourceInputs["preferredLanguage"] = state ? state.preferredLanguage : undefined;
            resourceInputs["profileUrl"] = state ? state.profileUrl : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.identityStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityStoreId'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["addresses"] = args ? args.addresses : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["emails"] = args ? args.emails : undefined;
            resourceInputs["identityStoreId"] = args ? args.identityStoreId : undefined;
            resourceInputs["locale"] = args ? args.locale : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nickname"] = args ? args.nickname : undefined;
            resourceInputs["phoneNumbers"] = args ? args.phoneNumbers : undefined;
            resourceInputs["preferredLanguage"] = args ? args.preferredLanguage : undefined;
            resourceInputs["profileUrl"] = args ? args.profileUrl : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userType"] = args ? args.userType : undefined;
            resourceInputs["externalIds"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new User(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }
}
exports.User = User;
/** @internal */
User.__pulumiType = 'aws:identitystore/user:User';
//# sourceMappingURL=user.js.map