"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LfTag = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates an LF-Tag with the specified name and values. Each key must have at least one value. The maximum number of values permitted is 15.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lakeformation.LfTag("example", {
 *     key: "module",
 *     values: [
 *         "Orders",
 *         "Sales",
 *         "Customers",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Lake Formation LF-Tags can be imported using the `catalog_id:key`. If you have not set a Catalog ID specify the AWS Account ID that the database is in, e.g.
 *
 * ```sh
 *  $ pulumi import aws:lakeformation/lfTag:LfTag example 123456789012:some_key
 * ```
 */
class LfTag extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.values === undefined) && !opts.urn) {
                throw new Error("Missing required property 'values'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LfTag.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing LfTag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LfTag(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LfTag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LfTag.__pulumiType;
    }
}
exports.LfTag = LfTag;
/** @internal */
LfTag.__pulumiType = 'aws:lakeformation/lfTag:LfTag';
//# sourceMappingURL=lfTag.js.map