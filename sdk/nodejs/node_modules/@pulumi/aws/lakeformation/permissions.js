"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Permissions = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 * ### Grant Permissions For A Lake Formation S3 Resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lakeformation.Permissions("example", {
 *     principal: aws_iam_role.workflow_role.arn,
 *     permissions: ["ALL"],
 *     dataLocation: {
 *         arn: aws_lakeformation_resource.example.arn,
 *     },
 * });
 * ```
 * ### Grant Permissions For A Glue Catalog Database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lakeformation.Permissions("example", {
 *     principal: aws_iam_role.workflow_role.arn,
 *     permissions: [
 *         "CREATE_TABLE",
 *         "ALTER",
 *         "DROP",
 *     ],
 *     database: {
 *         name: aws_glue_catalog_database.example.name,
 *         catalogId: "110376042874",
 *     },
 * });
 * ```
 * ### Grant Permissions Using Tag-Based Access Control
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.lakeformation.Permissions("test", {
 *     principal: aws_iam_role.sales_role.arn,
 *     permissions: [
 *         "CREATE_TABLE",
 *         "ALTER",
 *         "DROP",
 *     ],
 *     lfTagPolicy: {
 *         resourceType: "DATABASE",
 *         expressions: [
 *             {
 *                 key: "Team",
 *                 values: ["Sales"],
 *             },
 *             {
 *                 key: "Environment",
 *                 values: [
 *                     "Dev",
 *                     "Production",
 *                 ],
 *             },
 *         ],
 *     },
 * });
 * ```
 */
class Permissions extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["catalogResource"] = state ? state.catalogResource : undefined;
            resourceInputs["dataLocation"] = state ? state.dataLocation : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["lfTag"] = state ? state.lfTag : undefined;
            resourceInputs["lfTagPolicy"] = state ? state.lfTagPolicy : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["permissionsWithGrantOptions"] = state ? state.permissionsWithGrantOptions : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
            resourceInputs["tableWithColumns"] = state ? state.tableWithColumns : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["catalogResource"] = args ? args.catalogResource : undefined;
            resourceInputs["dataLocation"] = args ? args.dataLocation : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["lfTag"] = args ? args.lfTag : undefined;
            resourceInputs["lfTagPolicy"] = args ? args.lfTagPolicy : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["permissionsWithGrantOptions"] = args ? args.permissionsWithGrantOptions : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["table"] = args ? args.table : undefined;
            resourceInputs["tableWithColumns"] = args ? args.tableWithColumns : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Permissions.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Permissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Permissions(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Permissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permissions.__pulumiType;
    }
}
exports.Permissions = Permissions;
/** @internal */
Permissions.__pulumiType = 'aws:lakeformation/permissions:Permissions';
//# sourceMappingURL=permissions.js.map