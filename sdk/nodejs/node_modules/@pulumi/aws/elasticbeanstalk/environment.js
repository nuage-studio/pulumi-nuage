"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Environment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic Beanstalk Environment Resource. Elastic Beanstalk allows
 * you to deploy and manage applications in the AWS cloud without worrying about
 * the infrastructure that runs those applications.
 *
 * Environments are often things such as `development`, `integration`, or
 * `production`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const tftest = new aws.elasticbeanstalk.Application("tftest", {description: "tf-test-desc"});
 * const tfenvtest = new aws.elasticbeanstalk.Environment("tfenvtest", {
 *     application: tftest.name,
 *     solutionStackName: "64bit Amazon Linux 2015.03 v2.0.3 running Go 1.4",
 * });
 * ```
 * ## Option Settings
 *
 * Some options can be stack-specific, check [AWS Docs](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html)
 * for supported options and examples.
 *
 * The `setting` and `allSettings` mappings support the following format:
 *
 * * `namespace` - unique namespace identifying the option's associated AWS resource
 * * `name` - name of the configuration option
 * * `value` - value for the configuration option
 * * `resource` - (Optional) resource name for [scheduled action](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html#command-options-general-autoscalingscheduledaction)
 *
 * ### Example With Options
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const tftest = new aws.elasticbeanstalk.Application("tftest", {description: "tf-test-desc"});
 * const tfenvtest = new aws.elasticbeanstalk.Environment("tfenvtest", {
 *     application: tftest.name,
 *     solutionStackName: "64bit Amazon Linux 2015.03 v2.0.3 running Go 1.4",
 *     settings: [
 *         {
 *             namespace: "aws:ec2:vpc",
 *             name: "VPCId",
 *             value: "vpc-xxxxxxxx",
 *         },
 *         {
 *             namespace: "aws:ec2:vpc",
 *             name: "Subnets",
 *             value: "subnet-xxxxxxxx",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Elastic Beanstalk Environments can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:elasticbeanstalk/environment:Environment prodenv e-rpqsewtp2j
 * ```
 */
class Environment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allSettings"] = state ? state.allSettings : undefined;
            resourceInputs["application"] = state ? state.application : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoscalingGroups"] = state ? state.autoscalingGroups : undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["cnamePrefix"] = state ? state.cnamePrefix : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endpointUrl"] = state ? state.endpointUrl : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["launchConfigurations"] = state ? state.launchConfigurations : undefined;
            resourceInputs["loadBalancers"] = state ? state.loadBalancers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platformArn"] = state ? state.platformArn : undefined;
            resourceInputs["pollInterval"] = state ? state.pollInterval : undefined;
            resourceInputs["queues"] = state ? state.queues : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["solutionStackName"] = state ? state.solutionStackName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["waitForReadyTimeout"] = state ? state.waitForReadyTimeout : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.application === undefined) && !opts.urn) {
                throw new Error("Missing required property 'application'");
            }
            resourceInputs["application"] = args ? args.application : undefined;
            resourceInputs["cnamePrefix"] = args ? args.cnamePrefix : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platformArn"] = args ? args.platformArn : undefined;
            resourceInputs["pollInterval"] = args ? args.pollInterval : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["solutionStackName"] = args ? args.solutionStackName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["waitForReadyTimeout"] = args ? args.waitForReadyTimeout : undefined;
            resourceInputs["allSettings"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["autoscalingGroups"] = undefined /*out*/;
            resourceInputs["cname"] = undefined /*out*/;
            resourceInputs["endpointUrl"] = undefined /*out*/;
            resourceInputs["instances"] = undefined /*out*/;
            resourceInputs["launchConfigurations"] = undefined /*out*/;
            resourceInputs["loadBalancers"] = undefined /*out*/;
            resourceInputs["queues"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Environment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Environment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }
}
exports.Environment = Environment;
/** @internal */
Environment.__pulumiType = 'aws:elasticbeanstalk/environment:Environment';
//# sourceMappingURL=environment.js.map