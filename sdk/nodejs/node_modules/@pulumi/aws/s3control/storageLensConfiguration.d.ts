import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides a resource to manage an S3 Storage Lens configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const example = new aws.s3control.StorageLensConfiguration("example", {
 *     configId: "example-1",
 *     storageLensConfiguration: {
 *         enabled: true,
 *         accountLevel: {
 *             activityMetrics: {
 *                 enabled: true,
 *             },
 *             bucketLevel: {
 *                 activityMetrics: {
 *                     enabled: true,
 *                 },
 *             },
 *         },
 *         dataExport: {
 *             cloudWatchMetrics: {
 *                 enabled: true,
 *             },
 *             s3BucketDestination: {
 *                 accountId: current.then(current => current.accountId),
 *                 arn: aws_s3_bucket.target.arn,
 *                 format: "CSV",
 *                 outputSchemaVersion: "V_1",
 *                 encryption: {
 *                     sseS3s: [{}],
 *                 },
 *             },
 *         },
 *         exclude: {
 *             buckets: [
 *                 aws_s3_bucket.b1.arn,
 *                 aws_s3_bucket.b2.arn,
 *             ],
 *             regions: ["us-east-2"],
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * S3 Storage Lens configurations can be imported using the `account_id` and `config_id`, separated by a colon (`:`), e.g.
 *
 * ```sh
 *  $ pulumi import aws:s3control/storageLensConfiguration:StorageLensConfiguration example 123456789012:example-1
 * ```
 */
export declare class StorageLensConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing StorageLensConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageLensConfigurationState, opts?: pulumi.CustomResourceOptions): StorageLensConfiguration;
    /**
     * Returns true if the given object is an instance of StorageLensConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is StorageLensConfiguration;
    /**
     * The account ID of the owner of the S3 Storage Lens metrics export bucket.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the bucket.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The ID of the S3 Storage Lens configuration.
     */
    readonly configId: pulumi.Output<string>;
    /**
     * The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
     */
    readonly storageLensConfiguration: pulumi.Output<outputs.s3control.StorageLensConfigurationStorageLensConfiguration>;
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Create a StorageLensConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageLensConfigurationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering StorageLensConfiguration resources.
 */
export interface StorageLensConfigurationState {
    /**
     * The account ID of the owner of the S3 Storage Lens metrics export bucket.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the bucket.
     */
    arn?: pulumi.Input<string>;
    /**
     * The ID of the S3 Storage Lens configuration.
     */
    configId?: pulumi.Input<string>;
    /**
     * The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
     */
    storageLensConfiguration?: pulumi.Input<inputs.s3control.StorageLensConfigurationStorageLensConfiguration>;
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
/**
 * The set of arguments for constructing a StorageLensConfiguration resource.
 */
export interface StorageLensConfigurationArgs {
    /**
     * The account ID of the owner of the S3 Storage Lens metrics export bucket.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The ID of the S3 Storage Lens configuration.
     */
    configId: pulumi.Input<string>;
    /**
     * The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
     */
    storageLensConfiguration: pulumi.Input<inputs.s3control.StorageLensConfigurationStorageLensConfiguration>;
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
