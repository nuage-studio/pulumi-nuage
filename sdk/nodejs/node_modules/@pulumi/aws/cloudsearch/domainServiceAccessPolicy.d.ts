import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleDomain = new aws.cloudsearch.Domain("exampleDomain", {});
 * const exampleDomainServiceAccessPolicy = new aws.cloudsearch.DomainServiceAccessPolicy("exampleDomainServiceAccessPolicy", {
 *     domainName: exampleDomain.id,
 *     accessPolicy: `{
 *   "Version":"2012-10-17",
 *   "Statement":[{
 *     "Sid":"search_only",
 *     "Effect":"Allow",
 *     "Principal":"*",
 *     "Action":[
 *       "cloudsearch:search",
 *       "cloudsearch:document"
 *     ],
 *     "Condition":{"IpAddress":{"aws:SourceIp":"192.0.2.0/32"}}
 *   }]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * CloudSearch domain service access policies can be imported using the domain name, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cloudsearch/domainServiceAccessPolicy:DomainServiceAccessPolicy example example-domain
 * ```
 */
export declare class DomainServiceAccessPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DomainServiceAccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainServiceAccessPolicyState, opts?: pulumi.CustomResourceOptions): DomainServiceAccessPolicy;
    /**
     * Returns true if the given object is an instance of DomainServiceAccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DomainServiceAccessPolicy;
    /**
     * The access rules you want to configure. These rules replace any existing rules. See the [AWS documentation](https://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html) for details.
     */
    readonly accessPolicy: pulumi.Output<string>;
    /**
     * The CloudSearch domain name the policy applies to.
     */
    readonly domainName: pulumi.Output<string>;
    /**
     * Create a DomainServiceAccessPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainServiceAccessPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering DomainServiceAccessPolicy resources.
 */
export interface DomainServiceAccessPolicyState {
    /**
     * The access rules you want to configure. These rules replace any existing rules. See the [AWS documentation](https://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html) for details.
     */
    accessPolicy?: pulumi.Input<string>;
    /**
     * The CloudSearch domain name the policy applies to.
     */
    domainName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a DomainServiceAccessPolicy resource.
 */
export interface DomainServiceAccessPolicyArgs {
    /**
     * The access rules you want to configure. These rules replace any existing rules. See the [AWS documentation](https://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html) for details.
     */
    accessPolicy: pulumi.Input<string>;
    /**
     * The CloudSearch domain name the policy applies to.
     */
    domainName: pulumi.Input<string>;
}
