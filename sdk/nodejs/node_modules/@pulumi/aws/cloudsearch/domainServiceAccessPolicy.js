"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainServiceAccessPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleDomain = new aws.cloudsearch.Domain("exampleDomain", {});
 * const exampleDomainServiceAccessPolicy = new aws.cloudsearch.DomainServiceAccessPolicy("exampleDomainServiceAccessPolicy", {
 *     domainName: exampleDomain.id,
 *     accessPolicy: `{
 *   "Version":"2012-10-17",
 *   "Statement":[{
 *     "Sid":"search_only",
 *     "Effect":"Allow",
 *     "Principal":"*",
 *     "Action":[
 *       "cloudsearch:search",
 *       "cloudsearch:document"
 *     ],
 *     "Condition":{"IpAddress":{"aws:SourceIp":"192.0.2.0/32"}}
 *   }]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * CloudSearch domain service access policies can be imported using the domain name, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cloudsearch/domainServiceAccessPolicy:DomainServiceAccessPolicy example example-domain
 * ```
 */
class DomainServiceAccessPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessPolicy"] = state ? state.accessPolicy : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accessPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessPolicy'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["accessPolicy"] = args ? args.accessPolicy : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainServiceAccessPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DomainServiceAccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DomainServiceAccessPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DomainServiceAccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainServiceAccessPolicy.__pulumiType;
    }
}
exports.DomainServiceAccessPolicy = DomainServiceAccessPolicy;
/** @internal */
DomainServiceAccessPolicy.__pulumiType = 'aws:cloudsearch/domainServiceAccessPolicy:DomainServiceAccessPolicy';
//# sourceMappingURL=domainServiceAccessPolicy.js.map