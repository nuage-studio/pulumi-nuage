"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplicationGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an ElastiCache Replication Group resource.
 *
 * For working with a [Memcached cluster](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/WhatIs.html) or a
 * [single-node Redis instance (Cluster Mode Disabled)](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/WhatIs.html),
 * see the `aws.elasticache.Cluster` resource.
 *
 * > **Note:** When you change an attribute, such as `engineVersion`, by
 * default the ElastiCache API applies it in the next maintenance window. Because
 * of this, this provider may report a difference in its planning phase because the
 * actual modification has not yet taken place. You can use the
 * `applyImmediately` flag to instruct the service to apply the change
 * immediately. Using `applyImmediately` can result in a brief downtime as
 * servers reboots.
 * See the AWS Documentation on
 * [Modifying an ElastiCache Cache Cluster](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Modify.html)
 * for more information.
 *
 * > **Note:** Any attribute changes that re-create the resource will be applied immediately, regardless of the value of `applyImmediately`.
 *
 * > **Note:** Be aware of the terminology collision around "cluster" for `aws.elasticache.ReplicationGroup`. For example, it is possible to create a ["Cluster Mode Disabled [Redis] Cluster"](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Create.CON.Redis.html). With "Cluster Mode Enabled", the data will be stored in shards (called "node groups"). See [Redis Cluster Configuration](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/cluster-create-determine-requirements.html#redis-cluster-configuration) for a diagram of the differences. To enable cluster mode, use a parameter group that has cluster mode enabled. The default parameter groups provided by AWS end with ".cluster.on", for example `default.redis6.x.cluster.on`.
 *
 * ## Example Usage
 * ### Redis Cluster Mode Disabled
 *
 * To create a single shard primary with single read replica:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.elasticache.ReplicationGroup("example", {
 *     automaticFailoverEnabled: true,
 *     description: "example description",
 *     nodeType: "cache.m4.large",
 *     numCacheClusters: 2,
 *     parameterGroupName: "default.redis3.2",
 *     port: 6379,
 *     preferredCacheClusterAzs: [
 *         "us-west-2a",
 *         "us-west-2b",
 *     ],
 * });
 * ```
 *
 * You have two options for adjusting the number of replicas:
 *
 * * Adjusting `numberCacheClusters` directly. This will attempt to automatically add or remove replicas, but provides no granular control (e.g. preferred availability zone, cache cluster ID) for the added or removed replicas. This also currently expects cache cluster IDs in the form of `replication_group_id-00#`.
 * * Otherwise for fine grained control of the underlying cache clusters, they can be added or removed with the `aws.elasticache.Cluster` resource and its `replicationGroupId` attribute. In this situation, you will need to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to prevent perpetual differences with the `numberCacheCluster` attribute.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.elasticache.ReplicationGroup("example", {
 *     automaticFailoverEnabled: true,
 *     preferredCacheClusterAzs: [
 *         "us-west-2a",
 *         "us-west-2b",
 *     ],
 *     description: "example description",
 *     nodeType: "cache.m4.large",
 *     numCacheClusters: 2,
 *     parameterGroupName: "default.redis3.2",
 *     port: 6379,
 * });
 * let replica: aws.elasticache.Cluster | undefined;
 * if (1 == true) {
 *     replica = new aws.elasticache.Cluster("replica", {replicationGroupId: example.id});
 * }
 * ```
 * ### Redis Cluster Mode Enabled
 *
 * To create two shards with a primary and a single read replica each:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const baz = new aws.elasticache.ReplicationGroup("baz", {
 *     automaticFailoverEnabled: true,
 *     description: "example description",
 *     nodeType: "cache.t2.small",
 *     numNodeGroups: 2,
 *     parameterGroupName: "default.redis3.2.cluster.on",
 *     port: 6379,
 *     replicasPerNodeGroup: 1,
 * });
 * ```
 * ### Redis Log Delivery configuration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.elasticache.ReplicationGroup("test", {
 *     description: "test description",
 *     nodeType: "cache.t3.small",
 *     port: 6379,
 *     applyImmediately: true,
 *     autoMinorVersionUpgrade: false,
 *     maintenanceWindow: "tue:06:30-tue:07:30",
 *     snapshotWindow: "01:00-02:00",
 *     logDeliveryConfigurations: [
 *         {
 *             destination: aws_cloudwatch_log_group.example.name,
 *             destinationType: "cloudwatch-logs",
 *             logFormat: "text",
 *             logType: "slow-log",
 *         },
 *         {
 *             destination: aws_kinesis_firehose_delivery_stream.example.name,
 *             destinationType: "kinesis-firehose",
 *             logFormat: "json",
 *             logType: "engine-log",
 *         },
 *     ],
 * });
 * ```
 *
 * > **Note:** We currently do not support passing a `primaryClusterId` in order to create the Replication Group.
 *
 * > **Note:** Automatic Failover is unavailable for Redis versions earlier than 2.8.6,
 * and unavailable on T1 node types. For T2 node types, it is only available on Redis version 3.2.4 or later with cluster mode enabled. See the [High Availability Using Replication Groups](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Replication.html) guide
 * for full details on using Replication Groups.
 * ### Creating a secondary replication group for a global replication group
 *
 * A Global Replication Group can have one one two secondary Replication Groups in different regions. These are added to an existing Global Replication Group.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const primary = new aws.elasticache.ReplicationGroup("primary", {
 *     description: "primary replication group",
 *     engine: "redis",
 *     engineVersion: "5.0.6",
 *     nodeType: "cache.m5.large",
 *     numCacheClusters: 1,
 * }, {
 *     provider: aws.other_region,
 * });
 * const example = new aws.elasticache.GlobalReplicationGroup("example", {
 *     globalReplicationGroupIdSuffix: "example",
 *     primaryReplicationGroupId: primary.id,
 * }, {
 *     provider: aws.other_region,
 * });
 * const secondary = new aws.elasticache.ReplicationGroup("secondary", {
 *     description: "secondary replication group",
 *     globalReplicationGroupId: example.globalReplicationGroupId,
 *     numCacheClusters: 1,
 * });
 * ```
 *
 * ## Import
 *
 * ElastiCache Replication Groups can be imported using the `replication_group_id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:elasticache/replicationGroup:ReplicationGroup my_replication_group replication-group-1
 * ```
 */
class ReplicationGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["atRestEncryptionEnabled"] = state ? state.atRestEncryptionEnabled : undefined;
            resourceInputs["authToken"] = state ? state.authToken : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            resourceInputs["automaticFailoverEnabled"] = state ? state.automaticFailoverEnabled : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["clusterEnabled"] = state ? state.clusterEnabled : undefined;
            resourceInputs["clusterMode"] = state ? state.clusterMode : undefined;
            resourceInputs["configurationEndpointAddress"] = state ? state.configurationEndpointAddress : undefined;
            resourceInputs["dataTieringEnabled"] = state ? state.dataTieringEnabled : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["engineVersionActual"] = state ? state.engineVersionActual : undefined;
            resourceInputs["finalSnapshotIdentifier"] = state ? state.finalSnapshotIdentifier : undefined;
            resourceInputs["globalReplicationGroupId"] = state ? state.globalReplicationGroupId : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["logDeliveryConfigurations"] = state ? state.logDeliveryConfigurations : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["memberClusters"] = state ? state.memberClusters : undefined;
            resourceInputs["multiAzEnabled"] = state ? state.multiAzEnabled : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["notificationTopicArn"] = state ? state.notificationTopicArn : undefined;
            resourceInputs["numCacheClusters"] = state ? state.numCacheClusters : undefined;
            resourceInputs["numNodeGroups"] = state ? state.numNodeGroups : undefined;
            resourceInputs["numberCacheClusters"] = state ? state.numberCacheClusters : undefined;
            resourceInputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["preferredCacheClusterAzs"] = state ? state.preferredCacheClusterAzs : undefined;
            resourceInputs["primaryEndpointAddress"] = state ? state.primaryEndpointAddress : undefined;
            resourceInputs["readerEndpointAddress"] = state ? state.readerEndpointAddress : undefined;
            resourceInputs["replicasPerNodeGroup"] = state ? state.replicasPerNodeGroup : undefined;
            resourceInputs["replicationGroupDescription"] = state ? state.replicationGroupDescription : undefined;
            resourceInputs["replicationGroupId"] = state ? state.replicationGroupId : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["securityGroupNames"] = state ? state.securityGroupNames : undefined;
            resourceInputs["snapshotArns"] = state ? state.snapshotArns : undefined;
            resourceInputs["snapshotName"] = state ? state.snapshotName : undefined;
            resourceInputs["snapshotRetentionLimit"] = state ? state.snapshotRetentionLimit : undefined;
            resourceInputs["snapshotWindow"] = state ? state.snapshotWindow : undefined;
            resourceInputs["subnetGroupName"] = state ? state.subnetGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["transitEncryptionEnabled"] = state ? state.transitEncryptionEnabled : undefined;
            resourceInputs["userGroupIds"] = state ? state.userGroupIds : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            resourceInputs["atRestEncryptionEnabled"] = args ? args.atRestEncryptionEnabled : undefined;
            resourceInputs["authToken"] = args ? args.authToken : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            resourceInputs["automaticFailoverEnabled"] = args ? args.automaticFailoverEnabled : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["clusterMode"] = args ? args.clusterMode : undefined;
            resourceInputs["dataTieringEnabled"] = args ? args.dataTieringEnabled : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["finalSnapshotIdentifier"] = args ? args.finalSnapshotIdentifier : undefined;
            resourceInputs["globalReplicationGroupId"] = args ? args.globalReplicationGroupId : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["logDeliveryConfigurations"] = args ? args.logDeliveryConfigurations : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["multiAzEnabled"] = args ? args.multiAzEnabled : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["notificationTopicArn"] = args ? args.notificationTopicArn : undefined;
            resourceInputs["numCacheClusters"] = args ? args.numCacheClusters : undefined;
            resourceInputs["numNodeGroups"] = args ? args.numNodeGroups : undefined;
            resourceInputs["numberCacheClusters"] = args ? args.numberCacheClusters : undefined;
            resourceInputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["preferredCacheClusterAzs"] = args ? args.preferredCacheClusterAzs : undefined;
            resourceInputs["replicasPerNodeGroup"] = args ? args.replicasPerNodeGroup : undefined;
            resourceInputs["replicationGroupDescription"] = args ? args.replicationGroupDescription : undefined;
            resourceInputs["replicationGroupId"] = args ? args.replicationGroupId : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["securityGroupNames"] = args ? args.securityGroupNames : undefined;
            resourceInputs["snapshotArns"] = args ? args.snapshotArns : undefined;
            resourceInputs["snapshotName"] = args ? args.snapshotName : undefined;
            resourceInputs["snapshotRetentionLimit"] = args ? args.snapshotRetentionLimit : undefined;
            resourceInputs["snapshotWindow"] = args ? args.snapshotWindow : undefined;
            resourceInputs["subnetGroupName"] = args ? args.subnetGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transitEncryptionEnabled"] = args ? args.transitEncryptionEnabled : undefined;
            resourceInputs["userGroupIds"] = args ? args.userGroupIds : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["clusterEnabled"] = undefined /*out*/;
            resourceInputs["configurationEndpointAddress"] = undefined /*out*/;
            resourceInputs["engineVersionActual"] = undefined /*out*/;
            resourceInputs["memberClusters"] = undefined /*out*/;
            resourceInputs["primaryEndpointAddress"] = undefined /*out*/;
            resourceInputs["readerEndpointAddress"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReplicationGroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ReplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ReplicationGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicationGroup.__pulumiType;
    }
}
exports.ReplicationGroup = ReplicationGroup;
/** @internal */
ReplicationGroup.__pulumiType = 'aws:elasticache/replicationGroup:ReplicationGroup';
//# sourceMappingURL=replicationGroup.js.map