"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalReplicationGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Import
 *
 * ElastiCache Global Replication Groups can be imported using the `global_replication_group_id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:elasticache/globalReplicationGroup:GlobalReplicationGroup my_global_replication_group okuqm-global-replication-group-1
 * ```
 */
class GlobalReplicationGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["atRestEncryptionEnabled"] = state ? state.atRestEncryptionEnabled : undefined;
            resourceInputs["authTokenEnabled"] = state ? state.authTokenEnabled : undefined;
            resourceInputs["cacheNodeType"] = state ? state.cacheNodeType : undefined;
            resourceInputs["clusterEnabled"] = state ? state.clusterEnabled : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["engineVersionActual"] = state ? state.engineVersionActual : undefined;
            resourceInputs["globalReplicationGroupDescription"] = state ? state.globalReplicationGroupDescription : undefined;
            resourceInputs["globalReplicationGroupId"] = state ? state.globalReplicationGroupId : undefined;
            resourceInputs["globalReplicationGroupIdSuffix"] = state ? state.globalReplicationGroupIdSuffix : undefined;
            resourceInputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            resourceInputs["primaryReplicationGroupId"] = state ? state.primaryReplicationGroupId : undefined;
            resourceInputs["transitEncryptionEnabled"] = state ? state.transitEncryptionEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.globalReplicationGroupIdSuffix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalReplicationGroupIdSuffix'");
            }
            if ((!args || args.primaryReplicationGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryReplicationGroupId'");
            }
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["globalReplicationGroupDescription"] = args ? args.globalReplicationGroupDescription : undefined;
            resourceInputs["globalReplicationGroupIdSuffix"] = args ? args.globalReplicationGroupIdSuffix : undefined;
            resourceInputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            resourceInputs["primaryReplicationGroupId"] = args ? args.primaryReplicationGroupId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["atRestEncryptionEnabled"] = undefined /*out*/;
            resourceInputs["authTokenEnabled"] = undefined /*out*/;
            resourceInputs["cacheNodeType"] = undefined /*out*/;
            resourceInputs["clusterEnabled"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["engineVersionActual"] = undefined /*out*/;
            resourceInputs["globalReplicationGroupId"] = undefined /*out*/;
            resourceInputs["transitEncryptionEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalReplicationGroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing GlobalReplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GlobalReplicationGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GlobalReplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalReplicationGroup.__pulumiType;
    }
}
exports.GlobalReplicationGroup = GlobalReplicationGroup;
/** @internal */
GlobalReplicationGroup.__pulumiType = 'aws:elasticache/globalReplicationGroup:GlobalReplicationGroup';
//# sourceMappingURL=globalReplicationGroup.js.map