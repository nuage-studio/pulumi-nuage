"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Certificate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The ACM certificate resource allows requesting and management of certificates
 * from the Amazon Certificate Manager.
 *
 * ACM certificates can be created in three ways:
 * Amazon-issued, where AWS provides the certificate authority and automatically manages renewal;
 * imported certificates, issued by another certificate authority;
 * and private certificates, issued using an ACM Private Certificate Authority.
 *
 * ## Amazon-Issued Certificates
 *
 * For Amazon-issued certificates, this resource deals with requesting certificates and managing their attributes and life-cycle.
 * This resource does not deal with validation of a certificate but can provide inputs
 * for other resources implementing the validation.
 * It does not wait for a certificate to be issued.
 * Use a `aws.acm.CertificateValidation` resource for this.
 *
 * Most commonly, this resource is used together with `aws.route53.Record` and
 * `aws.acm.CertificateValidation` to request a DNS validated certificate,
 * deploy the required validation records and wait for validation to complete.
 *
 * Domain validation through email is also supported but should be avoided as it requires a manual step outside of this provider.
 *
 * ## Certificates Imported from Other Certificate Authority
 *
 * Imported certificates can be used to make certificates created with an external certificate authority available for AWS services.
 *
 * As they are not managed by AWS, imported certificates are not eligible for automatic renewal.
 * New certificate materials can be supplied to an existing imported certificate to update it in place.
 *
 * ## Private Certificates
 *
 * Private certificates are issued by an ACM Private Cerificate Authority, which can be created using the resource type `aws.acmpca.CertificateAuthority`.
 *
 * Private certificates created using this resource are eligible for managed renewal if they have been exported or associated with another AWS service.
 * See [managed renewal documentation](https://docs.aws.amazon.com/acm/latest/userguide/managed-renewal.html) for more information.
 * By default, a certificate is valid for 395 days and the managed renewal process will start 60 days before expiration.
 * To renew the certificate earlier than 60 days before expiration, configure `earlyRenewalDuration`.
 *
 * ## Example Usage
 * ### Create Certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cert = new aws.acm.Certificate("cert", {
 *     domainName: "example.com",
 *     tags: {
 *         Environment: "test",
 *     },
 *     validationMethod: "DNS",
 * });
 * ```
 * ### Custom Domain Validation Options
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cert = new aws.acm.Certificate("cert", {
 *     domainName: "testing.example.com",
 *     validationMethod: "EMAIL",
 *     validationOptions: [{
 *         domainName: "testing.example.com",
 *         validationDomain: "example.com",
 *     }],
 * });
 * ```
 * ### Existing Certificate Body Import
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as tls from "@pulumi/tls";
 *
 * const examplePrivateKey = new tls.PrivateKey("examplePrivateKey", {algorithm: "RSA"});
 * const exampleSelfSignedCert = new tls.SelfSignedCert("exampleSelfSignedCert", {
 *     keyAlgorithm: "RSA",
 *     privateKeyPem: examplePrivateKey.privateKeyPem,
 *     subjects: [{
 *         commonName: "example.com",
 *         organization: "ACME Examples, Inc",
 *     }],
 *     validityPeriodHours: 12,
 *     allowedUses: [
 *         "key_encipherment",
 *         "digital_signature",
 *         "server_auth",
 *     ],
 * });
 * const cert = new aws.acm.Certificate("cert", {
 *     privateKey: examplePrivateKey.privateKeyPem,
 *     certificateBody: exampleSelfSignedCert.certPem,
 * });
 * ```
 * ### Referencing domainValidationOptions With forEach Based Resources
 *
 * See the `aws.acm.CertificateValidation` resource for a full example of performing DNS validation.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example: aws.route53.Record[];
 * for (const range of Object.entries(.reduce((__obj, dvo) => { ...__obj, [dvo.domainName]: {
 *     name: dvo.resourceRecordName,
 *     record: dvo.resourceRecordValue,
 *     type: dvo.resourceRecordType,
 * } })).map(([k, v]) => {key: k, value: v})) {
 *     example.push(new aws.route53.Record(`example-${range.key}`, {
 *         allowOverwrite: true,
 *         name: range.value.name,
 *         records: [range.value.record],
 *         ttl: 60,
 *         type: aws.route53.recordtype.RecordType[range.value.type],
 *         zoneId: aws_route53_zone.example.zone_id,
 *     }));
 * }
 * ```
 *
 * ## Import
 *
 * Certificates can be imported using their ARN, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:acm/certificate:Certificate cert arn:aws:acm:eu-central-1:123456789012:certificate/7e7a28d2-163f-4b8f-b9cd-822f96c08d6a
 * ```
 */
class Certificate extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificateAuthorityArn"] = state ? state.certificateAuthorityArn : undefined;
            resourceInputs["certificateBody"] = state ? state.certificateBody : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainValidationOptions"] = state ? state.domainValidationOptions : undefined;
            resourceInputs["earlyRenewalDuration"] = state ? state.earlyRenewalDuration : undefined;
            resourceInputs["notAfter"] = state ? state.notAfter : undefined;
            resourceInputs["notBefore"] = state ? state.notBefore : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["pendingRenewal"] = state ? state.pendingRenewal : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["renewalEligibility"] = state ? state.renewalEligibility : undefined;
            resourceInputs["renewalSummaries"] = state ? state.renewalSummaries : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectAlternativeNames"] = state ? state.subjectAlternativeNames : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validationEmails"] = state ? state.validationEmails : undefined;
            resourceInputs["validationMethod"] = state ? state.validationMethod : undefined;
            resourceInputs["validationOptions"] = state ? state.validationOptions : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["certificateAuthorityArn"] = args ? args.certificateAuthorityArn : undefined;
            resourceInputs["certificateBody"] = args ? args.certificateBody : undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["earlyRenewalDuration"] = args ? args.earlyRenewalDuration : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["subjectAlternativeNames"] = args ? args.subjectAlternativeNames : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["validationMethod"] = args ? args.validationMethod : undefined;
            resourceInputs["validationOptions"] = args ? args.validationOptions : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["domainValidationOptions"] = undefined /*out*/;
            resourceInputs["notAfter"] = undefined /*out*/;
            resourceInputs["notBefore"] = undefined /*out*/;
            resourceInputs["pendingRenewal"] = undefined /*out*/;
            resourceInputs["renewalEligibility"] = undefined /*out*/;
            resourceInputs["renewalSummaries"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["validationEmails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Certificate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }
}
exports.Certificate = Certificate;
/** @internal */
Certificate.__pulumiType = 'aws:acm/certificate:Certificate';
//# sourceMappingURL=certificate.js.map