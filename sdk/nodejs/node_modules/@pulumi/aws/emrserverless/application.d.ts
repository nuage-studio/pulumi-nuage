import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages an EMR Serverless Application.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.emrserverless.Application("example", {
 *     releaseLabel: "emr-6.6.0",
 *     type: "hive",
 * });
 * ```
 * ### Initial Capacity Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.emrserverless.Application("example", {
 *     initialCapacities: [{
 *         initialCapacityConfig: {
 *             workerConfiguration: {
 *                 cpu: "2 vCPU",
 *                 memory: "10 GB",
 *             },
 *             workerCount: 1,
 *         },
 *         initialCapacityType: "HiveDriver",
 *     }],
 *     releaseLabel: "emr-6.6.0",
 *     type: "hive",
 * });
 * ```
 * ### Maximum Capacity Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.emrserverless.Application("example", {
 *     maximumCapacity: {
 *         cpu: "2 vCPU",
 *         memory: "10 GB",
 *     },
 *     releaseLabel: "emr-6.6.0",
 *     type: "hive",
 * });
 * ```
 *
 * ## Import
 *
 * EMR Severless applications can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:emrserverless/application:Application example id
 * ```
 */
export declare class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application;
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Application;
    /**
     * ARN of the cluster.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The configuration for an application to automatically start on job submission.
     */
    readonly autoStartConfiguration: pulumi.Output<outputs.emrserverless.ApplicationAutoStartConfiguration>;
    /**
     * The configuration for an application to automatically stop after a certain amount of time being idle.
     */
    readonly autoStopConfiguration: pulumi.Output<outputs.emrserverless.ApplicationAutoStopConfiguration>;
    /**
     * The capacity to initialize when the application is created.
     */
    readonly initialCapacities: pulumi.Output<outputs.emrserverless.ApplicationInitialCapacity[] | undefined>;
    /**
     * The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
     */
    readonly maximumCapacity: pulumi.Output<outputs.emrserverless.ApplicationMaximumCapacity | undefined>;
    /**
     * The name of the application.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The network configuration for customer VPC connectivity.
     */
    readonly networkConfiguration: pulumi.Output<outputs.emrserverless.ApplicationNetworkConfiguration | undefined>;
    /**
     * The EMR release version associated with the application.
     */
    readonly releaseLabel: pulumi.Output<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * The type of application you want to start, such as `spark` or `hive`.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    /**
     * ARN of the cluster.
     */
    arn?: pulumi.Input<string>;
    /**
     * The configuration for an application to automatically start on job submission.
     */
    autoStartConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationAutoStartConfiguration>;
    /**
     * The configuration for an application to automatically stop after a certain amount of time being idle.
     */
    autoStopConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationAutoStopConfiguration>;
    /**
     * The capacity to initialize when the application is created.
     */
    initialCapacities?: pulumi.Input<pulumi.Input<inputs.emrserverless.ApplicationInitialCapacity>[]>;
    /**
     * The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
     */
    maximumCapacity?: pulumi.Input<inputs.emrserverless.ApplicationMaximumCapacity>;
    /**
     * The name of the application.
     */
    name?: pulumi.Input<string>;
    /**
     * The network configuration for customer VPC connectivity.
     */
    networkConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationNetworkConfiguration>;
    /**
     * The EMR release version associated with the application.
     */
    releaseLabel?: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The type of application you want to start, such as `spark` or `hive`.
     */
    type?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * The configuration for an application to automatically start on job submission.
     */
    autoStartConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationAutoStartConfiguration>;
    /**
     * The configuration for an application to automatically stop after a certain amount of time being idle.
     */
    autoStopConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationAutoStopConfiguration>;
    /**
     * The capacity to initialize when the application is created.
     */
    initialCapacities?: pulumi.Input<pulumi.Input<inputs.emrserverless.ApplicationInitialCapacity>[]>;
    /**
     * The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
     */
    maximumCapacity?: pulumi.Input<inputs.emrserverless.ApplicationMaximumCapacity>;
    /**
     * The name of the application.
     */
    name?: pulumi.Input<string>;
    /**
     * The network configuration for customer VPC connectivity.
     */
    networkConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationNetworkConfiguration>;
    /**
     * The EMR release version associated with the application.
     */
    releaseLabel: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The type of application you want to start, such as `spark` or `hive`.
     */
    type: pulumi.Input<string>;
}
