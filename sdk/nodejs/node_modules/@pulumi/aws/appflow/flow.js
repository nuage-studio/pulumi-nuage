"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Flow = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AppFlow flow resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleSourceBucketV2 = new aws.s3.BucketV2("exampleSourceBucketV2", {});
 * const exampleSourceBucketPolicy = new aws.s3.BucketPolicy("exampleSourceBucketPolicy", {
 *     bucket: exampleSourceBucketV2.id,
 *     policy: `{
 *     "Statement": [
 *         {
 *             "Effect": "Allow",
 *             "Sid": "AllowAppFlowSourceActions",
 *             "Principal": {
 *                 "Service": "appflow.amazonaws.com"
 *             },
 *             "Action": [
 *                 "s3:ListBucket",
 *                 "s3:GetObject"
 *             ],
 *             "Resource": [
 *                 "arn:aws:s3:::example_source",
 *                 "arn:aws:s3:::example_source/*"
 *             ]
 *         }
 *     ],
 * 	"Version": "2012-10-17"
 * }
 * `,
 * });
 * const exampleBucketObjectv2 = new aws.s3.BucketObjectv2("exampleBucketObjectv2", {
 *     bucket: exampleSourceBucketV2.id,
 *     key: "example_source.csv",
 *     source: new pulumi.asset.FileAsset("example_source.csv"),
 * });
 * const exampleDestinationBucketV2 = new aws.s3.BucketV2("exampleDestinationBucketV2", {});
 * const exampleDestinationBucketPolicy = new aws.s3.BucketPolicy("exampleDestinationBucketPolicy", {
 *     bucket: exampleDestinationBucketV2.id,
 *     policy: `
 * {
 *     "Statement": [
 *         {
 *             "Effect": "Allow",
 *             "Sid": "AllowAppFlowDestinationActions",
 *             "Principal": {
 *                 "Service": "appflow.amazonaws.com"
 *             },
 *             "Action": [
 *                 "s3:PutObject",
 *                 "s3:AbortMultipartUpload",
 *                 "s3:ListMultipartUploadParts",
 *                 "s3:ListBucketMultipartUploads",
 *                 "s3:GetBucketAcl",
 *                 "s3:PutObjectAcl"
 *             ],
 *             "Resource": [
 *                 "arn:aws:s3:::example_destination",
 *                 "arn:aws:s3:::example_destination/*"
 *             ]
 *         }
 *     ],
 * 	"Version": "2012-10-17"
 * }
 * `,
 * });
 * const exampleFlow = new aws.appflow.Flow("exampleFlow", {
 *     sourceFlowConfig: {
 *         connectorType: "S3",
 *         sourceConnectorProperties: {
 *             s3: {
 *                 bucketName: exampleSourceBucketPolicy.bucket,
 *                 bucketPrefix: "example",
 *             },
 *         },
 *     },
 *     destinationFlowConfigs: [{
 *         connectorType: "S3",
 *         destinationConnectorProperties: {
 *             s3: {
 *                 bucketName: exampleDestinationBucketPolicy.bucket,
 *                 s3OutputFormatConfig: {
 *                     prefixConfig: {
 *                         prefixType: "PATH",
 *                     },
 *                 },
 *             },
 *         },
 *     }],
 *     tasks: [{
 *         sourceFields: ["exampleField"],
 *         destinationField: "exampleField",
 *         taskType: "Map",
 *         connectorOperators: [{
 *             s3: "NO_OP",
 *         }],
 *     }],
 *     triggerConfig: {
 *         triggerType: "OnDemand",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * AppFlow flows can be imported using the `arn`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:appflow/flow:Flow example arn:aws:appflow:us-west-2:123456789012:flow/example-flow
 * ```
 */
class Flow extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationFlowConfigs"] = state ? state.destinationFlowConfigs : undefined;
            resourceInputs["kmsArn"] = state ? state.kmsArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourceFlowConfig"] = state ? state.sourceFlowConfig : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tasks"] = state ? state.tasks : undefined;
            resourceInputs["triggerConfig"] = state ? state.triggerConfig : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.destinationFlowConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationFlowConfigs'");
            }
            if ((!args || args.sourceFlowConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceFlowConfig'");
            }
            if ((!args || args.tasks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tasks'");
            }
            if ((!args || args.triggerConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerConfig'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationFlowConfigs"] = args ? args.destinationFlowConfigs : undefined;
            resourceInputs["kmsArn"] = args ? args.kmsArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourceFlowConfig"] = args ? args.sourceFlowConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tasks"] = args ? args.tasks : undefined;
            resourceInputs["triggerConfig"] = args ? args.triggerConfig : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Flow.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Flow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Flow(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Flow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Flow.__pulumiType;
    }
}
exports.Flow = Flow;
/** @internal */
Flow.__pulumiType = 'aws:appflow/flow:Flow';
//# sourceMappingURL=flow.js.map