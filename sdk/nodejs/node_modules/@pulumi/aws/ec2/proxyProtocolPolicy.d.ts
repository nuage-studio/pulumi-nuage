import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a proxy protocol policy, which allows an ELB to carry a client connection information to a backend.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const lb = new aws.elb.LoadBalancer("lb", {
 *     availabilityZones: ["us-east-1a"],
 *     listeners: [
 *         {
 *             instancePort: 25,
 *             instanceProtocol: "tcp",
 *             lbPort: 25,
 *             lbProtocol: "tcp",
 *         },
 *         {
 *             instancePort: 587,
 *             instanceProtocol: "tcp",
 *             lbPort: 587,
 *             lbProtocol: "tcp",
 *         },
 *     ],
 * });
 * const smtp = new aws.ec2.ProxyProtocolPolicy("smtp", {
 *     loadBalancer: lb.name,
 *     instancePorts: [
 *         "25",
 *         "587",
 *     ],
 * });
 * ```
 */
export declare class ProxyProtocolPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ProxyProtocolPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProxyProtocolPolicyState, opts?: pulumi.CustomResourceOptions): ProxyProtocolPolicy;
    /**
     * Returns true if the given object is an instance of ProxyProtocolPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ProxyProtocolPolicy;
    /**
     * List of instance ports to which the policy
     * should be applied. This can be specified if the protocol is SSL or TCP.
     */
    readonly instancePorts: pulumi.Output<string[]>;
    /**
     * The load balancer to which the policy
     * should be attached.
     */
    readonly loadBalancer: pulumi.Output<string>;
    /**
     * Create a ProxyProtocolPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProxyProtocolPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ProxyProtocolPolicy resources.
 */
export interface ProxyProtocolPolicyState {
    /**
     * List of instance ports to which the policy
     * should be applied. This can be specified if the protocol is SSL or TCP.
     */
    instancePorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The load balancer to which the policy
     * should be attached.
     */
    loadBalancer?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ProxyProtocolPolicy resource.
 */
export interface ProxyProtocolPolicyArgs {
    /**
     * List of instance ports to which the policy
     * should be applied. This can be specified if the protocol is SSL or TCP.
     */
    instancePorts: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The load balancer to which the policy
     * should be attached.
     */
    loadBalancer: pulumi.Input<string>;
}
