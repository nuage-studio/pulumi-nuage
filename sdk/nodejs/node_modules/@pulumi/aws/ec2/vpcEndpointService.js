"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcEndpointService = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a VPC Endpoint Service resource.
 * Service consumers can create an _Interface_ VPC Endpoint to connect to the service.
 *
 * > **NOTE on VPC Endpoint Services and VPC Endpoint Service Allowed Principals:** This provider provides
 * both a standalone VPC Endpoint Service Allowed Principal resource
 * and a VPC Endpoint Service resource with an `allowedPrincipals` attribute. Do not use the same principal ARN in both
 * a VPC Endpoint Service resource and a VPC Endpoint Service Allowed Principal resource. Doing so will cause a conflict
 * and will overwrite the association.
 *
 * ## Example Usage
 * ### Network Load Balancers
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2.VpcEndpointService("example", {
 *     acceptanceRequired: false,
 *     networkLoadBalancerArns: [aws_lb.example.arn],
 * });
 * ```
 * ### Gateway Load Balancers
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2.VpcEndpointService("example", {
 *     acceptanceRequired: false,
 *     gatewayLoadBalancerArns: [aws_lb.example.arn],
 * });
 * ```
 *
 * ## Import
 *
 * VPC Endpoint Services can be imported using the `VPC endpoint service id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2/vpcEndpointService:VpcEndpointService foo vpce-svc-0f97a19d3fa8220bc
 * ```
 */
class VpcEndpointService extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["acceptanceRequired"] = state ? state.acceptanceRequired : undefined;
            resourceInputs["allowedPrincipals"] = state ? state.allowedPrincipals : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["baseEndpointDnsNames"] = state ? state.baseEndpointDnsNames : undefined;
            resourceInputs["gatewayLoadBalancerArns"] = state ? state.gatewayLoadBalancerArns : undefined;
            resourceInputs["managesVpcEndpoints"] = state ? state.managesVpcEndpoints : undefined;
            resourceInputs["networkLoadBalancerArns"] = state ? state.networkLoadBalancerArns : undefined;
            resourceInputs["privateDnsName"] = state ? state.privateDnsName : undefined;
            resourceInputs["privateDnsNameConfigurations"] = state ? state.privateDnsNameConfigurations : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["supportedIpAddressTypes"] = state ? state.supportedIpAddressTypes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.acceptanceRequired === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceptanceRequired'");
            }
            resourceInputs["acceptanceRequired"] = args ? args.acceptanceRequired : undefined;
            resourceInputs["allowedPrincipals"] = args ? args.allowedPrincipals : undefined;
            resourceInputs["gatewayLoadBalancerArns"] = args ? args.gatewayLoadBalancerArns : undefined;
            resourceInputs["networkLoadBalancerArns"] = args ? args.networkLoadBalancerArns : undefined;
            resourceInputs["privateDnsName"] = args ? args.privateDnsName : undefined;
            resourceInputs["supportedIpAddressTypes"] = args ? args.supportedIpAddressTypes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["availabilityZones"] = undefined /*out*/;
            resourceInputs["baseEndpointDnsNames"] = undefined /*out*/;
            resourceInputs["managesVpcEndpoints"] = undefined /*out*/;
            resourceInputs["privateDnsNameConfigurations"] = undefined /*out*/;
            resourceInputs["serviceName"] = undefined /*out*/;
            resourceInputs["serviceType"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcEndpointService.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing VpcEndpointService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VpcEndpointService(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VpcEndpointService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcEndpointService.__pulumiType;
    }
}
exports.VpcEndpointService = VpcEndpointService;
/** @internal */
VpcEndpointService.__pulumiType = 'aws:ec2/vpcEndpointService:VpcEndpointService';
//# sourceMappingURL=vpcEndpointService.js.map