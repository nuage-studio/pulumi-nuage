import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a Network Insights Path resource. Part of the "Reachability Analyzer" service in the AWS VPC console.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.ec2.NetworkInsightsPath("test", {
 *     source: aws_network_interface.source.id,
 *     destination: aws_network_interface.destination.id,
 *     protocol: "tcp",
 * });
 * ```
 *
 * ## Import
 *
 * Network Insights Paths can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2/networkInsightsPath:NetworkInsightsPath test nip-00edfba169923aefd
 * ```
 */
export declare class NetworkInsightsPath extends pulumi.CustomResource {
    /**
     * Get an existing NetworkInsightsPath resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkInsightsPathState, opts?: pulumi.CustomResourceOptions): NetworkInsightsPath;
    /**
     * Returns true if the given object is an instance of NetworkInsightsPath.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is NetworkInsightsPath;
    /**
     * ARN of the Network Insights Path.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
     */
    readonly destination: pulumi.Output<string>;
    /**
     * IP address of the destination resource.
     */
    readonly destinationIp: pulumi.Output<string | undefined>;
    /**
     * Destination port to analyze access to.
     */
    readonly destinationPort: pulumi.Output<number | undefined>;
    /**
     * Protocol to use for analysis. Valid options are `tcp` or `udp`.
     */
    readonly protocol: pulumi.Output<string>;
    /**
     * ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
     */
    readonly source: pulumi.Output<string>;
    /**
     * IP address of the source resource.
     */
    readonly sourceIp: pulumi.Output<string | undefined>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Create a NetworkInsightsPath resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkInsightsPathArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering NetworkInsightsPath resources.
 */
export interface NetworkInsightsPathState {
    /**
     * ARN of the Network Insights Path.
     */
    arn?: pulumi.Input<string>;
    /**
     * ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
     */
    destination?: pulumi.Input<string>;
    /**
     * IP address of the destination resource.
     */
    destinationIp?: pulumi.Input<string>;
    /**
     * Destination port to analyze access to.
     */
    destinationPort?: pulumi.Input<number>;
    /**
     * Protocol to use for analysis. Valid options are `tcp` or `udp`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
     */
    source?: pulumi.Input<string>;
    /**
     * IP address of the source resource.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
/**
 * The set of arguments for constructing a NetworkInsightsPath resource.
 */
export interface NetworkInsightsPathArgs {
    /**
     * ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
     */
    destination: pulumi.Input<string>;
    /**
     * IP address of the destination resource.
     */
    destinationIp?: pulumi.Input<string>;
    /**
     * Destination port to analyze access to.
     */
    destinationPort?: pulumi.Input<number>;
    /**
     * Protocol to use for analysis. Valid options are `tcp` or `udp`.
     */
    protocol: pulumi.Input<string>;
    /**
     * ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
     */
    source: pulumi.Input<string>;
    /**
     * IP address of the source resource.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
