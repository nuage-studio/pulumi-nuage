"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInternetGatewayOutput = exports.getInternetGateway = exports.getInstancesOutput = exports.getInstances = exports.getInstanceTypesOutput = exports.getInstanceTypes = exports.getInstanceTypeOfferingsOutput = exports.getInstanceTypeOfferings = exports.getInstanceTypeOfferingOutput = exports.getInstanceTypeOffering = exports.getInstanceTypeOutput = exports.getInstanceType = exports.getInstanceOutput = exports.getInstance = exports.getElasticIpOutput = exports.getElasticIp = exports.getEipsOutput = exports.getEips = exports.getDedicatedHostOutput = exports.getDedicatedHost = exports.getCustomerGatewayOutput = exports.getCustomerGateway = exports.getCoipPoolsOutput = exports.getCoipPools = exports.getCoipPoolOutput = exports.getCoipPool = exports.getAmiIdsOutput = exports.getAmiIds = exports.getAmiOutput = exports.getAmi = exports.FlowLog = exports.Fleet = exports.EipAssociation = exports.Eip = exports.EgressOnlyInternetGateway = exports.DefaultVpcDhcpOptions = exports.DefaultVpc = exports.DefaultSubnet = exports.DefaultSecurityGroup = exports.DefaultRouteTable = exports.DefaultNetworkAcl = exports.DedicatedHost = exports.CustomerGateway = exports.CarrierGateway = exports.CapacityReservation = exports.AvailabilityZoneGroup = exports.AmiLaunchPermission = exports.AmiFromInstance = exports.AmiCopy = exports.Ami = void 0;
exports.getSecurityGroupOutput = exports.getSecurityGroup = exports.getRouteTablesOutput = exports.getRouteTables = exports.getRouteTableOutput = exports.getRouteTable = exports.getRouteOutput = exports.getRoute = exports.getPrefixListOutput = exports.getPrefixList = exports.getNetworkInterfacesOutput = exports.getNetworkInterfaces = exports.getNetworkInterfaceOutput = exports.getNetworkInterface = exports.getNetworkInsightsPathOutput = exports.getNetworkInsightsPath = exports.getNetworkInsightsAnalysisOutput = exports.getNetworkInsightsAnalysis = exports.getNetworkAclsOutput = exports.getNetworkAcls = exports.getNatGatewaysOutput = exports.getNatGateways = exports.getNatGatewayOutput = exports.getNatGateway = exports.getManagedPrefixListsOutput = exports.getManagedPrefixLists = exports.getManagedPrefixListOutput = exports.getManagedPrefixList = exports.getLocalGatewaysOutput = exports.getLocalGateways = exports.getLocalGatewayVirtualInterfaceGroupsOutput = exports.getLocalGatewayVirtualInterfaceGroups = exports.getLocalGatewayVirtualInterfaceGroupOutput = exports.getLocalGatewayVirtualInterfaceGroup = exports.getLocalGatewayVirtualInterfaceOutput = exports.getLocalGatewayVirtualInterface = exports.getLocalGatewayRouteTablesOutput = exports.getLocalGatewayRouteTables = exports.getLocalGatewayRouteTableOutput = exports.getLocalGatewayRouteTable = exports.getLocalGatewayOutput = exports.getLocalGateway = exports.getLaunchTemplateOutput = exports.getLaunchTemplate = exports.getLaunchConfigurationOutput = exports.getLaunchConfiguration = exports.getKeyPairOutput = exports.getKeyPair = exports.getIpamPreviewNextCidrOutput = exports.getIpamPreviewNextCidr = void 0;
exports.NetworkInterfaceAttachment = exports.NetworkInterface = exports.NetworkInsightsPath = exports.NetworkInsightsAnalysis = exports.NetworkAclRule = exports.NetworkAclAssociation = exports.NetworkAcl = exports.NatGateway = exports.ManagedPrefixListEntry = exports.ManagedPrefixList = exports.MainRouteTableAssociation = exports.LocalGatewayRouteTableVpcAssociation = exports.LocalGatewayRoute = exports.LaunchTemplate = exports.LaunchConfiguration = exports.KeyPair = exports.InternetGatewayAttachment = exports.InternetGateway = exports.Instance = exports.getVpnGatewayOutput = exports.getVpnGateway = exports.getVpcsOutput = exports.getVpcs = exports.getVpcPeeringConnectionsOutput = exports.getVpcPeeringConnections = exports.getVpcPeeringConnectionOutput = exports.getVpcPeeringConnection = exports.getVpcIamPoolOutput = exports.getVpcIamPool = exports.getVpcEndpointServiceOutput = exports.getVpcEndpointService = exports.getVpcEndpointOutput = exports.getVpcEndpoint = exports.getVpcDhcpOptionsOutput = exports.getVpcDhcpOptions = exports.getVpcOutput = exports.getVpc = exports.getTransitGatewayRouteTablesOutput = exports.getTransitGatewayRouteTables = exports.getSubnetsOutput = exports.getSubnets = exports.getSubnetIdsOutput = exports.getSubnetIds = exports.getSubnetOutput = exports.getSubnet = exports.getSpotPriceOutput = exports.getSpotPrice = exports.getSerialConsoleAccess = exports.getSecurityGroupsOutput = exports.getSecurityGroups = void 0;
exports.VpnGatewayAttachment = exports.VpnGateway = exports.VpnConnectionRoute = exports.VpnConnection = exports.VpcPeeringConnectionAccepter = exports.VpcPeeringConnection = exports.VpcIpv6CidrBlockAssociation = exports.VpcIpv4CidrBlockAssociation = exports.VpcIpamScope = exports.VpcIpamPreviewNextCidr = exports.VpcIpamPoolCidrAllocation = exports.VpcIpamPoolCidr = exports.VpcIpamPool = exports.VpcIpamOrganizationAdminAccount = exports.VpcIpam = exports.VpcEndpointSubnetAssociation = exports.VpcEndpointServiceAllowedPrinciple = exports.VpcEndpointService = exports.VpcEndpointRouteTableAssociation = exports.VpcEndpointPolicy = exports.VpcEndpointConnectionNotification = exports.VpcEndpointConnectionAccepter = exports.VpcEndpoint = exports.VpcDhcpOptionsAssociation = exports.VpcDhcpOptions = exports.Vpc = exports.VolumeAttachment = exports.TransitGatewayPeeringAttachmentAccepter = exports.TrafficMirrorTarget = exports.TrafficMirrorSession = exports.TrafficMirrorFilterRule = exports.TrafficMirrorFilter = exports.Tag = exports.SubnetCidrReservation = exports.Subnet = exports.SpotInstanceRequest = exports.SpotFleetRequest = exports.SpotDatafeedSubscription = exports.SnapshotCreateVolumePermission = exports.SerialConsoleAccess = exports.SecurityGroupRule = exports.SecurityGroupAssociation = exports.SecurityGroup = exports.RouteTableAssociation = exports.RouteTable = exports.Route = exports.ProxyProtocolPolicy = exports.PlacementGroup = exports.PeeringConnectionOptions = exports.NetworkInterfaceSecurityGroupAttachment = void 0;
exports.VpnGatewayRoutePropagation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Ami = null;
exports.AmiCopy = null;
exports.AmiFromInstance = null;
exports.AmiLaunchPermission = null;
exports.AvailabilityZoneGroup = null;
exports.CapacityReservation = null;
exports.CarrierGateway = null;
exports.CustomerGateway = null;
exports.DedicatedHost = null;
exports.DefaultNetworkAcl = null;
exports.DefaultRouteTable = null;
exports.DefaultSecurityGroup = null;
exports.DefaultSubnet = null;
exports.DefaultVpc = null;
exports.DefaultVpcDhcpOptions = null;
exports.EgressOnlyInternetGateway = null;
exports.Eip = null;
exports.EipAssociation = null;
exports.Fleet = null;
exports.FlowLog = null;
exports.getAmi = null;
exports.getAmiOutput = null;
exports.getAmiIds = null;
exports.getAmiIdsOutput = null;
exports.getCoipPool = null;
exports.getCoipPoolOutput = null;
exports.getCoipPools = null;
exports.getCoipPoolsOutput = null;
exports.getCustomerGateway = null;
exports.getCustomerGatewayOutput = null;
exports.getDedicatedHost = null;
exports.getDedicatedHostOutput = null;
exports.getEips = null;
exports.getEipsOutput = null;
exports.getElasticIp = null;
exports.getElasticIpOutput = null;
exports.getInstance = null;
exports.getInstanceOutput = null;
exports.getInstanceType = null;
exports.getInstanceTypeOutput = null;
exports.getInstanceTypeOffering = null;
exports.getInstanceTypeOfferingOutput = null;
exports.getInstanceTypeOfferings = null;
exports.getInstanceTypeOfferingsOutput = null;
exports.getInstanceTypes = null;
exports.getInstanceTypesOutput = null;
exports.getInstances = null;
exports.getInstancesOutput = null;
exports.getInternetGateway = null;
exports.getInternetGatewayOutput = null;
exports.getIpamPreviewNextCidr = null;
exports.getIpamPreviewNextCidrOutput = null;
exports.getKeyPair = null;
exports.getKeyPairOutput = null;
exports.getLaunchConfiguration = null;
exports.getLaunchConfigurationOutput = null;
exports.getLaunchTemplate = null;
exports.getLaunchTemplateOutput = null;
exports.getLocalGateway = null;
exports.getLocalGatewayOutput = null;
exports.getLocalGatewayRouteTable = null;
exports.getLocalGatewayRouteTableOutput = null;
exports.getLocalGatewayRouteTables = null;
exports.getLocalGatewayRouteTablesOutput = null;
exports.getLocalGatewayVirtualInterface = null;
exports.getLocalGatewayVirtualInterfaceOutput = null;
exports.getLocalGatewayVirtualInterfaceGroup = null;
exports.getLocalGatewayVirtualInterfaceGroupOutput = null;
exports.getLocalGatewayVirtualInterfaceGroups = null;
exports.getLocalGatewayVirtualInterfaceGroupsOutput = null;
exports.getLocalGateways = null;
exports.getLocalGatewaysOutput = null;
exports.getManagedPrefixList = null;
exports.getManagedPrefixListOutput = null;
exports.getManagedPrefixLists = null;
exports.getManagedPrefixListsOutput = null;
exports.getNatGateway = null;
exports.getNatGatewayOutput = null;
exports.getNatGateways = null;
exports.getNatGatewaysOutput = null;
exports.getNetworkAcls = null;
exports.getNetworkAclsOutput = null;
exports.getNetworkInsightsAnalysis = null;
exports.getNetworkInsightsAnalysisOutput = null;
exports.getNetworkInsightsPath = null;
exports.getNetworkInsightsPathOutput = null;
exports.getNetworkInterface = null;
exports.getNetworkInterfaceOutput = null;
exports.getNetworkInterfaces = null;
exports.getNetworkInterfacesOutput = null;
exports.getPrefixList = null;
exports.getPrefixListOutput = null;
exports.getRoute = null;
exports.getRouteOutput = null;
exports.getRouteTable = null;
exports.getRouteTableOutput = null;
exports.getRouteTables = null;
exports.getRouteTablesOutput = null;
exports.getSecurityGroup = null;
exports.getSecurityGroupOutput = null;
exports.getSecurityGroups = null;
exports.getSecurityGroupsOutput = null;
exports.getSerialConsoleAccess = null;
exports.getSpotPrice = null;
exports.getSpotPriceOutput = null;
exports.getSubnet = null;
exports.getSubnetOutput = null;
exports.getSubnetIds = null;
exports.getSubnetIdsOutput = null;
exports.getSubnets = null;
exports.getSubnetsOutput = null;
exports.getTransitGatewayRouteTables = null;
exports.getTransitGatewayRouteTablesOutput = null;
exports.getVpc = null;
exports.getVpcOutput = null;
exports.getVpcDhcpOptions = null;
exports.getVpcDhcpOptionsOutput = null;
exports.getVpcEndpoint = null;
exports.getVpcEndpointOutput = null;
exports.getVpcEndpointService = null;
exports.getVpcEndpointServiceOutput = null;
exports.getVpcIamPool = null;
exports.getVpcIamPoolOutput = null;
exports.getVpcPeeringConnection = null;
exports.getVpcPeeringConnectionOutput = null;
exports.getVpcPeeringConnections = null;
exports.getVpcPeeringConnectionsOutput = null;
exports.getVpcs = null;
exports.getVpcsOutput = null;
exports.getVpnGateway = null;
exports.getVpnGatewayOutput = null;
exports.Instance = null;
__exportStar(require("./instancePlatform"), exports);
__exportStar(require("./instanceType"), exports);
exports.InternetGateway = null;
exports.InternetGatewayAttachment = null;
exports.KeyPair = null;
exports.LaunchConfiguration = null;
exports.LaunchTemplate = null;
exports.LocalGatewayRoute = null;
exports.LocalGatewayRouteTableVpcAssociation = null;
exports.MainRouteTableAssociation = null;
exports.ManagedPrefixList = null;
exports.ManagedPrefixListEntry = null;
exports.NatGateway = null;
exports.NetworkAcl = null;
exports.NetworkAclAssociation = null;
exports.NetworkAclRule = null;
exports.NetworkInsightsAnalysis = null;
exports.NetworkInsightsPath = null;
exports.NetworkInterface = null;
exports.NetworkInterfaceAttachment = null;
exports.NetworkInterfaceSecurityGroupAttachment = null;
exports.PeeringConnectionOptions = null;
exports.PlacementGroup = null;
__exportStar(require("./placementStrategy"), exports);
__exportStar(require("./protocolType"), exports);
exports.ProxyProtocolPolicy = null;
exports.Route = null;
exports.RouteTable = null;
exports.RouteTableAssociation = null;
exports.SecurityGroup = null;
exports.SecurityGroupAssociation = null;
exports.SecurityGroupRule = null;
exports.SerialConsoleAccess = null;
exports.SnapshotCreateVolumePermission = null;
exports.SpotDatafeedSubscription = null;
exports.SpotFleetRequest = null;
exports.SpotInstanceRequest = null;
exports.Subnet = null;
exports.SubnetCidrReservation = null;
exports.Tag = null;
__exportStar(require("./tenancy"), exports);
exports.TrafficMirrorFilter = null;
exports.TrafficMirrorFilterRule = null;
exports.TrafficMirrorSession = null;
exports.TrafficMirrorTarget = null;
exports.TransitGatewayPeeringAttachmentAccepter = null;
exports.VolumeAttachment = null;
exports.Vpc = null;
exports.VpcDhcpOptions = null;
exports.VpcDhcpOptionsAssociation = null;
exports.VpcEndpoint = null;
exports.VpcEndpointConnectionAccepter = null;
exports.VpcEndpointConnectionNotification = null;
exports.VpcEndpointPolicy = null;
exports.VpcEndpointRouteTableAssociation = null;
exports.VpcEndpointService = null;
exports.VpcEndpointServiceAllowedPrinciple = null;
exports.VpcEndpointSubnetAssociation = null;
exports.VpcIpam = null;
exports.VpcIpamOrganizationAdminAccount = null;
exports.VpcIpamPool = null;
exports.VpcIpamPoolCidr = null;
exports.VpcIpamPoolCidrAllocation = null;
exports.VpcIpamPreviewNextCidr = null;
exports.VpcIpamScope = null;
exports.VpcIpv4CidrBlockAssociation = null;
exports.VpcIpv6CidrBlockAssociation = null;
exports.VpcPeeringConnection = null;
exports.VpcPeeringConnectionAccepter = null;
exports.VpnConnection = null;
exports.VpnConnectionRoute = null;
exports.VpnGateway = null;
exports.VpnGatewayAttachment = null;
exports.VpnGatewayRoutePropagation = null;
utilities.lazyLoad(exports, ["Ami"], () => require("./ami"));
utilities.lazyLoad(exports, ["AmiCopy"], () => require("./amiCopy"));
utilities.lazyLoad(exports, ["AmiFromInstance"], () => require("./amiFromInstance"));
utilities.lazyLoad(exports, ["AmiLaunchPermission"], () => require("./amiLaunchPermission"));
utilities.lazyLoad(exports, ["AvailabilityZoneGroup"], () => require("./availabilityZoneGroup"));
utilities.lazyLoad(exports, ["CapacityReservation"], () => require("./capacityReservation"));
utilities.lazyLoad(exports, ["CarrierGateway"], () => require("./carrierGateway"));
utilities.lazyLoad(exports, ["CustomerGateway"], () => require("./customerGateway"));
utilities.lazyLoad(exports, ["DedicatedHost"], () => require("./dedicatedHost"));
utilities.lazyLoad(exports, ["DefaultNetworkAcl"], () => require("./defaultNetworkAcl"));
utilities.lazyLoad(exports, ["DefaultRouteTable"], () => require("./defaultRouteTable"));
utilities.lazyLoad(exports, ["DefaultSecurityGroup"], () => require("./defaultSecurityGroup"));
utilities.lazyLoad(exports, ["DefaultSubnet"], () => require("./defaultSubnet"));
utilities.lazyLoad(exports, ["DefaultVpc"], () => require("./defaultVpc"));
utilities.lazyLoad(exports, ["DefaultVpcDhcpOptions"], () => require("./defaultVpcDhcpOptions"));
utilities.lazyLoad(exports, ["EgressOnlyInternetGateway"], () => require("./egressOnlyInternetGateway"));
utilities.lazyLoad(exports, ["Eip"], () => require("./eip"));
utilities.lazyLoad(exports, ["EipAssociation"], () => require("./eipAssociation"));
utilities.lazyLoad(exports, ["Fleet"], () => require("./fleet"));
utilities.lazyLoad(exports, ["FlowLog"], () => require("./flowLog"));
utilities.lazyLoad(exports, ["getAmi", "getAmiOutput"], () => require("./getAmi"));
utilities.lazyLoad(exports, ["getAmiIds", "getAmiIdsOutput"], () => require("./getAmiIds"));
utilities.lazyLoad(exports, ["getCoipPool", "getCoipPoolOutput"], () => require("./getCoipPool"));
utilities.lazyLoad(exports, ["getCoipPools", "getCoipPoolsOutput"], () => require("./getCoipPools"));
utilities.lazyLoad(exports, ["getCustomerGateway", "getCustomerGatewayOutput"], () => require("./getCustomerGateway"));
utilities.lazyLoad(exports, ["getDedicatedHost", "getDedicatedHostOutput"], () => require("./getDedicatedHost"));
utilities.lazyLoad(exports, ["getEips", "getEipsOutput"], () => require("./getEips"));
utilities.lazyLoad(exports, ["getElasticIp", "getElasticIpOutput"], () => require("./getElasticIp"));
utilities.lazyLoad(exports, ["getInstance", "getInstanceOutput"], () => require("./getInstance"));
utilities.lazyLoad(exports, ["getInstanceType", "getInstanceTypeOutput"], () => require("./getInstanceType"));
utilities.lazyLoad(exports, ["getInstanceTypeOffering", "getInstanceTypeOfferingOutput"], () => require("./getInstanceTypeOffering"));
utilities.lazyLoad(exports, ["getInstanceTypeOfferings", "getInstanceTypeOfferingsOutput"], () => require("./getInstanceTypeOfferings"));
utilities.lazyLoad(exports, ["getInstanceTypes", "getInstanceTypesOutput"], () => require("./getInstanceTypes"));
utilities.lazyLoad(exports, ["getInstances", "getInstancesOutput"], () => require("./getInstances"));
utilities.lazyLoad(exports, ["getInternetGateway", "getInternetGatewayOutput"], () => require("./getInternetGateway"));
utilities.lazyLoad(exports, ["getIpamPreviewNextCidr", "getIpamPreviewNextCidrOutput"], () => require("./getIpamPreviewNextCidr"));
utilities.lazyLoad(exports, ["getKeyPair", "getKeyPairOutput"], () => require("./getKeyPair"));
utilities.lazyLoad(exports, ["getLaunchConfiguration", "getLaunchConfigurationOutput"], () => require("./getLaunchConfiguration"));
utilities.lazyLoad(exports, ["getLaunchTemplate", "getLaunchTemplateOutput"], () => require("./getLaunchTemplate"));
utilities.lazyLoad(exports, ["getLocalGateway", "getLocalGatewayOutput"], () => require("./getLocalGateway"));
utilities.lazyLoad(exports, ["getLocalGatewayRouteTable", "getLocalGatewayRouteTableOutput"], () => require("./getLocalGatewayRouteTable"));
utilities.lazyLoad(exports, ["getLocalGatewayRouteTables", "getLocalGatewayRouteTablesOutput"], () => require("./getLocalGatewayRouteTables"));
utilities.lazyLoad(exports, ["getLocalGatewayVirtualInterface", "getLocalGatewayVirtualInterfaceOutput"], () => require("./getLocalGatewayVirtualInterface"));
utilities.lazyLoad(exports, ["getLocalGatewayVirtualInterfaceGroup", "getLocalGatewayVirtualInterfaceGroupOutput"], () => require("./getLocalGatewayVirtualInterfaceGroup"));
utilities.lazyLoad(exports, ["getLocalGatewayVirtualInterfaceGroups", "getLocalGatewayVirtualInterfaceGroupsOutput"], () => require("./getLocalGatewayVirtualInterfaceGroups"));
utilities.lazyLoad(exports, ["getLocalGateways", "getLocalGatewaysOutput"], () => require("./getLocalGateways"));
utilities.lazyLoad(exports, ["getManagedPrefixList", "getManagedPrefixListOutput"], () => require("./getManagedPrefixList"));
utilities.lazyLoad(exports, ["getManagedPrefixLists", "getManagedPrefixListsOutput"], () => require("./getManagedPrefixLists"));
utilities.lazyLoad(exports, ["getNatGateway", "getNatGatewayOutput"], () => require("./getNatGateway"));
utilities.lazyLoad(exports, ["getNatGateways", "getNatGatewaysOutput"], () => require("./getNatGateways"));
utilities.lazyLoad(exports, ["getNetworkAcls", "getNetworkAclsOutput"], () => require("./getNetworkAcls"));
utilities.lazyLoad(exports, ["getNetworkInsightsAnalysis", "getNetworkInsightsAnalysisOutput"], () => require("./getNetworkInsightsAnalysis"));
utilities.lazyLoad(exports, ["getNetworkInsightsPath", "getNetworkInsightsPathOutput"], () => require("./getNetworkInsightsPath"));
utilities.lazyLoad(exports, ["getNetworkInterface", "getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));
utilities.lazyLoad(exports, ["getNetworkInterfaces", "getNetworkInterfacesOutput"], () => require("./getNetworkInterfaces"));
utilities.lazyLoad(exports, ["getPrefixList", "getPrefixListOutput"], () => require("./getPrefixList"));
utilities.lazyLoad(exports, ["getRoute", "getRouteOutput"], () => require("./getRoute"));
utilities.lazyLoad(exports, ["getRouteTable", "getRouteTableOutput"], () => require("./getRouteTable"));
utilities.lazyLoad(exports, ["getRouteTables", "getRouteTablesOutput"], () => require("./getRouteTables"));
utilities.lazyLoad(exports, ["getSecurityGroup", "getSecurityGroupOutput"], () => require("./getSecurityGroup"));
utilities.lazyLoad(exports, ["getSecurityGroups", "getSecurityGroupsOutput"], () => require("./getSecurityGroups"));
utilities.lazyLoad(exports, ["getSerialConsoleAccess"], () => require("./getSerialConsoleAccess"));
utilities.lazyLoad(exports, ["getSpotPrice", "getSpotPriceOutput"], () => require("./getSpotPrice"));
utilities.lazyLoad(exports, ["getSubnet", "getSubnetOutput"], () => require("./getSubnet"));
utilities.lazyLoad(exports, ["getSubnetIds", "getSubnetIdsOutput"], () => require("./getSubnetIds"));
utilities.lazyLoad(exports, ["getSubnets", "getSubnetsOutput"], () => require("./getSubnets"));
utilities.lazyLoad(exports, ["getTransitGatewayRouteTables", "getTransitGatewayRouteTablesOutput"], () => require("./getTransitGatewayRouteTables"));
utilities.lazyLoad(exports, ["getVpc", "getVpcOutput"], () => require("./getVpc"));
utilities.lazyLoad(exports, ["getVpcDhcpOptions", "getVpcDhcpOptionsOutput"], () => require("./getVpcDhcpOptions"));
utilities.lazyLoad(exports, ["getVpcEndpoint", "getVpcEndpointOutput"], () => require("./getVpcEndpoint"));
utilities.lazyLoad(exports, ["getVpcEndpointService", "getVpcEndpointServiceOutput"], () => require("./getVpcEndpointService"));
utilities.lazyLoad(exports, ["getVpcIamPool", "getVpcIamPoolOutput"], () => require("./getVpcIamPool"));
utilities.lazyLoad(exports, ["getVpcPeeringConnection", "getVpcPeeringConnectionOutput"], () => require("./getVpcPeeringConnection"));
utilities.lazyLoad(exports, ["getVpcPeeringConnections", "getVpcPeeringConnectionsOutput"], () => require("./getVpcPeeringConnections"));
utilities.lazyLoad(exports, ["getVpcs", "getVpcsOutput"], () => require("./getVpcs"));
utilities.lazyLoad(exports, ["getVpnGateway", "getVpnGatewayOutput"], () => require("./getVpnGateway"));
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));
utilities.lazyLoad(exports, ["InternetGateway"], () => require("./internetGateway"));
utilities.lazyLoad(exports, ["InternetGatewayAttachment"], () => require("./internetGatewayAttachment"));
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));
utilities.lazyLoad(exports, ["LaunchConfiguration"], () => require("./launchConfiguration"));
utilities.lazyLoad(exports, ["LaunchTemplate"], () => require("./launchTemplate"));
utilities.lazyLoad(exports, ["LocalGatewayRoute"], () => require("./localGatewayRoute"));
utilities.lazyLoad(exports, ["LocalGatewayRouteTableVpcAssociation"], () => require("./localGatewayRouteTableVpcAssociation"));
utilities.lazyLoad(exports, ["MainRouteTableAssociation"], () => require("./mainRouteTableAssociation"));
utilities.lazyLoad(exports, ["ManagedPrefixList"], () => require("./managedPrefixList"));
utilities.lazyLoad(exports, ["ManagedPrefixListEntry"], () => require("./managedPrefixListEntry"));
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));
utilities.lazyLoad(exports, ["NetworkAcl"], () => require("./networkAcl"));
utilities.lazyLoad(exports, ["NetworkAclAssociation"], () => require("./networkAclAssociation"));
utilities.lazyLoad(exports, ["NetworkAclRule"], () => require("./networkAclRule"));
utilities.lazyLoad(exports, ["NetworkInsightsAnalysis"], () => require("./networkInsightsAnalysis"));
utilities.lazyLoad(exports, ["NetworkInsightsPath"], () => require("./networkInsightsPath"));
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));
utilities.lazyLoad(exports, ["NetworkInterfaceAttachment"], () => require("./networkInterfaceAttachment"));
utilities.lazyLoad(exports, ["NetworkInterfaceSecurityGroupAttachment"], () => require("./networkInterfaceSecurityGroupAttachment"));
utilities.lazyLoad(exports, ["PeeringConnectionOptions"], () => require("./peeringConnectionOptions"));
utilities.lazyLoad(exports, ["PlacementGroup"], () => require("./placementGroup"));
utilities.lazyLoad(exports, ["ProxyProtocolPolicy"], () => require("./proxyProtocolPolicy"));
utilities.lazyLoad(exports, ["Route"], () => require("./route"));
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));
utilities.lazyLoad(exports, ["RouteTableAssociation"], () => require("./routeTableAssociation"));
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));
utilities.lazyLoad(exports, ["SecurityGroupAssociation"], () => require("./securityGroupAssociation"));
utilities.lazyLoad(exports, ["SecurityGroupRule"], () => require("./securityGroupRule"));
utilities.lazyLoad(exports, ["SerialConsoleAccess"], () => require("./serialConsoleAccess"));
utilities.lazyLoad(exports, ["SnapshotCreateVolumePermission"], () => require("./snapshotCreateVolumePermission"));
utilities.lazyLoad(exports, ["SpotDatafeedSubscription"], () => require("./spotDatafeedSubscription"));
utilities.lazyLoad(exports, ["SpotFleetRequest"], () => require("./spotFleetRequest"));
utilities.lazyLoad(exports, ["SpotInstanceRequest"], () => require("./spotInstanceRequest"));
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));
utilities.lazyLoad(exports, ["SubnetCidrReservation"], () => require("./subnetCidrReservation"));
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));
utilities.lazyLoad(exports, ["TrafficMirrorFilter"], () => require("./trafficMirrorFilter"));
utilities.lazyLoad(exports, ["TrafficMirrorFilterRule"], () => require("./trafficMirrorFilterRule"));
utilities.lazyLoad(exports, ["TrafficMirrorSession"], () => require("./trafficMirrorSession"));
utilities.lazyLoad(exports, ["TrafficMirrorTarget"], () => require("./trafficMirrorTarget"));
utilities.lazyLoad(exports, ["TransitGatewayPeeringAttachmentAccepter"], () => require("./transitGatewayPeeringAttachmentAccepter"));
utilities.lazyLoad(exports, ["VolumeAttachment"], () => require("./volumeAttachment"));
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));
utilities.lazyLoad(exports, ["VpcDhcpOptions"], () => require("./vpcDhcpOptions"));
utilities.lazyLoad(exports, ["VpcDhcpOptionsAssociation"], () => require("./vpcDhcpOptionsAssociation"));
utilities.lazyLoad(exports, ["VpcEndpoint"], () => require("./vpcEndpoint"));
utilities.lazyLoad(exports, ["VpcEndpointConnectionAccepter"], () => require("./vpcEndpointConnectionAccepter"));
utilities.lazyLoad(exports, ["VpcEndpointConnectionNotification"], () => require("./vpcEndpointConnectionNotification"));
utilities.lazyLoad(exports, ["VpcEndpointPolicy"], () => require("./vpcEndpointPolicy"));
utilities.lazyLoad(exports, ["VpcEndpointRouteTableAssociation"], () => require("./vpcEndpointRouteTableAssociation"));
utilities.lazyLoad(exports, ["VpcEndpointService"], () => require("./vpcEndpointService"));
utilities.lazyLoad(exports, ["VpcEndpointServiceAllowedPrinciple"], () => require("./vpcEndpointServiceAllowedPrinciple"));
utilities.lazyLoad(exports, ["VpcEndpointSubnetAssociation"], () => require("./vpcEndpointSubnetAssociation"));
utilities.lazyLoad(exports, ["VpcIpam"], () => require("./vpcIpam"));
utilities.lazyLoad(exports, ["VpcIpamOrganizationAdminAccount"], () => require("./vpcIpamOrganizationAdminAccount"));
utilities.lazyLoad(exports, ["VpcIpamPool"], () => require("./vpcIpamPool"));
utilities.lazyLoad(exports, ["VpcIpamPoolCidr"], () => require("./vpcIpamPoolCidr"));
utilities.lazyLoad(exports, ["VpcIpamPoolCidrAllocation"], () => require("./vpcIpamPoolCidrAllocation"));
utilities.lazyLoad(exports, ["VpcIpamPreviewNextCidr"], () => require("./vpcIpamPreviewNextCidr"));
utilities.lazyLoad(exports, ["VpcIpamScope"], () => require("./vpcIpamScope"));
utilities.lazyLoad(exports, ["VpcIpv4CidrBlockAssociation"], () => require("./vpcIpv4CidrBlockAssociation"));
utilities.lazyLoad(exports, ["VpcIpv6CidrBlockAssociation"], () => require("./vpcIpv6CidrBlockAssociation"));
utilities.lazyLoad(exports, ["VpcPeeringConnection"], () => require("./vpcPeeringConnection"));
utilities.lazyLoad(exports, ["VpcPeeringConnectionAccepter"], () => require("./vpcPeeringConnectionAccepter"));
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));
utilities.lazyLoad(exports, ["VpnConnectionRoute"], () => require("./vpnConnectionRoute"));
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));
utilities.lazyLoad(exports, ["VpnGatewayAttachment"], () => require("./vpnGatewayAttachment"));
utilities.lazyLoad(exports, ["VpnGatewayRoutePropagation"], () => require("./vpnGatewayRoutePropagation"));
// Export enums:
__exportStar(require("../types/enums/ec2"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:ec2/ami:Ami":
                return new exports.Ami(name, undefined, { urn });
            case "aws:ec2/amiCopy:AmiCopy":
                return new exports.AmiCopy(name, undefined, { urn });
            case "aws:ec2/amiFromInstance:AmiFromInstance":
                return new exports.AmiFromInstance(name, undefined, { urn });
            case "aws:ec2/amiLaunchPermission:AmiLaunchPermission":
                return new exports.AmiLaunchPermission(name, undefined, { urn });
            case "aws:ec2/availabilityZoneGroup:AvailabilityZoneGroup":
                return new exports.AvailabilityZoneGroup(name, undefined, { urn });
            case "aws:ec2/capacityReservation:CapacityReservation":
                return new exports.CapacityReservation(name, undefined, { urn });
            case "aws:ec2/carrierGateway:CarrierGateway":
                return new exports.CarrierGateway(name, undefined, { urn });
            case "aws:ec2/customerGateway:CustomerGateway":
                return new exports.CustomerGateway(name, undefined, { urn });
            case "aws:ec2/dedicatedHost:DedicatedHost":
                return new exports.DedicatedHost(name, undefined, { urn });
            case "aws:ec2/defaultNetworkAcl:DefaultNetworkAcl":
                return new exports.DefaultNetworkAcl(name, undefined, { urn });
            case "aws:ec2/defaultRouteTable:DefaultRouteTable":
                return new exports.DefaultRouteTable(name, undefined, { urn });
            case "aws:ec2/defaultSecurityGroup:DefaultSecurityGroup":
                return new exports.DefaultSecurityGroup(name, undefined, { urn });
            case "aws:ec2/defaultSubnet:DefaultSubnet":
                return new exports.DefaultSubnet(name, undefined, { urn });
            case "aws:ec2/defaultVpc:DefaultVpc":
                return new exports.DefaultVpc(name, undefined, { urn });
            case "aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions":
                return new exports.DefaultVpcDhcpOptions(name, undefined, { urn });
            case "aws:ec2/egressOnlyInternetGateway:EgressOnlyInternetGateway":
                return new exports.EgressOnlyInternetGateway(name, undefined, { urn });
            case "aws:ec2/eip:Eip":
                return new exports.Eip(name, undefined, { urn });
            case "aws:ec2/eipAssociation:EipAssociation":
                return new exports.EipAssociation(name, undefined, { urn });
            case "aws:ec2/fleet:Fleet":
                return new exports.Fleet(name, undefined, { urn });
            case "aws:ec2/flowLog:FlowLog":
                return new exports.FlowLog(name, undefined, { urn });
            case "aws:ec2/instance:Instance":
                return new exports.Instance(name, undefined, { urn });
            case "aws:ec2/internetGateway:InternetGateway":
                return new exports.InternetGateway(name, undefined, { urn });
            case "aws:ec2/internetGatewayAttachment:InternetGatewayAttachment":
                return new exports.InternetGatewayAttachment(name, undefined, { urn });
            case "aws:ec2/keyPair:KeyPair":
                return new exports.KeyPair(name, undefined, { urn });
            case "aws:ec2/launchConfiguration:LaunchConfiguration":
                return new exports.LaunchConfiguration(name, undefined, { urn });
            case "aws:ec2/launchTemplate:LaunchTemplate":
                return new exports.LaunchTemplate(name, undefined, { urn });
            case "aws:ec2/localGatewayRoute:LocalGatewayRoute":
                return new exports.LocalGatewayRoute(name, undefined, { urn });
            case "aws:ec2/localGatewayRouteTableVpcAssociation:LocalGatewayRouteTableVpcAssociation":
                return new exports.LocalGatewayRouteTableVpcAssociation(name, undefined, { urn });
            case "aws:ec2/mainRouteTableAssociation:MainRouteTableAssociation":
                return new exports.MainRouteTableAssociation(name, undefined, { urn });
            case "aws:ec2/managedPrefixList:ManagedPrefixList":
                return new exports.ManagedPrefixList(name, undefined, { urn });
            case "aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry":
                return new exports.ManagedPrefixListEntry(name, undefined, { urn });
            case "aws:ec2/natGateway:NatGateway":
                return new exports.NatGateway(name, undefined, { urn });
            case "aws:ec2/networkAcl:NetworkAcl":
                return new exports.NetworkAcl(name, undefined, { urn });
            case "aws:ec2/networkAclAssociation:NetworkAclAssociation":
                return new exports.NetworkAclAssociation(name, undefined, { urn });
            case "aws:ec2/networkAclRule:NetworkAclRule":
                return new exports.NetworkAclRule(name, undefined, { urn });
            case "aws:ec2/networkInsightsAnalysis:NetworkInsightsAnalysis":
                return new exports.NetworkInsightsAnalysis(name, undefined, { urn });
            case "aws:ec2/networkInsightsPath:NetworkInsightsPath":
                return new exports.NetworkInsightsPath(name, undefined, { urn });
            case "aws:ec2/networkInterface:NetworkInterface":
                return new exports.NetworkInterface(name, undefined, { urn });
            case "aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment":
                return new exports.NetworkInterfaceAttachment(name, undefined, { urn });
            case "aws:ec2/networkInterfaceSecurityGroupAttachment:NetworkInterfaceSecurityGroupAttachment":
                return new exports.NetworkInterfaceSecurityGroupAttachment(name, undefined, { urn });
            case "aws:ec2/peeringConnectionOptions:PeeringConnectionOptions":
                return new exports.PeeringConnectionOptions(name, undefined, { urn });
            case "aws:ec2/placementGroup:PlacementGroup":
                return new exports.PlacementGroup(name, undefined, { urn });
            case "aws:ec2/proxyProtocolPolicy:ProxyProtocolPolicy":
                return new exports.ProxyProtocolPolicy(name, undefined, { urn });
            case "aws:ec2/route:Route":
                return new exports.Route(name, undefined, { urn });
            case "aws:ec2/routeTable:RouteTable":
                return new exports.RouteTable(name, undefined, { urn });
            case "aws:ec2/routeTableAssociation:RouteTableAssociation":
                return new exports.RouteTableAssociation(name, undefined, { urn });
            case "aws:ec2/securityGroup:SecurityGroup":
                return new exports.SecurityGroup(name, undefined, { urn });
            case "aws:ec2/securityGroupAssociation:SecurityGroupAssociation":
                return new exports.SecurityGroupAssociation(name, undefined, { urn });
            case "aws:ec2/securityGroupRule:SecurityGroupRule":
                return new exports.SecurityGroupRule(name, undefined, { urn });
            case "aws:ec2/serialConsoleAccess:SerialConsoleAccess":
                return new exports.SerialConsoleAccess(name, undefined, { urn });
            case "aws:ec2/snapshotCreateVolumePermission:SnapshotCreateVolumePermission":
                return new exports.SnapshotCreateVolumePermission(name, undefined, { urn });
            case "aws:ec2/spotDatafeedSubscription:SpotDatafeedSubscription":
                return new exports.SpotDatafeedSubscription(name, undefined, { urn });
            case "aws:ec2/spotFleetRequest:SpotFleetRequest":
                return new exports.SpotFleetRequest(name, undefined, { urn });
            case "aws:ec2/spotInstanceRequest:SpotInstanceRequest":
                return new exports.SpotInstanceRequest(name, undefined, { urn });
            case "aws:ec2/subnet:Subnet":
                return new exports.Subnet(name, undefined, { urn });
            case "aws:ec2/subnetCidrReservation:SubnetCidrReservation":
                return new exports.SubnetCidrReservation(name, undefined, { urn });
            case "aws:ec2/tag:Tag":
                return new exports.Tag(name, undefined, { urn });
            case "aws:ec2/trafficMirrorFilter:TrafficMirrorFilter":
                return new exports.TrafficMirrorFilter(name, undefined, { urn });
            case "aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule":
                return new exports.TrafficMirrorFilterRule(name, undefined, { urn });
            case "aws:ec2/trafficMirrorSession:TrafficMirrorSession":
                return new exports.TrafficMirrorSession(name, undefined, { urn });
            case "aws:ec2/trafficMirrorTarget:TrafficMirrorTarget":
                return new exports.TrafficMirrorTarget(name, undefined, { urn });
            case "aws:ec2/transitGatewayPeeringAttachmentAccepter:TransitGatewayPeeringAttachmentAccepter":
                return new exports.TransitGatewayPeeringAttachmentAccepter(name, undefined, { urn });
            case "aws:ec2/volumeAttachment:VolumeAttachment":
                return new exports.VolumeAttachment(name, undefined, { urn });
            case "aws:ec2/vpc:Vpc":
                return new exports.Vpc(name, undefined, { urn });
            case "aws:ec2/vpcDhcpOptions:VpcDhcpOptions":
                return new exports.VpcDhcpOptions(name, undefined, { urn });
            case "aws:ec2/vpcDhcpOptionsAssociation:VpcDhcpOptionsAssociation":
                return new exports.VpcDhcpOptionsAssociation(name, undefined, { urn });
            case "aws:ec2/vpcEndpoint:VpcEndpoint":
                return new exports.VpcEndpoint(name, undefined, { urn });
            case "aws:ec2/vpcEndpointConnectionAccepter:VpcEndpointConnectionAccepter":
                return new exports.VpcEndpointConnectionAccepter(name, undefined, { urn });
            case "aws:ec2/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification":
                return new exports.VpcEndpointConnectionNotification(name, undefined, { urn });
            case "aws:ec2/vpcEndpointPolicy:VpcEndpointPolicy":
                return new exports.VpcEndpointPolicy(name, undefined, { urn });
            case "aws:ec2/vpcEndpointRouteTableAssociation:VpcEndpointRouteTableAssociation":
                return new exports.VpcEndpointRouteTableAssociation(name, undefined, { urn });
            case "aws:ec2/vpcEndpointService:VpcEndpointService":
                return new exports.VpcEndpointService(name, undefined, { urn });
            case "aws:ec2/vpcEndpointServiceAllowedPrinciple:VpcEndpointServiceAllowedPrinciple":
                return new exports.VpcEndpointServiceAllowedPrinciple(name, undefined, { urn });
            case "aws:ec2/vpcEndpointSubnetAssociation:VpcEndpointSubnetAssociation":
                return new exports.VpcEndpointSubnetAssociation(name, undefined, { urn });
            case "aws:ec2/vpcIpam:VpcIpam":
                return new exports.VpcIpam(name, undefined, { urn });
            case "aws:ec2/vpcIpamOrganizationAdminAccount:VpcIpamOrganizationAdminAccount":
                return new exports.VpcIpamOrganizationAdminAccount(name, undefined, { urn });
            case "aws:ec2/vpcIpamPool:VpcIpamPool":
                return new exports.VpcIpamPool(name, undefined, { urn });
            case "aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr":
                return new exports.VpcIpamPoolCidr(name, undefined, { urn });
            case "aws:ec2/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation":
                return new exports.VpcIpamPoolCidrAllocation(name, undefined, { urn });
            case "aws:ec2/vpcIpamPreviewNextCidr:VpcIpamPreviewNextCidr":
                return new exports.VpcIpamPreviewNextCidr(name, undefined, { urn });
            case "aws:ec2/vpcIpamScope:VpcIpamScope":
                return new exports.VpcIpamScope(name, undefined, { urn });
            case "aws:ec2/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation":
                return new exports.VpcIpv4CidrBlockAssociation(name, undefined, { urn });
            case "aws:ec2/vpcIpv6CidrBlockAssociation:VpcIpv6CidrBlockAssociation":
                return new exports.VpcIpv6CidrBlockAssociation(name, undefined, { urn });
            case "aws:ec2/vpcPeeringConnection:VpcPeeringConnection":
                return new exports.VpcPeeringConnection(name, undefined, { urn });
            case "aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter":
                return new exports.VpcPeeringConnectionAccepter(name, undefined, { urn });
            case "aws:ec2/vpnConnection:VpnConnection":
                return new exports.VpnConnection(name, undefined, { urn });
            case "aws:ec2/vpnConnectionRoute:VpnConnectionRoute":
                return new exports.VpnConnectionRoute(name, undefined, { urn });
            case "aws:ec2/vpnGateway:VpnGateway":
                return new exports.VpnGateway(name, undefined, { urn });
            case "aws:ec2/vpnGatewayAttachment:VpnGatewayAttachment":
                return new exports.VpnGatewayAttachment(name, undefined, { urn });
            case "aws:ec2/vpnGatewayRoutePropagation:VpnGatewayRoutePropagation":
                return new exports.VpnGatewayRoutePropagation(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ec2/ami", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/amiCopy", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/amiFromInstance", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/amiLaunchPermission", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/availabilityZoneGroup", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/capacityReservation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/carrierGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/customerGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/dedicatedHost", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultNetworkAcl", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultRouteTable", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultSecurityGroup", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultSubnet", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultVpc", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultVpcDhcpOptions", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/egressOnlyInternetGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/eip", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/eipAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/fleet", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/flowLog", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/instance", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/internetGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/internetGatewayAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/keyPair", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/launchConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/launchTemplate", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/localGatewayRoute", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/localGatewayRouteTableVpcAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/mainRouteTableAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/managedPrefixList", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/managedPrefixListEntry", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/natGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkAcl", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkAclAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkAclRule", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkInsightsAnalysis", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkInsightsPath", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkInterface", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkInterfaceAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkInterfaceSecurityGroupAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/peeringConnectionOptions", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/placementGroup", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/proxyProtocolPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/route", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/routeTable", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/routeTableAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/securityGroup", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/securityGroupAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/securityGroupRule", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/serialConsoleAccess", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/snapshotCreateVolumePermission", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/spotDatafeedSubscription", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/spotFleetRequest", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/spotInstanceRequest", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/subnet", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/subnetCidrReservation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/tag", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorFilter", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorFilterRule", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorSession", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorTarget", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/transitGatewayPeeringAttachmentAccepter", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/volumeAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpc", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcDhcpOptions", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcDhcpOptionsAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpoint", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointConnectionAccepter", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointConnectionNotification", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointRouteTableAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointService", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointServiceAllowedPrinciple", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointSubnetAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpam", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamOrganizationAdminAccount", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamPool", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamPoolCidr", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamPoolCidrAllocation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamPreviewNextCidr", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamScope", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpv4CidrBlockAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpv6CidrBlockAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcPeeringConnection", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcPeeringConnectionAccepter", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpnConnection", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpnConnectionRoute", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpnGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpnGatewayAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpnGatewayRoutePropagation", _module);
//# sourceMappingURL=index.js.map