"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRouteOutput = exports.getRoute = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * `aws.ec2.Route` provides details about a specific Route.
 *
 * This resource can prove useful when finding the resource associated with a CIDR. For example, finding the peering connection associated with a CIDR value.
 *
 * ## Example Usage
 *
 * The following example shows how one might use a CIDR value to find a network interface id and use this to create a data source of that network interface.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const subnetId = config.requireObject("subnetId");
 * const selected = aws.ec2.getRouteTable({
 *     subnetId: subnetId,
 * });
 * const route = aws.ec2.getRoute({
 *     routeTableId: aws_route_table.selected.id,
 *     destinationCidrBlock: "10.0.1.0/24",
 * });
 * const interface = route.then(route => aws.ec2.getNetworkInterface({
 *     id: route.networkInterfaceId,
 * }));
 * ```
 */
function getRoute(args, opts) {
    if (!opts) {
        opts = {};
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws:ec2/getRoute:getRoute", {
        "carrierGatewayId": args.carrierGatewayId,
        "coreNetworkArn": args.coreNetworkArn,
        "destinationCidrBlock": args.destinationCidrBlock,
        "destinationIpv6CidrBlock": args.destinationIpv6CidrBlock,
        "destinationPrefixListId": args.destinationPrefixListId,
        "egressOnlyGatewayId": args.egressOnlyGatewayId,
        "gatewayId": args.gatewayId,
        "instanceId": args.instanceId,
        "localGatewayId": args.localGatewayId,
        "natGatewayId": args.natGatewayId,
        "networkInterfaceId": args.networkInterfaceId,
        "routeTableId": args.routeTableId,
        "transitGatewayId": args.transitGatewayId,
        "vpcPeeringConnectionId": args.vpcPeeringConnectionId,
    }, opts);
}
exports.getRoute = getRoute;
function getRouteOutput(args, opts) {
    return pulumi.output(args).apply(a => getRoute(a, opts));
}
exports.getRouteOutput = getRouteOutput;
//# sourceMappingURL=getRoute.js.map