"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkInterfaceSecurityGroupAttachment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * This resource attaches a security group to an Elastic Network Interface (ENI).
 * It can be used to attach a security group to any existing ENI, be it a
 * secondary ENI or one attached as the primary interface on an instance.
 *
 * > **NOTE on instances, interfaces, and security groups:** This provider currently
 * provides the capability to assign security groups via the `aws.ec2.Instance`
 * and the `aws.ec2.NetworkInterface` resources. Using this resource in
 * conjunction with security groups provided in-line in those resources will cause
 * conflicts, and will lead to spurious diffs and undefined behavior - please use
 * one or the other.
 *
 * ## Example Usage
 *
 * The following provides a very basic example of setting up an instance (provided
 * by `instance`) in the default security group, creating a security group
 * (provided by `sg`) and then attaching the security group to the instance's
 * primary network interface via the `aws.ec2.NetworkInterfaceSecurityGroupAttachment` resource,
 * named `sgAttachment`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ami = aws.ec2.getAmi({
 *     mostRecent: true,
 *     filters: [{
 *         name: "name",
 *         values: ["amzn-ami-hvm-*"],
 *     }],
 *     owners: ["amazon"],
 * });
 * const instance = new aws.ec2.Instance("instance", {
 *     instanceType: "t2.micro",
 *     ami: ami.then(ami => ami.id),
 *     tags: {
 *         type: "test-instance",
 *     },
 * });
 * const sg = new aws.ec2.SecurityGroup("sg", {tags: {
 *     type: "test-security-group",
 * }});
 * const sgAttachment = new aws.ec2.NetworkInterfaceSecurityGroupAttachment("sgAttachment", {
 *     securityGroupId: sg.id,
 *     networkInterfaceId: instance.primaryNetworkInterfaceId,
 * });
 * ```
 *
 * In this example, `instance` is provided by the `aws.ec2.Instance` data source,
 * fetching an external instance, possibly not managed by this provider.
 * `sgAttachment` then attaches to the output instance's `networkInterfaceId`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const instance = aws.ec2.getInstance({
 *     instanceId: "i-1234567890abcdef0",
 * });
 * const sg = new aws.ec2.SecurityGroup("sg", {tags: {
 *     type: "test-security-group",
 * }});
 * const sgAttachment = new aws.ec2.NetworkInterfaceSecurityGroupAttachment("sgAttachment", {
 *     securityGroupId: sg.id,
 *     networkInterfaceId: instance.then(instance => instance.networkInterfaceId),
 * });
 * ```
 */
class NetworkInterfaceSecurityGroupAttachment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.networkInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            resourceInputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkInterfaceSecurityGroupAttachment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing NetworkInterfaceSecurityGroupAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkInterfaceSecurityGroupAttachment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkInterfaceSecurityGroupAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkInterfaceSecurityGroupAttachment.__pulumiType;
    }
}
exports.NetworkInterfaceSecurityGroupAttachment = NetworkInterfaceSecurityGroupAttachment;
/** @internal */
NetworkInterfaceSecurityGroupAttachment.__pulumiType = 'aws:ec2/networkInterfaceSecurityGroupAttachment:NetworkInterfaceSecurityGroupAttachment';
//# sourceMappingURL=networkInterfaceSecurityGroupAttachment.js.map