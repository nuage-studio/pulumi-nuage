"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmiLaunchPermission = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Adds a launch permission to an Amazon Machine Image (AMI).
 *
 * ## Example Usage
 * ### AWS Account ID
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2.AmiLaunchPermission("example", {
 *     accountId: "123456789012",
 *     imageId: "ami-12345678",
 * });
 * ```
 * ### Public Access
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2.AmiLaunchPermission("example", {
 *     group: "all",
 *     imageId: "ami-12345678",
 * });
 * ```
 * ### Organization Access
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.organizations.getOrganization({});
 * const example = new aws.ec2.AmiLaunchPermission("example", {
 *     imageId: "ami-12345678",
 *     organizationArn: current.then(current => current.arn),
 * });
 * ```
 *
 * ## Import
 *
 * AMI Launch Permissions can be imported using `[ACCOUNT-ID|GROUP-NAME|ORGANIZATION-ARN|ORGANIZATIONAL-UNIT-ARN]/IMAGE-ID`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2/amiLaunchPermission:AmiLaunchPermission example 123456789012/ami-12345678
 * ```
 */
class AmiLaunchPermission extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["organizationArn"] = state ? state.organizationArn : undefined;
            resourceInputs["organizationalUnitArn"] = state ? state.organizationalUnitArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["organizationArn"] = args ? args.organizationArn : undefined;
            resourceInputs["organizationalUnitArn"] = args ? args.organizationalUnitArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AmiLaunchPermission.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AmiLaunchPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AmiLaunchPermission(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AmiLaunchPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AmiLaunchPermission.__pulumiType;
    }
}
exports.AmiLaunchPermission = AmiLaunchPermission;
/** @internal */
AmiLaunchPermission.__pulumiType = 'aws:ec2/amiLaunchPermission:AmiLaunchPermission';
//# sourceMappingURL=amiLaunchPermission.js.map