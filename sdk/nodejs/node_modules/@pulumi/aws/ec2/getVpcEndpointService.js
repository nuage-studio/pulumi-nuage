"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVpcEndpointServiceOutput = exports.getVpcEndpointService = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The VPC Endpoint Service data source details about a specific service that
 * can be specified when creating a VPC endpoint within the region configured in the provider.
 *
 * ## Example Usage
 * ### AWS Service
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const s3 = aws.ec2.getVpcEndpointService({
 *     service: "s3",
 *     serviceType: "Gateway",
 * });
 * // Create a VPC
 * const foo = new aws.ec2.Vpc("foo", {cidrBlock: "10.0.0.0/16"});
 * // Create a VPC endpoint
 * const ep = new aws.ec2.VpcEndpoint("ep", {
 *     vpcId: foo.id,
 *     serviceName: s3.then(s3 => s3.serviceName),
 * });
 * ```
 * ### Non-AWS Service
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const custome = pulumi.output(aws.ec2.getVpcEndpointService({
 *     serviceName: "com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8",
 * }));
 * ```
 * ### Filter
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = pulumi.output(aws.ec2.getVpcEndpointService({
 *     filters: [{
 *         name: "service-name",
 *         values: ["some-service"],
 *     }],
 * }));
 * ```
 */
function getVpcEndpointService(args, opts) {
    args = args || {};
    if (!opts) {
        opts = {};
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws:ec2/getVpcEndpointService:getVpcEndpointService", {
        "filters": args.filters,
        "service": args.service,
        "serviceName": args.serviceName,
        "serviceType": args.serviceType,
        "tags": args.tags,
    }, opts);
}
exports.getVpcEndpointService = getVpcEndpointService;
function getVpcEndpointServiceOutput(args, opts) {
    return pulumi.output(args).apply(a => getVpcEndpointService(a, opts));
}
exports.getVpcEndpointServiceOutput = getVpcEndpointServiceOutput;
//# sourceMappingURL=getVpcEndpointService.js.map