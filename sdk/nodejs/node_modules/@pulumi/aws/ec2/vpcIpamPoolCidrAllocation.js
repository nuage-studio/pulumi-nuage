"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcIpamPoolCidrAllocation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Allocates (reserves) a CIDR from an IPAM address pool, preventing usage by IPAM. Only works for private IPv4.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getRegion({});
 * const exampleVpcIpam = new aws.ec2.VpcIpam("exampleVpcIpam", {operatingRegions: [{
 *     regionName: current.then(current => current.name),
 * }]});
 * const exampleVpcIpamPool = new aws.ec2.VpcIpamPool("exampleVpcIpamPool", {
 *     addressFamily: "ipv4",
 *     ipamScopeId: exampleVpcIpam.privateDefaultScopeId,
 *     locale: current.then(current => current.name),
 * });
 * const exampleVpcIpamPoolCidr = new aws.ec2.VpcIpamPoolCidr("exampleVpcIpamPoolCidr", {
 *     ipamPoolId: exampleVpcIpamPool.id,
 *     cidr: "172.2.0.0/16",
 * });
 * const exampleVpcIpamPoolCidrAllocation = new aws.ec2.VpcIpamPoolCidrAllocation("exampleVpcIpamPoolCidrAllocation", {
 *     ipamPoolId: exampleVpcIpamPool.id,
 *     cidr: "172.2.0.0/24",
 * }, {
 *     dependsOn: [exampleVpcIpamPoolCidr],
 * });
 * ```
 *
 * With the `disallowedCidrs` attribute:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getRegion({});
 * const exampleVpcIpam = new aws.ec2.VpcIpam("exampleVpcIpam", {operatingRegions: [{
 *     regionName: current.then(current => current.name),
 * }]});
 * const exampleVpcIpamPool = new aws.ec2.VpcIpamPool("exampleVpcIpamPool", {
 *     addressFamily: "ipv4",
 *     ipamScopeId: exampleVpcIpam.privateDefaultScopeId,
 *     locale: current.then(current => current.name),
 * });
 * const exampleVpcIpamPoolCidr = new aws.ec2.VpcIpamPoolCidr("exampleVpcIpamPoolCidr", {
 *     ipamPoolId: exampleVpcIpamPool.id,
 *     cidr: "172.2.0.0/16",
 * });
 * const exampleVpcIpamPoolCidrAllocation = new aws.ec2.VpcIpamPoolCidrAllocation("exampleVpcIpamPoolCidrAllocation", {
 *     ipamPoolId: exampleVpcIpamPool.id,
 *     netmaskLength: 28,
 *     disallowedCidrs: ["172.2.0.0/28"],
 * }, {
 *     dependsOn: [exampleVpcIpamPoolCidr],
 * });
 * ```
 *
 * ## Import
 *
 * IPAMs can be imported using the `allocation id`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:ec2/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation example
 * ```
 */
class VpcIpamPoolCidrAllocation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disallowedCidrs"] = state ? state.disallowedCidrs : undefined;
            resourceInputs["ipamPoolAllocationId"] = state ? state.ipamPoolAllocationId : undefined;
            resourceInputs["ipamPoolId"] = state ? state.ipamPoolId : undefined;
            resourceInputs["netmaskLength"] = state ? state.netmaskLength : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceOwner"] = state ? state.resourceOwner : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.ipamPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipamPoolId'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disallowedCidrs"] = args ? args.disallowedCidrs : undefined;
            resourceInputs["ipamPoolId"] = args ? args.ipamPoolId : undefined;
            resourceInputs["netmaskLength"] = args ? args.netmaskLength : undefined;
            resourceInputs["ipamPoolAllocationId"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["resourceOwner"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcIpamPoolCidrAllocation.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing VpcIpamPoolCidrAllocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VpcIpamPoolCidrAllocation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VpcIpamPoolCidrAllocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcIpamPoolCidrAllocation.__pulumiType;
    }
}
exports.VpcIpamPoolCidrAllocation = VpcIpamPoolCidrAllocation;
/** @internal */
VpcIpamPoolCidrAllocation.__pulumiType = 'aws:ec2/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation';
//# sourceMappingURL=vpcIpamPoolCidrAllocation.js.map