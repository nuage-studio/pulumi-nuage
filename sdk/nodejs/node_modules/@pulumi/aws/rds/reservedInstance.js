"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservedInstance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = aws.rds.getReservedInstanceOffering({
 *     dbInstanceClass: "db.t2.micro",
 *     duration: 31536000,
 *     multiAz: false,
 *     offeringType: "All Upfront",
 *     productDescription: "mysql",
 * });
 * const example = new aws.rds.ReservedInstance("example", {
 *     offeringId: test.then(test => test.offeringId),
 *     reservationId: "optionalCustomReservationID",
 *     instanceCount: 3,
 * });
 * ```
 *
 * ## Import
 *
 * RDS DB Instance Reservations can be imported using the `instance_id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:rds/reservedInstance:ReservedInstance reservation_instance CustomReservationID
 * ```
 */
class ReservedInstance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["currencyCode"] = state ? state.currencyCode : undefined;
            resourceInputs["dbInstanceClass"] = state ? state.dbInstanceClass : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["fixedPrice"] = state ? state.fixedPrice : undefined;
            resourceInputs["instanceCount"] = state ? state.instanceCount : undefined;
            resourceInputs["leaseId"] = state ? state.leaseId : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["offeringId"] = state ? state.offeringId : undefined;
            resourceInputs["offeringType"] = state ? state.offeringType : undefined;
            resourceInputs["productDescription"] = state ? state.productDescription : undefined;
            resourceInputs["recurringCharges"] = state ? state.recurringCharges : undefined;
            resourceInputs["reservationId"] = state ? state.reservationId : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["usagePrice"] = state ? state.usagePrice : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.offeringId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'offeringId'");
            }
            resourceInputs["instanceCount"] = args ? args.instanceCount : undefined;
            resourceInputs["offeringId"] = args ? args.offeringId : undefined;
            resourceInputs["reservationId"] = args ? args.reservationId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["currencyCode"] = undefined /*out*/;
            resourceInputs["dbInstanceClass"] = undefined /*out*/;
            resourceInputs["duration"] = undefined /*out*/;
            resourceInputs["fixedPrice"] = undefined /*out*/;
            resourceInputs["leaseId"] = undefined /*out*/;
            resourceInputs["multiAz"] = undefined /*out*/;
            resourceInputs["offeringType"] = undefined /*out*/;
            resourceInputs["productDescription"] = undefined /*out*/;
            resourceInputs["recurringCharges"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["usagePrice"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReservedInstance.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ReservedInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ReservedInstance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReservedInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReservedInstance.__pulumiType;
    }
}
exports.ReservedInstance = ReservedInstance;
/** @internal */
ReservedInstance.__pulumiType = 'aws:rds/reservedInstance:ReservedInstance';
//# sourceMappingURL=reservedInstance.js.map