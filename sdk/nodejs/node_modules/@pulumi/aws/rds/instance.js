"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an RDS instance resource.  A DB instance is an isolated database
 * environment in the cloud.  A DB instance can contain multiple user-created
 * databases.
 *
 * Changes to a DB instance can occur when you manually change a parameter, such as
 * `allocatedStorage`, and are reflected in the next maintenance window. Because
 * of this, this provider may report a difference in its planning phase because a
 * modification has not yet taken place. You can use the `applyImmediately` flag
 * to instruct the service to apply the change immediately (see documentation
 * below).
 *
 * When upgrading the major version of an engine, `allowMajorVersionUpgrade`
 * must be set to `true`.
 *
 * > **Note:** using `applyImmediately` can result in a brief downtime as the
 * server reboots. See the AWS Docs on [RDS Maintenance][2] for more information.
 *
 * ## RDS Instance Class Types
 *
 * Amazon RDS supports three types of instance classes: Standard, Memory Optimized,
 * and Burstable Performance. For more information please read the AWS RDS documentation
 * about [DB Instance Class Types](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html)
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const defaultInstance = new aws.rds.Instance("default", {
 *     allocatedStorage: 10,
 *     dbName: "mydb",
 *     engine: "mysql",
 *     engineVersion: "5.7",
 *     instanceClass: "db.t3.micro",
 *     parameterGroupName: "default.mysql5.7",
 *     password: "foobarbaz",
 *     skipFinalSnapshot: true,
 *     username: "foo",
 * });
 * ```
 * ### Storage Autoscaling
 *
 * To enable Storage Autoscaling with instances that support the feature, define the `maxAllocatedStorage` argument higher than the `allocatedStorage` argument. This provider will automatically hide differences with the `allocatedStorage` argument value if autoscaling occurs.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.rds.Instance("example", {
 *     allocatedStorage: 50,
 *     maxAllocatedStorage: 100,
 * });
 * ```
 *
 * ## Import
 *
 * DB Instances can be imported using the `identifier`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:rds/instance:Instance default mydb-rds-instance
 * ```
 */
class Instance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            resourceInputs["allowMajorVersionUpgrade"] = state ? state.allowMajorVersionUpgrade : undefined;
            resourceInputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["backupRetentionPeriod"] = state ? state.backupRetentionPeriod : undefined;
            resourceInputs["backupWindow"] = state ? state.backupWindow : undefined;
            resourceInputs["caCertIdentifier"] = state ? state.caCertIdentifier : undefined;
            resourceInputs["characterSetName"] = state ? state.characterSetName : undefined;
            resourceInputs["copyTagsToSnapshot"] = state ? state.copyTagsToSnapshot : undefined;
            resourceInputs["customIamInstanceProfile"] = state ? state.customIamInstanceProfile : undefined;
            resourceInputs["customerOwnedIpEnabled"] = state ? state.customerOwnedIpEnabled : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["dbSubnetGroupName"] = state ? state.dbSubnetGroupName : undefined;
            resourceInputs["deleteAutomatedBackups"] = state ? state.deleteAutomatedBackups : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["domainIamRoleName"] = state ? state.domainIamRoleName : undefined;
            resourceInputs["enabledCloudwatchLogsExports"] = state ? state.enabledCloudwatchLogsExports : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["engineVersionActual"] = state ? state.engineVersionActual : undefined;
            resourceInputs["finalSnapshotIdentifier"] = state ? state.finalSnapshotIdentifier : undefined;
            resourceInputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            resourceInputs["iamDatabaseAuthenticationEnabled"] = state ? state.iamDatabaseAuthenticationEnabled : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["identifierPrefix"] = state ? state.identifierPrefix : undefined;
            resourceInputs["instanceClass"] = state ? state.instanceClass : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["latestRestorableTime"] = state ? state.latestRestorableTime : undefined;
            resourceInputs["licenseModel"] = state ? state.licenseModel : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["maxAllocatedStorage"] = state ? state.maxAllocatedStorage : undefined;
            resourceInputs["monitoringInterval"] = state ? state.monitoringInterval : undefined;
            resourceInputs["monitoringRoleArn"] = state ? state.monitoringRoleArn : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ncharCharacterSetName"] = state ? state.ncharCharacterSetName : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["optionGroupName"] = state ? state.optionGroupName : undefined;
            resourceInputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["performanceInsightsEnabled"] = state ? state.performanceInsightsEnabled : undefined;
            resourceInputs["performanceInsightsKmsKeyId"] = state ? state.performanceInsightsKmsKeyId : undefined;
            resourceInputs["performanceInsightsRetentionPeriod"] = state ? state.performanceInsightsRetentionPeriod : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            resourceInputs["replicaMode"] = state ? state.replicaMode : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["replicateSourceDb"] = state ? state.replicateSourceDb : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["restoreToPointInTime"] = state ? state.restoreToPointInTime : undefined;
            resourceInputs["s3Import"] = state ? state.s3Import : undefined;
            resourceInputs["securityGroupNames"] = state ? state.securityGroupNames : undefined;
            resourceInputs["skipFinalSnapshot"] = state ? state.skipFinalSnapshot : undefined;
            resourceInputs["snapshotIdentifier"] = state ? state.snapshotIdentifier : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageEncrypted"] = state ? state.storageEncrypted : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.instanceClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceClass'");
            }
            resourceInputs["allocatedStorage"] = args ? args.allocatedStorage : undefined;
            resourceInputs["allowMajorVersionUpgrade"] = args ? args.allowMajorVersionUpgrade : undefined;
            resourceInputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupRetentionPeriod"] = args ? args.backupRetentionPeriod : undefined;
            resourceInputs["backupWindow"] = args ? args.backupWindow : undefined;
            resourceInputs["caCertIdentifier"] = args ? args.caCertIdentifier : undefined;
            resourceInputs["characterSetName"] = args ? args.characterSetName : undefined;
            resourceInputs["copyTagsToSnapshot"] = args ? args.copyTagsToSnapshot : undefined;
            resourceInputs["customIamInstanceProfile"] = args ? args.customIamInstanceProfile : undefined;
            resourceInputs["customerOwnedIpEnabled"] = args ? args.customerOwnedIpEnabled : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["dbSubnetGroupName"] = args ? args.dbSubnetGroupName : undefined;
            resourceInputs["deleteAutomatedBackups"] = args ? args.deleteAutomatedBackups : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["domainIamRoleName"] = args ? args.domainIamRoleName : undefined;
            resourceInputs["enabledCloudwatchLogsExports"] = args ? args.enabledCloudwatchLogsExports : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["finalSnapshotIdentifier"] = args ? args.finalSnapshotIdentifier : undefined;
            resourceInputs["iamDatabaseAuthenticationEnabled"] = args ? args.iamDatabaseAuthenticationEnabled : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["identifierPrefix"] = args ? args.identifierPrefix : undefined;
            resourceInputs["instanceClass"] = args ? args.instanceClass : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["licenseModel"] = args ? args.licenseModel : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["maxAllocatedStorage"] = args ? args.maxAllocatedStorage : undefined;
            resourceInputs["monitoringInterval"] = args ? args.monitoringInterval : undefined;
            resourceInputs["monitoringRoleArn"] = args ? args.monitoringRoleArn : undefined;
            resourceInputs["multiAz"] = args ? args.multiAz : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ncharCharacterSetName"] = args ? args.ncharCharacterSetName : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["optionGroupName"] = args ? args.optionGroupName : undefined;
            resourceInputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["performanceInsightsEnabled"] = args ? args.performanceInsightsEnabled : undefined;
            resourceInputs["performanceInsightsKmsKeyId"] = args ? args.performanceInsightsKmsKeyId : undefined;
            resourceInputs["performanceInsightsRetentionPeriod"] = args ? args.performanceInsightsRetentionPeriod : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            resourceInputs["replicaMode"] = args ? args.replicaMode : undefined;
            resourceInputs["replicateSourceDb"] = args ? args.replicateSourceDb : undefined;
            resourceInputs["restoreToPointInTime"] = args ? args.restoreToPointInTime : undefined;
            resourceInputs["s3Import"] = args ? args.s3Import : undefined;
            resourceInputs["securityGroupNames"] = args ? args.securityGroupNames : undefined;
            resourceInputs["skipFinalSnapshot"] = args ? args.skipFinalSnapshot : undefined;
            resourceInputs["snapshotIdentifier"] = args ? args.snapshotIdentifier : undefined;
            resourceInputs["storageEncrypted"] = args ? args.storageEncrypted : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["engineVersionActual"] = undefined /*out*/;
            resourceInputs["hostedZoneId"] = undefined /*out*/;
            resourceInputs["latestRestorableTime"] = undefined /*out*/;
            resourceInputs["replicas"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Instance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }
}
exports.Instance = Instance;
/** @internal */
Instance.__pulumiType = 'aws:rds/instance:Instance';
//# sourceMappingURL=instance.js.map