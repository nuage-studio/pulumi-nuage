"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Access = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a AWS Transfer Access resource.
 *
 * ## Example Usage
 * ### Basic S3
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.transfer.Access("example", {
 *     externalId: "S-1-1-12-1234567890-123456789-1234567890-1234",
 *     serverId: aws_transfer_server.example.id,
 *     role: aws_iam_role.example.arn,
 *     homeDirectory: `/${aws_s3_bucket.example.id}/`,
 * });
 * ```
 * ### Basic EFS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.transfer.Access("test", {
 *     externalId: "S-1-1-12-1234567890-123456789-1234567890-1234",
 *     serverId: aws_transfer_server.test.id,
 *     role: aws_iam_role.test.arn,
 *     homeDirectory: `/${aws_efs_file_system.test.id}/`,
 *     posixProfile: {
 *         gid: 1000,
 *         uid: 1000,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Transfer Accesses can be imported using the `server_id` and `external_id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:transfer/access:Access example s-12345678/S-1-1-12-1234567890-123456789-1234567890-1234
 * ```
 */
class Access extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["homeDirectory"] = state ? state.homeDirectory : undefined;
            resourceInputs["homeDirectoryMappings"] = state ? state.homeDirectoryMappings : undefined;
            resourceInputs["homeDirectoryType"] = state ? state.homeDirectoryType : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["posixProfile"] = state ? state.posixProfile : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.externalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalId'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["homeDirectory"] = args ? args.homeDirectory : undefined;
            resourceInputs["homeDirectoryMappings"] = args ? args.homeDirectoryMappings : undefined;
            resourceInputs["homeDirectoryType"] = args ? args.homeDirectoryType : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["posixProfile"] = args ? args.posixProfile : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Access.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Access resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Access(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Access.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Access.__pulumiType;
    }
}
exports.Access = Access;
/** @internal */
Access.__pulumiType = 'aws:transfer/access:Access';
//# sourceMappingURL=access.js.map