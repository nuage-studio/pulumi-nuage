"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterIamRoles = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Redshift Cluster IAM Roles resource.
 *
 * > **NOTE:** A Redshift cluster's default IAM role can be managed both by this resource's `defaultIamRoleArn` argument and the `aws.redshift.Cluster` resource's `defaultIamRoleArn` argument. Do not configure different values for both arguments. Doing so will cause a conflict of default IAM roles.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.redshift.ClusterIamRoles("example", {
 *     clusterIdentifier: aws_redshift_cluster.example.cluster_identifier,
 *     iamRoleArns: [aws_iam_role.example.arn],
 * });
 * ```
 *
 * ## Import
 *
 * Redshift Cluster IAM Roless can be imported using the `cluster_identifier`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:redshift/clusterIamRoles:ClusterIamRoles examplegroup1 example
 * ```
 */
class ClusterIamRoles extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["defaultIamRoleArn"] = state ? state.defaultIamRoleArn : undefined;
            resourceInputs["iamRoleArns"] = state ? state.iamRoleArns : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["defaultIamRoleArn"] = args ? args.defaultIamRoleArn : undefined;
            resourceInputs["iamRoleArns"] = args ? args.iamRoleArns : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterIamRoles.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ClusterIamRoles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ClusterIamRoles(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ClusterIamRoles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterIamRoles.__pulumiType;
    }
}
exports.ClusterIamRoles = ClusterIamRoles;
/** @internal */
ClusterIamRoles.__pulumiType = 'aws:redshift/clusterIamRoles:ClusterIamRoles';
//# sourceMappingURL=clusterIamRoles.js.map