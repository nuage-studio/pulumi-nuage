"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.HsmClientCertificate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.redshift.HsmClientCertificate("example", {
 *     hsmClientCertificateIdentifier: "example",
 * });
 * ```
 *
 * ## Import
 *
 * Redshift Hsm Client Certificates support import by `hsm_client_certificate_identifier`, e.g., console
 *
 * ```sh
 *  $ pulumi import aws:redshift/hsmClientCertificate:HsmClientCertificate test example
 * ```
 */
class HsmClientCertificate extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["hsmClientCertificateIdentifier"] = state ? state.hsmClientCertificateIdentifier : undefined;
            resourceInputs["hsmClientCertificatePublicKey"] = state ? state.hsmClientCertificatePublicKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.hsmClientCertificateIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hsmClientCertificateIdentifier'");
            }
            resourceInputs["hsmClientCertificateIdentifier"] = args ? args.hsmClientCertificateIdentifier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["hsmClientCertificatePublicKey"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HsmClientCertificate.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing HsmClientCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new HsmClientCertificate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of HsmClientCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HsmClientCertificate.__pulumiType;
    }
}
exports.HsmClientCertificate = HsmClientCertificate;
/** @internal */
HsmClientCertificate.__pulumiType = 'aws:redshift/hsmClientCertificate:HsmClientCertificate';
//# sourceMappingURL=hsmClientCertificate.js.map