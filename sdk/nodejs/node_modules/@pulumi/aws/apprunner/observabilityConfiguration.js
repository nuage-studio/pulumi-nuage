"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservabilityConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an App Runner Observability Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.apprunner.ObservabilityConfiguration("example", {
 *     observabilityConfigurationName: "example",
 *     tags: {
 *         Name: "example-apprunner-observability-configuration",
 *     },
 *     traceConfiguration: {
 *         vendor: "AWSXRAY",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * App Runner Observability Configuration can be imported by using the `arn`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:apprunner/observabilityConfiguration:ObservabilityConfiguration example "arn:aws:apprunner:us-east-1:1234567890:observabilityconfiguration/example/1/d75bc7ea55b71e724fe5c23452fe22a1
 * ```
 */
class ObservabilityConfiguration extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["latest"] = state ? state.latest : undefined;
            resourceInputs["observabilityConfigurationName"] = state ? state.observabilityConfigurationName : undefined;
            resourceInputs["observabilityConfigurationRevision"] = state ? state.observabilityConfigurationRevision : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["traceConfiguration"] = state ? state.traceConfiguration : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.observabilityConfigurationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'observabilityConfigurationName'");
            }
            resourceInputs["observabilityConfigurationName"] = args ? args.observabilityConfigurationName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["traceConfiguration"] = args ? args.traceConfiguration : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["latest"] = undefined /*out*/;
            resourceInputs["observabilityConfigurationRevision"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObservabilityConfiguration.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ObservabilityConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ObservabilityConfiguration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ObservabilityConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObservabilityConfiguration.__pulumiType;
    }
}
exports.ObservabilityConfiguration = ObservabilityConfiguration;
/** @internal */
ObservabilityConfiguration.__pulumiType = 'aws:apprunner/observabilityConfiguration:ObservabilityConfiguration';
//# sourceMappingURL=observabilityConfiguration.js.map