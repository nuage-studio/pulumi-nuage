import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleBucketV2 = new aws.s3.BucketV2("exampleBucketV2", {forceDestroy: true});
 * const object = new aws.s3.BucketObjectv2("object", {
 *     bucket: exampleBucketV2.id,
 *     key: "transcribe/test1.txt",
 *     source: new pulumi.asset.FileAsset("test.txt"),
 * });
 * const exampleVocabulary = new aws.transcribe.Vocabulary("exampleVocabulary", {
 *     vocabularyName: "example",
 *     languageCode: "en-US",
 *     vocabularyFileUri: pulumi.interpolate`s3://${exampleBucketV2.id}/${object.key}`,
 *     tags: {
 *         tag1: "value1",
 *         tag2: "value3",
 *     },
 * }, {
 *     dependsOn: [object],
 * });
 * ```
 *
 * ## Import
 *
 * Transcribe Vocabulary can be imported using the `vocabulary_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:transcribe/vocabulary:Vocabulary example example-name
 * ```
 */
export declare class Vocabulary extends pulumi.CustomResource {
    /**
     * Get an existing Vocabulary resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VocabularyState, opts?: pulumi.CustomResourceOptions): Vocabulary;
    /**
     * Returns true if the given object is an instance of Vocabulary.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Vocabulary;
    /**
     * ARN of the Vocabulary.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Generated download URI.
     */
    readonly downloadUri: pulumi.Output<string>;
    /**
     * The language code you selected for your vocabulary.
     */
    readonly languageCode: pulumi.Output<string>;
    /**
     * - A list of terms to include in the vocabulary. Conflicts with `vocabularyFileUri`
     */
    readonly phrases: pulumi.Output<string[] | undefined>;
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * The Amazon S3 location (URI) of the text file that contains your custom vocabulary. Conflicts wth `phrases`.
     */
    readonly vocabularyFileUri: pulumi.Output<string>;
    /**
     * The name of the Vocabulary.
     */
    readonly vocabularyName: pulumi.Output<string>;
    /**
     * Create a Vocabulary resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VocabularyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Vocabulary resources.
 */
export interface VocabularyState {
    /**
     * ARN of the Vocabulary.
     */
    arn?: pulumi.Input<string>;
    /**
     * Generated download URI.
     */
    downloadUri?: pulumi.Input<string>;
    /**
     * The language code you selected for your vocabulary.
     */
    languageCode?: pulumi.Input<string>;
    /**
     * - A list of terms to include in the vocabulary. Conflicts with `vocabularyFileUri`
     */
    phrases?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The Amazon S3 location (URI) of the text file that contains your custom vocabulary. Conflicts wth `phrases`.
     */
    vocabularyFileUri?: pulumi.Input<string>;
    /**
     * The name of the Vocabulary.
     */
    vocabularyName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Vocabulary resource.
 */
export interface VocabularyArgs {
    /**
     * The language code you selected for your vocabulary.
     */
    languageCode: pulumi.Input<string>;
    /**
     * - A list of terms to include in the vocabulary. Conflicts with `vocabularyFileUri`
     */
    phrases?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The Amazon S3 location (URI) of the text file that contains your custom vocabulary. Conflicts wth `phrases`.
     */
    vocabularyFileUri?: pulumi.Input<string>;
    /**
     * The name of the Vocabulary.
     */
    vocabularyName: pulumi.Input<string>;
}
