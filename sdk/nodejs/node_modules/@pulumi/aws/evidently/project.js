"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudWatch Evidently Project resource.
 *
 * ## Example Usage
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.evidently.Project("example", {
 *     description: "Example Description",
 *     tags: {
 *         Key1: "example Project",
 *     },
 * });
 * ```
 * ### Store evaluation events in a CloudWatch Log Group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.evidently.Project("example", {
 *     dataDelivery: {
 *         cloudwatchLogs: {
 *             logGroup: "example-log-group-name",
 *         },
 *     },
 *     description: "Example Description",
 *     tags: {
 *         Key1: "example Project",
 *     },
 * });
 * ```
 * ### Store evaluation events in an S3 bucket
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.evidently.Project("example", {
 *     dataDelivery: {
 *         s3Destination: {
 *             bucket: "example-bucket-name",
 *             prefix: "example",
 *         },
 *     },
 *     description: "Example Description",
 *     tags: {
 *         Key1: "example Project",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * CloudWatch Evidently Project can be imported using the `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:evidently/project:Project example example
 * ```
 */
class Project extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["activeExperimentCount"] = state ? state.activeExperimentCount : undefined;
            resourceInputs["activeLaunchCount"] = state ? state.activeLaunchCount : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["dataDelivery"] = state ? state.dataDelivery : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["experimentCount"] = state ? state.experimentCount : undefined;
            resourceInputs["featureCount"] = state ? state.featureCount : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["launchCount"] = state ? state.launchCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["dataDelivery"] = args ? args.dataDelivery : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["activeExperimentCount"] = undefined /*out*/;
            resourceInputs["activeLaunchCount"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["experimentCount"] = undefined /*out*/;
            resourceInputs["featureCount"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["launchCount"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Project(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }
}
exports.Project = Project;
/** @internal */
Project.__pulumiType = 'aws:evidently/project:Project';
//# sourceMappingURL=project.js.map