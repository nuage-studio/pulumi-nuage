"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrackerAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleGeofenceCollection = new aws.location.GeofenceCollection("exampleGeofenceCollection", {collectionName: "example"});
 * const exampleTracker = new aws.location.Tracker("exampleTracker", {trackerName: "example"});
 * const exampleTrackerAssociation = new aws.location.TrackerAssociation("exampleTrackerAssociation", {
 *     consumerArn: exampleGeofenceCollection.collectionArn,
 *     trackerName: exampleTracker.trackerName,
 * });
 * ```
 *
 * ## Import
 *
 * Location Tracker Association can be imported using the `tracker_name|consumer_arn`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:location/trackerAssociation:TrackerAssociation example "tracker_name|consumer_arn"
 * ```
 */
class TrackerAssociation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["consumerArn"] = state ? state.consumerArn : undefined;
            resourceInputs["trackerName"] = state ? state.trackerName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.consumerArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerArn'");
            }
            if ((!args || args.trackerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trackerName'");
            }
            resourceInputs["consumerArn"] = args ? args.consumerArn : undefined;
            resourceInputs["trackerName"] = args ? args.trackerName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrackerAssociation.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing TrackerAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TrackerAssociation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TrackerAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrackerAssociation.__pulumiType;
    }
}
exports.TrackerAssociation = TrackerAssociation;
/** @internal */
TrackerAssociation.__pulumiType = 'aws:location/trackerAssociation:TrackerAssociation';
//# sourceMappingURL=trackerAssociation.js.map