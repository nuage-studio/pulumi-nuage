"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pipeline = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic Transcoder pipeline resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bar = new aws.elastictranscoder.Pipeline("bar", {
 *     inputBucket: aws_s3_bucket.input_bucket.bucket,
 *     role: aws_iam_role.test_role.arn,
 *     contentConfig: {
 *         bucket: aws_s3_bucket.content_bucket.bucket,
 *         storageClass: "Standard",
 *     },
 *     thumbnailConfig: {
 *         bucket: aws_s3_bucket.thumb_bucket.bucket,
 *         storageClass: "Standard",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Elastic Transcoder pipelines can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:elastictranscoder/pipeline:Pipeline basic_pipeline 1407981661351-cttk8b
 * ```
 */
class Pipeline extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["awsKmsKeyArn"] = state ? state.awsKmsKeyArn : undefined;
            resourceInputs["contentConfig"] = state ? state.contentConfig : undefined;
            resourceInputs["contentConfigPermissions"] = state ? state.contentConfigPermissions : undefined;
            resourceInputs["inputBucket"] = state ? state.inputBucket : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["outputBucket"] = state ? state.outputBucket : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["thumbnailConfig"] = state ? state.thumbnailConfig : undefined;
            resourceInputs["thumbnailConfigPermissions"] = state ? state.thumbnailConfigPermissions : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.inputBucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputBucket'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["awsKmsKeyArn"] = args ? args.awsKmsKeyArn : undefined;
            resourceInputs["contentConfig"] = args ? args.contentConfig : undefined;
            resourceInputs["contentConfigPermissions"] = args ? args.contentConfigPermissions : undefined;
            resourceInputs["inputBucket"] = args ? args.inputBucket : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["outputBucket"] = args ? args.outputBucket : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["thumbnailConfig"] = args ? args.thumbnailConfig : undefined;
            resourceInputs["thumbnailConfigPermissions"] = args ? args.thumbnailConfigPermissions : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pipeline.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Pipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Pipeline(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Pipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipeline.__pulumiType;
    }
}
exports.Pipeline = Pipeline;
/** @internal */
Pipeline.__pulumiType = 'aws:elastictranscoder/pipeline:Pipeline';
//# sourceMappingURL=pipeline.js.map