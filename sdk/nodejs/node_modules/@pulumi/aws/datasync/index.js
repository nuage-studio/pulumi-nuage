"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = exports.S3Location = exports.NfsLocation = exports.LocationSmb = exports.LocationHdfs = exports.LocationFsxWindows = exports.LocationFsxLustre = exports.FsxOpenZfsFileSystem = exports.EfsLocation = exports.Agent = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Agent = null;
exports.EfsLocation = null;
exports.FsxOpenZfsFileSystem = null;
exports.LocationFsxLustre = null;
exports.LocationFsxWindows = null;
exports.LocationHdfs = null;
exports.LocationSmb = null;
exports.NfsLocation = null;
exports.S3Location = null;
exports.Task = null;
utilities.lazyLoad(exports, ["Agent"], () => require("./agent"));
utilities.lazyLoad(exports, ["EfsLocation"], () => require("./efsLocation"));
utilities.lazyLoad(exports, ["FsxOpenZfsFileSystem"], () => require("./fsxOpenZfsFileSystem"));
utilities.lazyLoad(exports, ["LocationFsxLustre"], () => require("./locationFsxLustre"));
utilities.lazyLoad(exports, ["LocationFsxWindows"], () => require("./locationFsxWindows"));
utilities.lazyLoad(exports, ["LocationHdfs"], () => require("./locationHdfs"));
utilities.lazyLoad(exports, ["LocationSmb"], () => require("./locationSmb"));
utilities.lazyLoad(exports, ["NfsLocation"], () => require("./nfsLocation"));
utilities.lazyLoad(exports, ["S3Location"], () => require("./s3location"));
utilities.lazyLoad(exports, ["Task"], () => require("./task"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:datasync/agent:Agent":
                return new exports.Agent(name, undefined, { urn });
            case "aws:datasync/efsLocation:EfsLocation":
                return new exports.EfsLocation(name, undefined, { urn });
            case "aws:datasync/fsxOpenZfsFileSystem:FsxOpenZfsFileSystem":
                return new exports.FsxOpenZfsFileSystem(name, undefined, { urn });
            case "aws:datasync/locationFsxLustre:LocationFsxLustre":
                return new exports.LocationFsxLustre(name, undefined, { urn });
            case "aws:datasync/locationFsxWindows:LocationFsxWindows":
                return new exports.LocationFsxWindows(name, undefined, { urn });
            case "aws:datasync/locationHdfs:LocationHdfs":
                return new exports.LocationHdfs(name, undefined, { urn });
            case "aws:datasync/locationSmb:LocationSmb":
                return new exports.LocationSmb(name, undefined, { urn });
            case "aws:datasync/nfsLocation:NfsLocation":
                return new exports.NfsLocation(name, undefined, { urn });
            case "aws:datasync/s3Location:S3Location":
                return new exports.S3Location(name, undefined, { urn });
            case "aws:datasync/task:Task":
                return new exports.Task(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "datasync/agent", _module);
pulumi.runtime.registerResourceModule("aws", "datasync/efsLocation", _module);
pulumi.runtime.registerResourceModule("aws", "datasync/fsxOpenZfsFileSystem", _module);
pulumi.runtime.registerResourceModule("aws", "datasync/locationFsxLustre", _module);
pulumi.runtime.registerResourceModule("aws", "datasync/locationFsxWindows", _module);
pulumi.runtime.registerResourceModule("aws", "datasync/locationHdfs", _module);
pulumi.runtime.registerResourceModule("aws", "datasync/locationSmb", _module);
pulumi.runtime.registerResourceModule("aws", "datasync/nfsLocation", _module);
pulumi.runtime.registerResourceModule("aws", "datasync/s3Location", _module);
pulumi.runtime.registerResourceModule("aws", "datasync/task", _module);
//# sourceMappingURL=index.js.map