"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryDefinition = exports.MetricStream = exports.MetricAlarm = exports.LogSubscriptionFilter = exports.LogStream = exports.LogResourcePolicy = exports.LogMetricFilter = exports.LogGroup = exports.LogDestinationPolicy = exports.LogDestination = exports.getLogGroupsOutput = exports.getLogGroups = exports.getLogGroupOutput = exports.getLogGroup = exports.getEventSourceOutput = exports.getEventSource = exports.getEventConnectionOutput = exports.getEventConnection = exports.getEventBusOutput = exports.getEventBus = exports.EventTarget = exports.EventRule = exports.EventPermission = exports.EventConnection = exports.EventBusPolicy = exports.EventBus = exports.EventArchive = exports.EventApiDestination = exports.Dashboard = exports.CompositeAlarm = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./cloudwatchMixins"), exports);
exports.CompositeAlarm = null;
exports.Dashboard = null;
exports.EventApiDestination = null;
exports.EventArchive = null;
exports.EventBus = null;
exports.EventBusPolicy = null;
exports.EventConnection = null;
exports.EventPermission = null;
exports.EventRule = null;
__exportStar(require("./eventRuleMixins"), exports);
exports.EventTarget = null;
exports.getEventBus = null;
exports.getEventBusOutput = null;
exports.getEventConnection = null;
exports.getEventConnectionOutput = null;
exports.getEventSource = null;
exports.getEventSourceOutput = null;
exports.getLogGroup = null;
exports.getLogGroupOutput = null;
exports.getLogGroups = null;
exports.getLogGroupsOutput = null;
exports.LogDestination = null;
exports.LogDestinationPolicy = null;
exports.LogGroup = null;
__exportStar(require("./logGroupMixins"), exports);
exports.LogMetricFilter = null;
exports.LogResourcePolicy = null;
exports.LogStream = null;
exports.LogSubscriptionFilter = null;
exports.MetricAlarm = null;
exports.MetricStream = null;
exports.QueryDefinition = null;
utilities.lazyLoad(exports, ["CompositeAlarm"], () => require("./compositeAlarm"));
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));
utilities.lazyLoad(exports, ["EventApiDestination"], () => require("./eventApiDestination"));
utilities.lazyLoad(exports, ["EventArchive"], () => require("./eventArchive"));
utilities.lazyLoad(exports, ["EventBus"], () => require("./eventBus"));
utilities.lazyLoad(exports, ["EventBusPolicy"], () => require("./eventBusPolicy"));
utilities.lazyLoad(exports, ["EventConnection"], () => require("./eventConnection"));
utilities.lazyLoad(exports, ["EventPermission"], () => require("./eventPermission"));
utilities.lazyLoad(exports, ["EventRule"], () => require("./eventRule"));
utilities.lazyLoad(exports, ["EventTarget"], () => require("./eventTarget"));
utilities.lazyLoad(exports, ["getEventBus", "getEventBusOutput"], () => require("./getEventBus"));
utilities.lazyLoad(exports, ["getEventConnection", "getEventConnectionOutput"], () => require("./getEventConnection"));
utilities.lazyLoad(exports, ["getEventSource", "getEventSourceOutput"], () => require("./getEventSource"));
utilities.lazyLoad(exports, ["getLogGroup", "getLogGroupOutput"], () => require("./getLogGroup"));
utilities.lazyLoad(exports, ["getLogGroups", "getLogGroupsOutput"], () => require("./getLogGroups"));
utilities.lazyLoad(exports, ["LogDestination"], () => require("./logDestination"));
utilities.lazyLoad(exports, ["LogDestinationPolicy"], () => require("./logDestinationPolicy"));
utilities.lazyLoad(exports, ["LogGroup"], () => require("./logGroup"));
utilities.lazyLoad(exports, ["LogMetricFilter"], () => require("./logMetricFilter"));
utilities.lazyLoad(exports, ["LogResourcePolicy"], () => require("./logResourcePolicy"));
utilities.lazyLoad(exports, ["LogStream"], () => require("./logStream"));
utilities.lazyLoad(exports, ["LogSubscriptionFilter"], () => require("./logSubscriptionFilter"));
utilities.lazyLoad(exports, ["MetricAlarm"], () => require("./metricAlarm"));
utilities.lazyLoad(exports, ["MetricStream"], () => require("./metricStream"));
utilities.lazyLoad(exports, ["QueryDefinition"], () => require("./queryDefinition"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:cloudwatch/compositeAlarm:CompositeAlarm":
                return new exports.CompositeAlarm(name, undefined, { urn });
            case "aws:cloudwatch/dashboard:Dashboard":
                return new exports.Dashboard(name, undefined, { urn });
            case "aws:cloudwatch/eventApiDestination:EventApiDestination":
                return new exports.EventApiDestination(name, undefined, { urn });
            case "aws:cloudwatch/eventArchive:EventArchive":
                return new exports.EventArchive(name, undefined, { urn });
            case "aws:cloudwatch/eventBus:EventBus":
                return new exports.EventBus(name, undefined, { urn });
            case "aws:cloudwatch/eventBusPolicy:EventBusPolicy":
                return new exports.EventBusPolicy(name, undefined, { urn });
            case "aws:cloudwatch/eventConnection:EventConnection":
                return new exports.EventConnection(name, undefined, { urn });
            case "aws:cloudwatch/eventPermission:EventPermission":
                return new exports.EventPermission(name, undefined, { urn });
            case "aws:cloudwatch/eventRule:EventRule":
                return new exports.EventRule(name, undefined, { urn });
            case "aws:cloudwatch/eventTarget:EventTarget":
                return new exports.EventTarget(name, undefined, { urn });
            case "aws:cloudwatch/logDestination:LogDestination":
                return new exports.LogDestination(name, undefined, { urn });
            case "aws:cloudwatch/logDestinationPolicy:LogDestinationPolicy":
                return new exports.LogDestinationPolicy(name, undefined, { urn });
            case "aws:cloudwatch/logGroup:LogGroup":
                return new exports.LogGroup(name, undefined, { urn });
            case "aws:cloudwatch/logMetricFilter:LogMetricFilter":
                return new exports.LogMetricFilter(name, undefined, { urn });
            case "aws:cloudwatch/logResourcePolicy:LogResourcePolicy":
                return new exports.LogResourcePolicy(name, undefined, { urn });
            case "aws:cloudwatch/logStream:LogStream":
                return new exports.LogStream(name, undefined, { urn });
            case "aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter":
                return new exports.LogSubscriptionFilter(name, undefined, { urn });
            case "aws:cloudwatch/metricAlarm:MetricAlarm":
                return new exports.MetricAlarm(name, undefined, { urn });
            case "aws:cloudwatch/metricStream:MetricStream":
                return new exports.MetricStream(name, undefined, { urn });
            case "aws:cloudwatch/queryDefinition:QueryDefinition":
                return new exports.QueryDefinition(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "cloudwatch/compositeAlarm", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/dashboard", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventApiDestination", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventArchive", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventBus", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventBusPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventConnection", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventPermission", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventRule", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventTarget", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logDestination", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logDestinationPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logGroup", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logMetricFilter", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logResourcePolicy", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logStream", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logSubscriptionFilter", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/metricAlarm", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/metricStream", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/queryDefinition", _module);
//# sourceMappingURL=index.js.map