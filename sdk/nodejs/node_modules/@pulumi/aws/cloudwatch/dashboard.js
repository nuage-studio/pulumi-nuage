"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dashboard = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudWatch Dashboard resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const main = new aws.cloudwatch.Dashboard("main", {
 *     dashboardBody: `{
 *   "widgets": [
 *     {
 *       "type": "metric",
 *       "x": 0,
 *       "y": 0,
 *       "width": 12,
 *       "height": 6,
 *       "properties": {
 *         "metrics": [
 *           [
 *             "AWS/EC2",
 *             "CPUUtilization",
 *             "InstanceId",
 *             "i-012345"
 *           ]
 *         ],
 *         "period": 300,
 *         "stat": "Average",
 *         "region": "us-east-1",
 *         "title": "EC2 Instance CPU"
 *       }
 *     },
 *     {
 *       "type": "text",
 *       "x": 0,
 *       "y": 7,
 *       "width": 3,
 *       "height": 3,
 *       "properties": {
 *         "markdown": "Hello world"
 *       }
 *     }
 *   ]
 * }
 * `,
 *     dashboardName: "my-dashboard",
 * });
 * ```
 *
 * ## Import
 *
 * CloudWatch dashboards can be imported using the `dashboard_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cloudwatch/dashboard:Dashboard sample dashboard_name
 * ```
 */
class Dashboard extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["dashboardArn"] = state ? state.dashboardArn : undefined;
            resourceInputs["dashboardBody"] = state ? state.dashboardBody : undefined;
            resourceInputs["dashboardName"] = state ? state.dashboardName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dashboardBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dashboardBody'");
            }
            if ((!args || args.dashboardName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dashboardName'");
            }
            resourceInputs["dashboardBody"] = args ? args.dashboardBody : undefined;
            resourceInputs["dashboardName"] = args ? args.dashboardName : undefined;
            resourceInputs["dashboardArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Dashboard(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }
}
exports.Dashboard = Dashboard;
/** @internal */
Dashboard.__pulumiType = 'aws:cloudwatch/dashboard:Dashboard';
//# sourceMappingURL=dashboard.js.map