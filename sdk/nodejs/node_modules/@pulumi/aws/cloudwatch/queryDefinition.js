"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryDefinition = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudWatch Logs query definition resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudwatch.QueryDefinition("example", {
 *     logGroupNames: [
 *         "/aws/logGroup1",
 *         "/aws/logGroup2",
 *     ],
 *     queryString: `fields @timestamp, @message
 * | sort @timestamp desc
 * | limit 25
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * CloudWatch query definitions can be imported using the query definition ARN. The ARN can be found on the "Edit Query" page for the query in the AWS Console.
 *
 * ```sh
 *  $ pulumi import aws:cloudwatch/queryDefinition:QueryDefinition example arn:aws:logs:us-west-2:123456789012:query-definition:269951d7-6f75-496d-9d7b-6b7a5486bdbd
 * ```
 */
class QueryDefinition extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["logGroupNames"] = state ? state.logGroupNames : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queryDefinitionId"] = state ? state.queryDefinitionId : undefined;
            resourceInputs["queryString"] = state ? state.queryString : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.queryString === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryString'");
            }
            resourceInputs["logGroupNames"] = args ? args.logGroupNames : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queryString"] = args ? args.queryString : undefined;
            resourceInputs["queryDefinitionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QueryDefinition.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing QueryDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new QueryDefinition(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of QueryDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QueryDefinition.__pulumiType;
    }
}
exports.QueryDefinition = QueryDefinition;
/** @internal */
QueryDefinition.__pulumiType = 'aws:cloudwatch/queryDefinition:QueryDefinition';
//# sourceMappingURL=queryDefinition.js.map