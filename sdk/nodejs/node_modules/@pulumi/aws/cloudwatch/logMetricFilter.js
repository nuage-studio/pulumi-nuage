"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogMetricFilter = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudWatch Log Metric Filter resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const dada = new aws.cloudwatch.LogGroup("dada", {});
 * const yada = new aws.cloudwatch.LogMetricFilter("yada", {
 *     pattern: "",
 *     logGroupName: dada.name,
 *     metricTransformation: {
 *         name: "EventCount",
 *         namespace: "YourNamespace",
 *         value: "1",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * CloudWatch Log Metric Filter can be imported using the `log_group_name:name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cloudwatch/logMetricFilter:LogMetricFilter test /aws/lambda/function:test
 * ```
 */
class LogMetricFilter extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["logGroupName"] = state ? state.logGroupName : undefined;
            resourceInputs["metricTransformation"] = state ? state.metricTransformation : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.logGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logGroupName'");
            }
            if ((!args || args.metricTransformation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricTransformation'");
            }
            if ((!args || args.pattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pattern'");
            }
            resourceInputs["logGroupName"] = args ? args.logGroupName : undefined;
            resourceInputs["metricTransformation"] = args ? args.metricTransformation : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogMetricFilter.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing LogMetricFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LogMetricFilter(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LogMetricFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogMetricFilter.__pulumiType;
    }
}
exports.LogMetricFilter = LogMetricFilter;
/** @internal */
LogMetricFilter.__pulumiType = 'aws:cloudwatch/logMetricFilter:LogMetricFilter';
//# sourceMappingURL=logMetricFilter.js.map