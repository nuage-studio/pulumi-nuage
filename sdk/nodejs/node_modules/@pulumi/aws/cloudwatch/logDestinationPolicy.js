"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogDestinationPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudWatch Logs destination policy resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testDestination = new aws.cloudwatch.LogDestination("testDestination", {
 *     roleArn: aws_iam_role.iam_for_cloudwatch.arn,
 *     targetArn: aws_kinesis_stream.kinesis_for_cloudwatch.arn,
 * });
 * const testDestinationPolicyPolicyDocument = aws.iam.getPolicyDocumentOutput({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "AWS",
 *             identifiers: ["123456789012"],
 *         }],
 *         actions: ["logs:PutSubscriptionFilter"],
 *         resources: [testDestination.arn],
 *     }],
 * });
 * const testDestinationPolicyLogDestinationPolicy = new aws.cloudwatch.LogDestinationPolicy("testDestinationPolicyLogDestinationPolicy", {
 *     destinationName: testDestination.name,
 *     accessPolicy: testDestinationPolicyPolicyDocument.apply(testDestinationPolicyPolicyDocument => testDestinationPolicyPolicyDocument.json),
 * });
 * ```
 *
 * ## Import
 *
 * CloudWatch Logs destination policies can be imported using the `destination_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cloudwatch/logDestinationPolicy:LogDestinationPolicy test_destination_policy test_destination
 * ```
 */
class LogDestinationPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessPolicy"] = state ? state.accessPolicy : undefined;
            resourceInputs["destinationName"] = state ? state.destinationName : undefined;
            resourceInputs["forceUpdate"] = state ? state.forceUpdate : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accessPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessPolicy'");
            }
            if ((!args || args.destinationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationName'");
            }
            resourceInputs["accessPolicy"] = args ? args.accessPolicy : undefined;
            resourceInputs["destinationName"] = args ? args.destinationName : undefined;
            resourceInputs["forceUpdate"] = args ? args.forceUpdate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogDestinationPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing LogDestinationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LogDestinationPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LogDestinationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogDestinationPolicy.__pulumiType;
    }
}
exports.LogDestinationPolicy = LogDestinationPolicy;
/** @internal */
LogDestinationPolicy.__pulumiType = 'aws:cloudwatch/logDestinationPolicy:LogDestinationPolicy';
//# sourceMappingURL=logDestinationPolicy.js.map