import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides an EventBridge connection resource.
 *
 * > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     authParameters: {
 *         apiKey: {
 *             key: "x-signature",
 *             value: "1234",
 *         },
 *     },
 *     authorizationType: "API_KEY",
 *     description: "A connection description",
 * });
 * ```
 * ### Basic Authorization
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     authParameters: {
 *         basic: {
 *             password: "Pass1234!",
 *             username: "user",
 *         },
 *     },
 *     authorizationType: "BASIC",
 *     description: "A connection description",
 * });
 * ```
 * ### OAuth Authorization
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     authParameters: {
 *         oauth: {
 *             authorizationEndpoint: "https://auth.url.com/endpoint",
 *             clientParameters: {
 *                 clientId: "1234567890",
 *                 clientSecret: "Pass1234!",
 *             },
 *             httpMethod: "GET",
 *             oauthHttpParameters: {
 *                 bodies: [{
 *                     isValueSecret: false,
 *                     key: "body-parameter-key",
 *                     value: "body-parameter-value",
 *                 }],
 *                 headers: [{
 *                     isValueSecret: false,
 *                     key: "header-parameter-key",
 *                     value: "header-parameter-value",
 *                 }],
 *                 queryStrings: [{
 *                     isValueSecret: false,
 *                     key: "query-string-parameter-key",
 *                     value: "query-string-parameter-value",
 *                 }],
 *             },
 *         },
 *     },
 *     authorizationType: "OAUTH_CLIENT_CREDENTIALS",
 *     description: "A connection description",
 * });
 * ```
 * ### Invocation Http Parameters
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     authParameters: {
 *         basic: {
 *             password: "Pass1234!",
 *             username: "user",
 *         },
 *         invocationHttpParameters: {
 *             bodies: [
 *                 {
 *                     isValueSecret: false,
 *                     key: "body-parameter-key",
 *                     value: "body-parameter-value",
 *                 },
 *                 {
 *                     isValueSecret: true,
 *                     key: "body-parameter-key2",
 *                     value: "body-parameter-value2",
 *                 },
 *             ],
 *             headers: [{
 *                 isValueSecret: false,
 *                 key: "header-parameter-key",
 *                 value: "header-parameter-value",
 *             }],
 *             queryStrings: [{
 *                 isValueSecret: false,
 *                 key: "query-string-parameter-key",
 *                 value: "query-string-parameter-value",
 *             }],
 *         },
 *     },
 *     authorizationType: "BASIC",
 *     description: "A connection description",
 * });
 * ```
 *
 * ## Import
 *
 * EventBridge Connection can be imported using the `name`, e.g., console
 *
 * ```sh
 *  $ pulumi import aws:cloudwatch/eventConnection:EventConnection test ngrok-connection
 * ```
 */
export declare class EventConnection extends pulumi.CustomResource {
    /**
     * Get an existing EventConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventConnectionState, opts?: pulumi.CustomResourceOptions): EventConnection;
    /**
     * Returns true if the given object is an instance of EventConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is EventConnection;
    /**
     * The Amazon Resource Name (ARN) of the connection.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Parameters used for authorization. A maximum of 1 are allowed. Documented below.
     */
    readonly authParameters: pulumi.Output<outputs.cloudwatch.EventConnectionAuthParameters>;
    /**
     * Choose the type of authorization to use for the connection. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
     */
    readonly authorizationType: pulumi.Output<string>;
    /**
     * Enter a description for the connection. Maximum of 512 characters.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the new connection. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the secret created from the authorization parameters specified for the connection.
     */
    readonly secretArn: pulumi.Output<string>;
    /**
     * Create a EventConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventConnectionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering EventConnection resources.
 */
export interface EventConnectionState {
    /**
     * The Amazon Resource Name (ARN) of the connection.
     */
    arn?: pulumi.Input<string>;
    /**
     * Parameters used for authorization. A maximum of 1 are allowed. Documented below.
     */
    authParameters?: pulumi.Input<inputs.cloudwatch.EventConnectionAuthParameters>;
    /**
     * Choose the type of authorization to use for the connection. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
     */
    authorizationType?: pulumi.Input<string>;
    /**
     * Enter a description for the connection. Maximum of 512 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the new connection. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the secret created from the authorization parameters specified for the connection.
     */
    secretArn?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a EventConnection resource.
 */
export interface EventConnectionArgs {
    /**
     * Parameters used for authorization. A maximum of 1 are allowed. Documented below.
     */
    authParameters: pulumi.Input<inputs.cloudwatch.EventConnectionAuthParameters>;
    /**
     * Choose the type of authorization to use for the connection. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
     */
    authorizationType: pulumi.Input<string>;
    /**
     * Enter a description for the connection. Maximum of 512 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the new connection. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
     */
    name?: pulumi.Input<string>;
}
