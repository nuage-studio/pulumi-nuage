"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeRepository = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a SageMaker Code Repository resource.
 *
 * ## Example Usage
 * ### Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.sagemaker.CodeRepository("example", {
 *     codeRepositoryName: "example",
 *     gitConfig: {
 *         repositoryUrl: "https://github.com/hashicorp/terraform-provider-aws.git",
 *     },
 * });
 * ```
 * ### Example with Secret
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleSecret = new aws.secretsmanager.Secret("exampleSecret", {});
 * const exampleSecretVersion = new aws.secretsmanager.SecretVersion("exampleSecretVersion", {
 *     secretId: exampleSecret.id,
 *     secretString: JSON.stringify({
 *         username: "example",
 *         password: "example",
 *     }),
 * });
 * const exampleCodeRepository = new aws.sagemaker.CodeRepository("exampleCodeRepository", {
 *     codeRepositoryName: "example",
 *     gitConfig: {
 *         repositoryUrl: "https://github.com/hashicorp/terraform-provider-aws.git",
 *         secretArn: exampleSecret.arn,
 *     },
 * }, {
 *     dependsOn: [exampleSecretVersion],
 * });
 * ```
 *
 * ## Import
 *
 * SageMaker Code Repositories can be imported using the `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:sagemaker/codeRepository:CodeRepository test_code_repository my-code-repo
 * ```
 */
class CodeRepository extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["codeRepositoryName"] = state ? state.codeRepositoryName : undefined;
            resourceInputs["gitConfig"] = state ? state.gitConfig : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.codeRepositoryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'codeRepositoryName'");
            }
            if ((!args || args.gitConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gitConfig'");
            }
            resourceInputs["codeRepositoryName"] = args ? args.codeRepositoryName : undefined;
            resourceInputs["gitConfig"] = args ? args.gitConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodeRepository.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CodeRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CodeRepository(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CodeRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodeRepository.__pulumiType;
    }
}
exports.CodeRepository = CodeRepository;
/** @internal */
CodeRepository.__pulumiType = 'aws:sagemaker/codeRepository:CodeRepository';
//# sourceMappingURL=codeRepository.js.map