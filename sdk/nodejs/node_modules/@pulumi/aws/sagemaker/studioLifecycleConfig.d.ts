import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a SageMaker Studio Lifecycle Config resource.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * SageMaker Code Studio Lifecycle Configs can be imported using the `studio_lifecycle_config_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:sagemaker/studioLifecycleConfig:StudioLifecycleConfig example example
 * ```
 */
export declare class StudioLifecycleConfig extends pulumi.CustomResource {
    /**
     * Get an existing StudioLifecycleConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StudioLifecycleConfigState, opts?: pulumi.CustomResourceOptions): StudioLifecycleConfig;
    /**
     * Returns true if the given object is an instance of StudioLifecycleConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is StudioLifecycleConfig;
    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
     */
    readonly studioLifecycleConfigAppType: pulumi.Output<string>;
    /**
     * The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
     */
    readonly studioLifecycleConfigContent: pulumi.Output<string>;
    /**
     * The name of the Studio Lifecycle Configuration to create.
     */
    readonly studioLifecycleConfigName: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Create a StudioLifecycleConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StudioLifecycleConfigArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering StudioLifecycleConfig resources.
 */
export interface StudioLifecycleConfigState {
    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
     */
    arn?: pulumi.Input<string>;
    /**
     * The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
     */
    studioLifecycleConfigAppType?: pulumi.Input<string>;
    /**
     * The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
     */
    studioLifecycleConfigContent?: pulumi.Input<string>;
    /**
     * The name of the Studio Lifecycle Configuration to create.
     */
    studioLifecycleConfigName?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
/**
 * The set of arguments for constructing a StudioLifecycleConfig resource.
 */
export interface StudioLifecycleConfigArgs {
    /**
     * The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
     */
    studioLifecycleConfigAppType: pulumi.Input<string>;
    /**
     * The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
     */
    studioLifecycleConfigContent: pulumi.Input<string>;
    /**
     * The name of the Studio Lifecycle Configuration to create.
     */
    studioLifecycleConfigName: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
