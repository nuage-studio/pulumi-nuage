import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides a SageMaker Code Repository resource.
 *
 * ## Example Usage
 * ### Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.sagemaker.CodeRepository("example", {
 *     codeRepositoryName: "example",
 *     gitConfig: {
 *         repositoryUrl: "https://github.com/hashicorp/terraform-provider-aws.git",
 *     },
 * });
 * ```
 * ### Example with Secret
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleSecret = new aws.secretsmanager.Secret("exampleSecret", {});
 * const exampleSecretVersion = new aws.secretsmanager.SecretVersion("exampleSecretVersion", {
 *     secretId: exampleSecret.id,
 *     secretString: JSON.stringify({
 *         username: "example",
 *         password: "example",
 *     }),
 * });
 * const exampleCodeRepository = new aws.sagemaker.CodeRepository("exampleCodeRepository", {
 *     codeRepositoryName: "example",
 *     gitConfig: {
 *         repositoryUrl: "https://github.com/hashicorp/terraform-provider-aws.git",
 *         secretArn: exampleSecret.arn,
 *     },
 * }, {
 *     dependsOn: [exampleSecretVersion],
 * });
 * ```
 *
 * ## Import
 *
 * SageMaker Code Repositories can be imported using the `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:sagemaker/codeRepository:CodeRepository test_code_repository my-code-repo
 * ```
 */
export declare class CodeRepository extends pulumi.CustomResource {
    /**
     * Get an existing CodeRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodeRepositoryState, opts?: pulumi.CustomResourceOptions): CodeRepository;
    /**
     * Returns true if the given object is an instance of CodeRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is CodeRepository;
    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Code Repository.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The name of the Code Repository (must be unique).
     */
    readonly codeRepositoryName: pulumi.Output<string>;
    /**
     * Specifies details about the repository. see Git Config details below.
     */
    readonly gitConfig: pulumi.Output<outputs.sagemaker.CodeRepositoryGitConfig>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * Create a CodeRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodeRepositoryArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering CodeRepository resources.
 */
export interface CodeRepositoryState {
    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Code Repository.
     */
    arn?: pulumi.Input<string>;
    /**
     * The name of the Code Repository (must be unique).
     */
    codeRepositoryName?: pulumi.Input<string>;
    /**
     * Specifies details about the repository. see Git Config details below.
     */
    gitConfig?: pulumi.Input<inputs.sagemaker.CodeRepositoryGitConfig>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
/**
 * The set of arguments for constructing a CodeRepository resource.
 */
export interface CodeRepositoryArgs {
    /**
     * The name of the Code Repository (must be unique).
     */
    codeRepositoryName: pulumi.Input<string>;
    /**
     * Specifies details about the repository. see Git Config details below.
     */
    gitConfig: pulumi.Input<inputs.sagemaker.CodeRepositoryGitConfig>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
