"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeploymentConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CodeDeploy deployment config for an application
 *
 * ## Example Usage
 * ### Server Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const fooDeploymentConfig = new aws.codedeploy.DeploymentConfig("fooDeploymentConfig", {
 *     deploymentConfigName: "test-deployment-config",
 *     minimumHealthyHosts: {
 *         type: "HOST_COUNT",
 *         value: 2,
 *     },
 * });
 * const fooDeploymentGroup = new aws.codedeploy.DeploymentGroup("fooDeploymentGroup", {
 *     appName: aws_codedeploy_app.foo_app.name,
 *     deploymentGroupName: "bar",
 *     serviceRoleArn: aws_iam_role.foo_role.arn,
 *     deploymentConfigName: fooDeploymentConfig.id,
 *     ec2TagFilters: [{
 *         key: "filterkey",
 *         type: "KEY_AND_VALUE",
 *         value: "filtervalue",
 *     }],
 *     triggerConfigurations: [{
 *         triggerEvents: ["DeploymentFailure"],
 *         triggerName: "foo-trigger",
 *         triggerTargetArn: "foo-topic-arn",
 *     }],
 *     autoRollbackConfiguration: {
 *         enabled: true,
 *         events: ["DEPLOYMENT_FAILURE"],
 *     },
 *     alarmConfiguration: {
 *         alarms: ["my-alarm-name"],
 *         enabled: true,
 *     },
 * });
 * ```
 * ### Lambda Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const fooDeploymentConfig = new aws.codedeploy.DeploymentConfig("fooDeploymentConfig", {
 *     deploymentConfigName: "test-deployment-config",
 *     computePlatform: "Lambda",
 *     trafficRoutingConfig: {
 *         type: "TimeBasedLinear",
 *         timeBasedLinear: {
 *             interval: 10,
 *             percentage: 10,
 *         },
 *     },
 * });
 * const fooDeploymentGroup = new aws.codedeploy.DeploymentGroup("fooDeploymentGroup", {
 *     appName: aws_codedeploy_app.foo_app.name,
 *     deploymentGroupName: "bar",
 *     serviceRoleArn: aws_iam_role.foo_role.arn,
 *     deploymentConfigName: fooDeploymentConfig.id,
 *     autoRollbackConfiguration: {
 *         enabled: true,
 *         events: ["DEPLOYMENT_STOP_ON_ALARM"],
 *     },
 *     alarmConfiguration: {
 *         alarms: ["my-alarm-name"],
 *         enabled: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * CodeDeploy Deployment Configurations can be imported using the `deployment_config_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:codedeploy/deploymentConfig:DeploymentConfig example my-deployment-config
 * ```
 */
class DeploymentConfig extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["computePlatform"] = state ? state.computePlatform : undefined;
            resourceInputs["deploymentConfigId"] = state ? state.deploymentConfigId : undefined;
            resourceInputs["deploymentConfigName"] = state ? state.deploymentConfigName : undefined;
            resourceInputs["minimumHealthyHosts"] = state ? state.minimumHealthyHosts : undefined;
            resourceInputs["trafficRoutingConfig"] = state ? state.trafficRoutingConfig : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["computePlatform"] = args ? args.computePlatform : undefined;
            resourceInputs["deploymentConfigName"] = args ? args.deploymentConfigName : undefined;
            resourceInputs["minimumHealthyHosts"] = args ? args.minimumHealthyHosts : undefined;
            resourceInputs["trafficRoutingConfig"] = args ? args.trafficRoutingConfig : undefined;
            resourceInputs["deploymentConfigId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeploymentConfig.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DeploymentConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DeploymentConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DeploymentConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeploymentConfig.__pulumiType;
    }
}
exports.DeploymentConfig = DeploymentConfig;
/** @internal */
DeploymentConfig.__pulumiType = 'aws:codedeploy/deploymentConfig:DeploymentConfig';
//# sourceMappingURL=deploymentConfig.js.map