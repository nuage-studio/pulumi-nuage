"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Faq = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.kendra.Faq("example", {
 *     indexId: aws_kendra_index.example.id,
 *     roleArn: aws_iam_role.example.arn,
 *     s3Path: {
 *         bucket: aws_s3_bucket.example.id,
 *         key: aws_s3_object.example.key,
 *     },
 *     tags: {
 *         Name: "Example Kendra Faq",
 *     },
 * });
 * ```
 * ### With File Format
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.kendra.Faq("example", {
 *     indexId: aws_kendra_index.example.id,
 *     fileFormat: "CSV",
 *     roleArn: aws_iam_role.example.arn,
 *     s3Path: {
 *         bucket: aws_s3_bucket.example.id,
 *         key: aws_s3_object.example.key,
 *     },
 * });
 * ```
 * ### With Language Code
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.kendra.Faq("example", {
 *     indexId: aws_kendra_index.example.id,
 *     languageCode: "en",
 *     roleArn: aws_iam_role.example.arn,
 *     s3Path: {
 *         bucket: aws_s3_bucket.example.id,
 *         key: aws_s3_object.example.key,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * `aws_kendra_faq` can be imported using the unique identifiers of the FAQ and index separated by a slash (`/`), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:kendra/faq:Faq example faq-123456780/idx-8012925589
 * ```
 */
class Faq extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["faqId"] = state ? state.faqId : undefined;
            resourceInputs["fileFormat"] = state ? state.fileFormat : undefined;
            resourceInputs["indexId"] = state ? state.indexId : undefined;
            resourceInputs["languageCode"] = state ? state.languageCode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["s3Path"] = state ? state.s3Path : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.indexId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexId'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.s3Path === undefined) && !opts.urn) {
                throw new Error("Missing required property 's3Path'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileFormat"] = args ? args.fileFormat : undefined;
            resourceInputs["indexId"] = args ? args.indexId : undefined;
            resourceInputs["languageCode"] = args ? args.languageCode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["s3Path"] = args ? args.s3Path : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["faqId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Faq.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Faq resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Faq(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Faq.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Faq.__pulumiType;
    }
}
exports.Faq = Faq;
/** @internal */
Faq.__pulumiType = 'aws:kendra/faq:Faq';
//# sourceMappingURL=faq.js.map