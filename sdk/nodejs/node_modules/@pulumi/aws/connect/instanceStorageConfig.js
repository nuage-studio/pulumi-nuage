"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceStorageConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Amazon Connect Instance Storage Config resource. For more information see
 * [Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html)
 *
 * ## Example Usage
 * ### Storage Config Kinesis Firehose Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.connect.InstanceStorageConfig("example", {
 *     instanceId: aws_connect_instance.example.id,
 *     resourceType: "CONTACT_TRACE_RECORDS",
 *     storageConfig: {
 *         kinesisFirehoseConfig: {
 *             firehoseArn: aws_kinesis_firehose_delivery_stream.example.arn,
 *         },
 *         storageType: "KINESIS_FIREHOSE",
 *     },
 * });
 * ```
 * ### Storage Config Kinesis Stream Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.connect.InstanceStorageConfig("example", {
 *     instanceId: aws_connect_instance.example.id,
 *     resourceType: "CONTACT_TRACE_RECORDS",
 *     storageConfig: {
 *         kinesisStreamConfig: {
 *             streamArn: aws_kinesis_stream.example.arn,
 *         },
 *         storageType: "KINESIS_STREAM",
 *     },
 * });
 * ```
 * ### Storage Config Kinesis Video Stream Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.connect.InstanceStorageConfig("example", {
 *     instanceId: aws_connect_instance.example.id,
 *     resourceType: "MEDIA_STREAMS",
 *     storageConfig: {
 *         kinesisVideoStreamConfig: {
 *             prefix: "example",
 *             retentionPeriodHours: 3,
 *             encryptionConfig: {
 *                 encryptionType: "KMS",
 *                 keyId: aws_kms_key.example.arn,
 *             },
 *         },
 *         storageType: "KINESIS_VIDEO_STREAM",
 *     },
 * });
 * ```
 * ### Storage Config S3 Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.connect.InstanceStorageConfig("example", {
 *     instanceId: aws_connect_instance.example.id,
 *     resourceType: "CHAT_TRANSCRIPTS",
 *     storageConfig: {
 *         s3Config: {
 *             bucketName: aws_s3_bucket.example.id,
 *             bucketPrefix: "example",
 *         },
 *         storageType: "S3",
 *     },
 * });
 * ```
 * ### Storage Config S3 Config with Encryption Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.connect.InstanceStorageConfig("example", {
 *     instanceId: aws_connect_instance.example.id,
 *     resourceType: "CHAT_TRANSCRIPTS",
 *     storageConfig: {
 *         s3Config: {
 *             bucketName: aws_s3_bucket.example.id,
 *             bucketPrefix: "example",
 *             encryptionConfig: {
 *                 encryptionType: "KMS",
 *                 keyId: aws_kms_key.example.arn,
 *             },
 *         },
 *         storageType: "S3",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Amazon Connect Instance Storage Configs can be imported using the `instance_id`, `association_id`, and `resource_type` separated by a colon (`:`), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:connect/instanceStorageConfig:InstanceStorageConfig example f1288a1f-6193-445a-b47e-af739b2:c1d4e5f6-1b3c-1b3c-1b3c-c1d4e5f6c1d4e5:CHAT_TRANSCRIPTS
 * ```
 */
class InstanceStorageConfig extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["associationId"] = state ? state.associationId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["storageConfig"] = state ? state.storageConfig : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.storageConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageConfig'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["storageConfig"] = args ? args.storageConfig : undefined;
            resourceInputs["associationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceStorageConfig.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing InstanceStorageConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new InstanceStorageConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of InstanceStorageConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceStorageConfig.__pulumiType;
    }
}
exports.InstanceStorageConfig = InstanceStorageConfig;
/** @internal */
InstanceStorageConfig.__pulumiType = 'aws:connect/instanceStorageConfig:InstanceStorageConfig';
//# sourceMappingURL=instanceStorageConfig.js.map