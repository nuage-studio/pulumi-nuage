"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Amplify Domain Association resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleApp = new aws.amplify.App("exampleApp", {customRules: [{
 *     source: "https://example.com",
 *     status: "302",
 *     target: "https://www.example.com",
 * }]});
 * const master = new aws.amplify.Branch("master", {
 *     appId: exampleApp.id,
 *     branchName: "master",
 * });
 * const exampleDomainAssociation = new aws.amplify.DomainAssociation("exampleDomainAssociation", {
 *     appId: exampleApp.id,
 *     domainName: "example.com",
 *     subDomains: [
 *         {
 *             branchName: master.branchName,
 *             prefix: "",
 *         },
 *         {
 *             branchName: master.branchName,
 *             prefix: "www",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Amplify domain association can be imported using `app_id` and `domain_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:amplify/domainAssociation:DomainAssociation app d2ypk4k47z8u6/example.com
 * ```
 */
class DomainAssociation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificateVerificationDnsRecord"] = state ? state.certificateVerificationDnsRecord : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["subDomains"] = state ? state.subDomains : undefined;
            resourceInputs["waitForVerification"] = state ? state.waitForVerification : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.subDomains === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subDomains'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["subDomains"] = args ? args.subDomains : undefined;
            resourceInputs["waitForVerification"] = args ? args.waitForVerification : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["certificateVerificationDnsRecord"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainAssociation.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DomainAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DomainAssociation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DomainAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainAssociation.__pulumiType;
    }
}
exports.DomainAssociation = DomainAssociation;
/** @internal */
DomainAssociation.__pulumiType = 'aws:amplify/domainAssociation:DomainAssociation';
//# sourceMappingURL=domainAssociation.js.map