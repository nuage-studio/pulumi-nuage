"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OriginAccessIdentity = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates an Amazon CloudFront origin access identity.
 *
 * For information about CloudFront distributions, see the
 * [Amazon CloudFront Developer Guide](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html). For more information on generating
 * origin access identities, see
 * [Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content][2].
 *
 * ## Example Usage
 *
 * The following example below creates a CloudFront origin access identity.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudfront.OriginAccessIdentity("example", {
 *     comment: "Some comment",
 * });
 * ```
 * ## Using With CloudFront
 *
 * Normally, when referencing an origin access identity in CloudFront, you need to
 * prefix the ID with the `origin-access-identity/cloudfront/` special path.
 * The `cloudfrontAccessIdentityPath` allows this to be circumvented.
 * The below snippet demonstrates use with the `s3OriginConfig` structure for the
 * `aws.cloudfront.Distribution` resource:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // ... other configuration ...
 * const example = new aws.cloudfront.Distribution("example", {origins: [{
 *     s3OriginConfig: {
 *         originAccessIdentity: aws_cloudfront_origin_access_identity.example.cloudfront_access_identity_path,
 *     },
 * }]});
 * ```
 *
 * ### Updating your bucket policy
 *
 * Note that the AWS API may translate the `s3CanonicalUserId` `CanonicalUser`
 * principal into an `AWS` IAM ARN principal when supplied in an
 * `aws.s3.BucketV2` bucket policy, causing spurious diffs. If
 * you see this behaviour, use the `iamArn` instead:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const s3Policy = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["s3:GetObject"],
 *         resources: [`${aws_s3_bucket.example.arn}/*`],
 *         principals: [{
 *             type: "AWS",
 *             identifiers: [aws_cloudfront_origin_access_identity.example.iam_arn],
 *         }],
 *     }],
 * });
 * const example = new aws.s3.BucketPolicy("example", {
 *     bucket: aws_s3_bucket.example.id,
 *     policy: s3Policy.then(s3Policy => s3Policy.json),
 * });
 * ```
 *
 * [1]: http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html
 * [2]: http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html
 *
 * ## Import
 *
 * Cloudfront Origin Access Identities can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cloudfront/originAccessIdentity:OriginAccessIdentity origin_access E74FTE3AEXAMPLE
 * ```
 */
class OriginAccessIdentity extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["callerReference"] = state ? state.callerReference : undefined;
            resourceInputs["cloudfrontAccessIdentityPath"] = state ? state.cloudfrontAccessIdentityPath : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["iamArn"] = state ? state.iamArn : undefined;
            resourceInputs["s3CanonicalUserId"] = state ? state.s3CanonicalUserId : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["callerReference"] = undefined /*out*/;
            resourceInputs["cloudfrontAccessIdentityPath"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["iamArn"] = undefined /*out*/;
            resourceInputs["s3CanonicalUserId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OriginAccessIdentity.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing OriginAccessIdentity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OriginAccessIdentity(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of OriginAccessIdentity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OriginAccessIdentity.__pulumiType;
    }
}
exports.OriginAccessIdentity = OriginAccessIdentity;
/** @internal */
OriginAccessIdentity.__pulumiType = 'aws:cloudfront/originAccessIdentity:OriginAccessIdentity';
//# sourceMappingURL=originAccessIdentity.js.map