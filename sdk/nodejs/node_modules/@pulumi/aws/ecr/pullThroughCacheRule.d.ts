import * as pulumi from "@pulumi/pulumi";
/**
 * Provides an Elastic Container Registry Pull Through Cache Rule.
 *
 * More information about pull through cache rules, including the set of supported
 * upstream repositories, see [Using pull through cache rules](https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ecr.PullThroughCacheRule("example", {
 *     ecrRepositoryPrefix: "ecr-public",
 *     upstreamRegistryUrl: "public.ecr.aws",
 * });
 * ```
 *
 * ## Import
 *
 * Use the `ecr_repository_prefix` to import a Pull Through Cache Rule. For example
 *
 * ```sh
 *  $ pulumi import aws:ecr/pullThroughCacheRule:PullThroughCacheRule example ecr-public
 * ```
 */
export declare class PullThroughCacheRule extends pulumi.CustomResource {
    /**
     * Get an existing PullThroughCacheRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PullThroughCacheRuleState, opts?: pulumi.CustomResourceOptions): PullThroughCacheRule;
    /**
     * Returns true if the given object is an instance of PullThroughCacheRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PullThroughCacheRule;
    /**
     * The repository name prefix to use when caching images from the source registry.
     */
    readonly ecrRepositoryPrefix: pulumi.Output<string>;
    /**
     * The registry ID where the repository was created.
     */
    readonly registryId: pulumi.Output<string>;
    /**
     * The registry URL of the upstream public registry to use as the source.
     */
    readonly upstreamRegistryUrl: pulumi.Output<string>;
    /**
     * Create a PullThroughCacheRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PullThroughCacheRuleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering PullThroughCacheRule resources.
 */
export interface PullThroughCacheRuleState {
    /**
     * The repository name prefix to use when caching images from the source registry.
     */
    ecrRepositoryPrefix?: pulumi.Input<string>;
    /**
     * The registry ID where the repository was created.
     */
    registryId?: pulumi.Input<string>;
    /**
     * The registry URL of the upstream public registry to use as the source.
     */
    upstreamRegistryUrl?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a PullThroughCacheRule resource.
 */
export interface PullThroughCacheRuleArgs {
    /**
     * The repository name prefix to use when caching images from the source registry.
     */
    ecrRepositoryPrefix: pulumi.Input<string>;
    /**
     * The registry URL of the upstream public registry to use as the source.
     */
    upstreamRegistryUrl: pulumi.Input<string>;
}
