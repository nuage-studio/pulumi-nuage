"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getElasticIpOutput = exports.getElasticIp = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `aws.ec2.Eip` provides details about a specific Elastic IP.
 *
 * ## Example Usage
 * ### Search By Allocation ID (VPC only)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const byAllocationId = pulumi.output(aws.ec2.getElasticIp({
 *     id: "eipalloc-12345678",
 * }));
 * ```
 * ### Search By Filters (EC2-Classic or VPC)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const byFilter = pulumi.output(aws.ec2.getElasticIp({
 *     filters: [{
 *         name: "tag:Name",
 *         values: ["exampleNameTagValue"],
 *     }],
 * }));
 * ```
 * ### Search By Public IP (EC2-Classic or VPC)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const byPublicIp = pulumi.output(aws.ec2.getElasticIp({
 *     publicIp: "1.2.3.4",
 * }));
 * ```
 * ### Search By Tags (EC2-Classic or VPC)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const byTags = pulumi.output(aws.ec2.getElasticIp({
 *     tags: {
 *         Name: "exampleNameTagValue",
 *     },
 * }));
 * ```
 */
/** @deprecated aws.getElasticIp has been deprecated in favor of aws.ec2.getElasticIp */
function getElasticIp(args, opts) {
    pulumi.log.warn("getElasticIp is deprecated: aws.getElasticIp has been deprecated in favor of aws.ec2.getElasticIp");
    args = args || {};
    if (!opts) {
        opts = {};
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws:index/getElasticIp:getElasticIp", {
        "filters": args.filters,
        "id": args.id,
        "publicIp": args.publicIp,
        "tags": args.tags,
    }, opts);
}
exports.getElasticIp = getElasticIp;
function getElasticIpOutput(args, opts) {
    return pulumi.output(args).apply(a => getElasticIp(a, opts));
}
exports.getElasticIpOutput = getElasticIpOutput;
//# sourceMappingURL=getElasticIp.js.map