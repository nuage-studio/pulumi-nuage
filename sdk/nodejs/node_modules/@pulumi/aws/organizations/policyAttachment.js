"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyAttachment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to attach an AWS Organizations policy to an organization account, root, or unit.
 *
 * ## Example Usage
 * ### Organization Account
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const account = new aws.organizations.PolicyAttachment("account", {
 *     policyId: aws_organizations_policy.example.id,
 *     targetId: "123456789012",
 * });
 * ```
 * ### Organization Root
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const root = new aws.organizations.PolicyAttachment("root", {
 *     policyId: aws_organizations_policy.example.id,
 *     targetId: aws_organizations_organization.example.roots[0].id,
 * });
 * ```
 * ### Organization Unit
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const unit = new aws.organizations.PolicyAttachment("unit", {
 *     policyId: aws_organizations_policy.example.id,
 *     targetId: aws_organizations_organizational_unit.example.id,
 * });
 * ```
 *
 * ## Import
 *
 * `aws_organizations_policy_attachment` can be imported by using the target ID and policy ID, e.g., with an account target
 *
 * ```sh
 *  $ pulumi import aws:organizations/policyAttachment:PolicyAttachment account 123456789012:p-12345678
 * ```
 */
class PolicyAttachment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.targetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyAttachment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing PolicyAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PolicyAttachment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PolicyAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyAttachment.__pulumiType;
    }
}
exports.PolicyAttachment = PolicyAttachment;
/** @internal */
PolicyAttachment.__pulumiType = 'aws:organizations/policyAttachment:PolicyAttachment';
//# sourceMappingURL=policyAttachment.js.map