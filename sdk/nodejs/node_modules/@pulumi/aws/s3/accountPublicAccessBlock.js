"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountPublicAccessBlock = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages S3 account-level Public Access Block configuration. For more information about these settings, see the [AWS S3 Block Public Access documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html).
 *
 * > **NOTE:** Each AWS account may only have one S3 Public Access Block configuration. Multiple configurations of the resource against the same AWS account will cause a perpetual difference.
 *
 * > Advanced usage: To use a custom API endpoint for this resource, use the `s3control` endpoint provider configuration, not the `s3` endpoint provider configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.AccountPublicAccessBlock("example", {
 *     blockPublicAcls: true,
 *     blockPublicPolicy: true,
 * });
 * ```
 *
 * ## Import
 *
 * `aws_s3_account_public_access_block` can be imported by using the AWS account ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:s3/accountPublicAccessBlock:AccountPublicAccessBlock example 123456789012
 * ```
 */
class AccountPublicAccessBlock extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["blockPublicAcls"] = state ? state.blockPublicAcls : undefined;
            resourceInputs["blockPublicPolicy"] = state ? state.blockPublicPolicy : undefined;
            resourceInputs["ignorePublicAcls"] = state ? state.ignorePublicAcls : undefined;
            resourceInputs["restrictPublicBuckets"] = state ? state.restrictPublicBuckets : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["blockPublicAcls"] = args ? args.blockPublicAcls : undefined;
            resourceInputs["blockPublicPolicy"] = args ? args.blockPublicPolicy : undefined;
            resourceInputs["ignorePublicAcls"] = args ? args.ignorePublicAcls : undefined;
            resourceInputs["restrictPublicBuckets"] = args ? args.restrictPublicBuckets : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountPublicAccessBlock.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AccountPublicAccessBlock resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AccountPublicAccessBlock(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AccountPublicAccessBlock.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountPublicAccessBlock.__pulumiType;
    }
}
exports.AccountPublicAccessBlock = AccountPublicAccessBlock;
/** @internal */
AccountPublicAccessBlock.__pulumiType = 'aws:s3/accountPublicAccessBlock:AccountPublicAccessBlock';
//# sourceMappingURL=accountPublicAccessBlock.js.map