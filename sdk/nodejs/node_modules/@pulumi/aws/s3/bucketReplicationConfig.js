"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketReplicationConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an independent configuration resource for S3 bucket [replication configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html).
 *
 * > **NOTE:** S3 Buckets only support a single replication configuration. Declaring multiple `aws.s3.BucketReplicationConfig` resources to the same S3 Bucket will cause a perpetual difference in configuration.
 *
 * ## Example Usage
 * ### Using replication configuration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const central = new aws.Provider("central", {region: "eu-central-1"});
 * const replicationRole = new aws.iam.Role("replicationRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "s3.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const destinationBucketV2 = new aws.s3.BucketV2("destinationBucketV2", {});
 * const sourceBucketV2 = new aws.s3.BucketV2("sourceBucketV2", {}, {
 *     provider: aws.central,
 * });
 * const replicationPolicy = new aws.iam.Policy("replicationPolicy", {policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "s3:GetReplicationConfiguration",
 *         "s3:ListBucket"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "${sourceBucketV2.arn}"
 *       ]
 *     },
 *     {
 *       "Action": [
 *         "s3:GetObjectVersionForReplication",
 *         "s3:GetObjectVersionAcl",
 *          "s3:GetObjectVersionTagging"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "${sourceBucketV2.arn}/*"
 *       ]
 *     },
 *     {
 *       "Action": [
 *         "s3:ReplicateObject",
 *         "s3:ReplicateDelete",
 *         "s3:ReplicateTags"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": "${destinationBucketV2.arn}/*"
 *     }
 *   ]
 * }
 * `});
 * const replicationRolePolicyAttachment = new aws.iam.RolePolicyAttachment("replicationRolePolicyAttachment", {
 *     role: replicationRole.name,
 *     policyArn: replicationPolicy.arn,
 * });
 * const destinationBucketVersioningV2 = new aws.s3.BucketVersioningV2("destinationBucketVersioningV2", {
 *     bucket: destinationBucketV2.id,
 *     versioningConfiguration: {
 *         status: "Enabled",
 *     },
 * });
 * const sourceBucketAcl = new aws.s3.BucketAclV2("sourceBucketAcl", {
 *     bucket: sourceBucketV2.id,
 *     acl: "private",
 * }, {
 *     provider: aws.central,
 * });
 * const sourceBucketVersioningV2 = new aws.s3.BucketVersioningV2("sourceBucketVersioningV2", {
 *     bucket: sourceBucketV2.id,
 *     versioningConfiguration: {
 *         status: "Enabled",
 *     },
 * }, {
 *     provider: aws.central,
 * });
 * const replicationBucketReplicationConfig = new aws.s3.BucketReplicationConfig("replicationBucketReplicationConfig", {
 *     role: replicationRole.arn,
 *     bucket: sourceBucketV2.id,
 *     rules: [{
 *         id: "foobar",
 *         filter: {
 *             prefix: "foo",
 *         },
 *         status: "Enabled",
 *         destination: {
 *             bucket: destinationBucketV2.arn,
 *             storageClass: "STANDARD",
 *         },
 *     }],
 * }, {
 *     provider: aws.central,
 *     dependsOn: [sourceBucketVersioningV2],
 * });
 * ```
 * ### Bi-Directional Replication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // ... other configuration ...
 * const eastBucketV2 = new aws.s3.BucketV2("eastBucketV2", {});
 * const eastBucketVersioningV2 = new aws.s3.BucketVersioningV2("eastBucketVersioningV2", {
 *     bucket: eastBucketV2.id,
 *     versioningConfiguration: {
 *         status: "Enabled",
 *     },
 * });
 * const westBucketV2 = new aws.s3.BucketV2("westBucketV2", {}, {
 *     provider: aws.west,
 * });
 * const westBucketVersioningV2 = new aws.s3.BucketVersioningV2("westBucketVersioningV2", {
 *     bucket: westBucketV2.id,
 *     versioningConfiguration: {
 *         status: "Enabled",
 *     },
 * }, {
 *     provider: aws.west,
 * });
 * const eastToWest = new aws.s3.BucketReplicationConfig("eastToWest", {
 *     role: aws_iam_role.east_replication.arn,
 *     bucket: eastBucketV2.id,
 *     rules: [{
 *         id: "foobar",
 *         filter: {
 *             prefix: "foo",
 *         },
 *         status: "Enabled",
 *         destination: {
 *             bucket: westBucketV2.arn,
 *             storageClass: "STANDARD",
 *         },
 *     }],
 * }, {
 *     dependsOn: [eastBucketVersioningV2],
 * });
 * const westToEast = new aws.s3.BucketReplicationConfig("westToEast", {
 *     role: aws_iam_role.west_replication.arn,
 *     bucket: westBucketV2.id,
 *     rules: [{
 *         id: "foobar",
 *         filter: {
 *             prefix: "foo",
 *         },
 *         status: "Enabled",
 *         destination: {
 *             bucket: eastBucketV2.arn,
 *             storageClass: "STANDARD",
 *         },
 *     }],
 * }, {
 *     provider: aws.west,
 *     dependsOn: [westBucketVersioningV2],
 * });
 * ```
 *
 * ## Import
 *
 * S3 bucket replication configuration can be imported using the `bucket`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:s3/bucketReplicationConfig:BucketReplicationConfig replication bucket-name
 * ```
 */
class BucketReplicationConfig extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["token"] = args ? args.token : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketReplicationConfig.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing BucketReplicationConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BucketReplicationConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BucketReplicationConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketReplicationConfig.__pulumiType;
    }
}
exports.BucketReplicationConfig = BucketReplicationConfig;
/** @internal */
BucketReplicationConfig.__pulumiType = 'aws:s3/bucketReplicationConfig:BucketReplicationConfig';
//# sourceMappingURL=bucketReplicationConfig.js.map