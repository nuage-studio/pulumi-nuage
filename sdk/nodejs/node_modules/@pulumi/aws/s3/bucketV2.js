"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketV2 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a S3 bucket resource.
 *
 * > This functionality is for managing S3 in an AWS Partition. To manage [S3 on Outposts](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html), see the `aws.s3control.Bucket` resource.
 *
 * > **NOTE on S3 Bucket Accelerate Configuration:** S3 Bucket Accelerate can be configured in either the standalone resource `aws.s3.BucketAccelerateConfigurationV2`
 * or with the deprecated parameter `accelerationStatus` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket canned ACL Configuration:** S3 Bucket canned ACL can be configured in either the standalone resource `aws.s3.BucketAclV2`
 * or with the deprecated parameter `acl` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket ACL Grants Configuration:** S3 Bucket grants can be configured in either the standalone resource `aws.s3.BucketAclV2`
 * or with the deprecated parameter `grant` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket CORS Configuration:** S3 Bucket CORS can be configured in either the standalone resource `aws.s3.BucketCorsConfigurationV2`
 * or with the deprecated parameter `corsRule` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket Lifecycle Configuration:** S3 Bucket Lifecycle can be configured in either the standalone resource `aws.s3.BucketLifecycleConfigurationV2`
 * or with the deprecated parameter `lifecycleRule` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket Logging Configuration:** S3 Bucket logging can be configured in either the standalone resource `aws.s3.BucketLoggingV2`
 * or with the deprecated parameter `logging` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket Object Lock Configuration:** S3 Bucket Object Lock can be configured in either the standalone resource `aws.s3.BucketObjectLockConfigurationV2`
 * or with the deprecated parameter `objectLockConfiguration` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket Policy Configuration:** S3 Bucket Policy can be configured in either the standalone resource `aws.s3.BucketPolicy`
 * or with the deprecated parameter `policy` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket Replication Configuration:** S3 Bucket Replication can be configured in either the standalone resource `aws.s3.BucketReplicationConfig`
 * or with the deprecated parameter `replicationConfiguration` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket Request Payment Configuration:** S3 Bucket Request Payment can be configured in either the standalone resource `aws.s3.BucketRequestPaymentConfigurationV2`
 * or with the deprecated parameter `requestPayer` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket Server Side Encryption Configuration:** S3 Bucket Server Side Encryption can be configured in either the standalone resource `aws.s3.BucketServerSideEncryptionConfigurationV2`
 * or with the deprecated parameter `serverSideEncryptionConfiguration` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket Versioning Configuration:** S3 Bucket versioning can be configured in either the standalone resource `aws.s3.BucketVersioningV2`
 * or with the deprecated parameter `versioning` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * > **NOTE on S3 Bucket Website Configuration:** S3 Bucket Website can be configured in either the standalone resource `aws.s3.BucketWebsiteConfigurationV2`
 * or with the deprecated parameter `website` in the resource `aws.s3.BucketV2`.
 * Configuring with both will cause inconsistencies and may overwrite configuration.
 *
 * ## Example Usage
 * ### Private Bucket w/ Tags
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucketV2 = new aws.s3.BucketV2("bucketV2", {tags: {
 *     Name: "My bucket",
 *     Environment: "Dev",
 * }});
 * const example = new aws.s3.BucketAclV2("example", {
 *     bucket: bucketV2.id,
 *     acl: "private",
 * });
 * ```
 * ### Static Website Hosting
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const bucketV2 = new aws.s3.BucketV2("bucketV2", {
 *     acl: "public-read",
 *     policy: fs.readFileSync("policy.json"),
 *     websites: [{
 *         indexDocument: "index.html",
 *         errorDocument: "error.html",
 *         routingRules: `[{
 *     "Condition": {
 *         "KeyPrefixEquals": "docs/"
 *     },
 *     "Redirect": {
 *         "ReplaceKeyPrefixWith": "documents/"
 *     }
 * }]
 * `,
 *     }],
 * });
 * ```
 * ### Using CORS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucketV2 = new aws.s3.BucketV2("b", {
 *     acl: "public-read",
 *     corsRules: [{
 *         allowedHeaders: ["*"],
 *         allowedMethods: [
 *             "PUT",
 *             "POST",
 *         ],
 *         allowedOrigins: ["https://s3-website-test.hashicorp.com"],
 *         exposeHeaders: ["ETag"],
 *         maxAgeSeconds: 3000,
 *     }],
 * });
 * ```
 * ### Using versioning
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucketV2 = new aws.s3.BucketV2("b", {
 *     acl: "private",
 *     versionings: [{
 *         enabled: true,
 *     }],
 * });
 * ```
 * ### Enable Logging
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const logBucket = new aws.s3.BucketV2("logBucket", {acl: "log-delivery-write"});
 * const bucketV2 = new aws.s3.BucketV2("bucketV2", {
 *     acl: "private",
 *     loggings: [{
 *         targetBucket: logBucket.id,
 *         targetPrefix: "log/",
 *     }],
 * });
 * ```
 * ### Using object lifecycle
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucket = new aws.s3.BucketV2("bucket", {
 *     acl: "private",
 *     lifecycleRules: [
 *         {
 *             enabled: true,
 *             expirations: [{
 *                 days: 90,
 *             }],
 *             id: "log",
 *             prefix: "log/",
 *             tags: {
 *                 autoclean: "true",
 *                 rule: "log",
 *             },
 *             transitions: [
 *                 {
 *                     days: 30,
 *                     storageClass: "STANDARD_IA", // or "ONEZONE_IA"
 *                 },
 *                 {
 *                     days: 60,
 *                     storageClass: "GLACIER",
 *                 },
 *             ],
 *         },
 *         {
 *             enabled: true,
 *             expirations: [{
 *                 date: "2016-01-12",
 *             }],
 *             id: "tmp",
 *             prefix: "tmp/",
 *         },
 *     ],
 * });
 * const versioningBucket = new aws.s3.BucketV2("versioning_bucket", {
 *     acl: "private",
 *     lifecycleRules: [{
 *         enabled: true,
 *         noncurrentVersionExpirations: [{
 *             days: 90,
 *         }],
 *         noncurrentVersionTransitions: [
 *             {
 *                 days: 30,
 *                 storageClass: "STANDARD_IA",
 *             },
 *             {
 *                 days: 60,
 *                 storageClass: "GLACIER",
 *             },
 *         ],
 *         prefix: "config/",
 *     }],
 *     versionings: [{
 *         enabled: true,
 *     }],
 * });
 * ```
 * ### Using object lock configuration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketV2("example", {
 *     objectLockConfiguration: {
 *         objectLockEnabled: "Enabled",
 *         rules: [{
 *             defaultRetentions: [{
 *                 days: 5,
 *                 mode: "COMPLIANCE",
 *             }],
 *         }],
 *     },
 * });
 * ```
 * ### Using replication configuration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const central = new aws.Provider("central", {region: "eu-central-1"});
 * const replicationRole = new aws.iam.Role("replicationRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "s3.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const destination = new aws.s3.BucketV2("destination", {versionings: [{
 *     enabled: true,
 * }]});
 * const source = new aws.s3.BucketV2("source", {
 *     acl: "private",
 *     versionings: [{
 *         enabled: true,
 *     }],
 *     replicationConfigurations: [{
 *         role: replicationRole.arn,
 *         rules: [{
 *             id: "foobar",
 *             status: "Enabled",
 *             filters: [{
 *                 tags: {},
 *             }],
 *             destinations: [{
 *                 bucket: destination.arn,
 *                 storageClass: "STANDARD",
 *                 replicationTimes: [{
 *                     status: "Enabled",
 *                     minutes: 15,
 *                 }],
 *                 metrics: [{
 *                     status: "Enabled",
 *                     minutes: 15,
 *                 }],
 *             }],
 *         }],
 *     }],
 * }, {
 *     provider: aws.central,
 * });
 * const replicationPolicy = new aws.iam.Policy("replicationPolicy", {policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "s3:GetReplicationConfiguration",
 *         "s3:ListBucket"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "${source.arn}"
 *       ]
 *     },
 *     {
 *       "Action": [
 *         "s3:GetObjectVersionForReplication",
 *         "s3:GetObjectVersionAcl",
 *          "s3:GetObjectVersionTagging"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "${source.arn}/*"
 *       ]
 *     },
 *     {
 *       "Action": [
 *         "s3:ReplicateObject",
 *         "s3:ReplicateDelete",
 *         "s3:ReplicateTags"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": "${destination.arn}/*"
 *     }
 *   ]
 * }
 * `});
 * const replicationRolePolicyAttachment = new aws.iam.RolePolicyAttachment("replicationRolePolicyAttachment", {
 *     role: replicationRole.name,
 *     policyArn: replicationPolicy.arn,
 * });
 * ```
 * ### Enable Default Server Side Encryption
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mykey = new aws.kms.Key("mykey", {
 *     description: "This key is used to encrypt bucket objects",
 *     deletionWindowInDays: 10,
 * });
 * const mybucket = new aws.s3.BucketV2("mybucket", {serverSideEncryptionConfigurations: [{
 *     rules: [{
 *         applyServerSideEncryptionByDefaults: [{
 *             kmsMasterKeyId: mykey.arn,
 *             sseAlgorithm: "aws:kms",
 *         }],
 *     }],
 * }]});
 * ```
 * ### Using ACL policy grants
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const currentUser = aws.s3.getCanonicalUserId({});
 * const bucket = new aws.s3.BucketV2("bucket", {grants: [
 *     {
 *         id: currentUser.then(currentUser => currentUser.id),
 *         type: "CanonicalUser",
 *         permissions: ["FULL_CONTROL"],
 *     },
 *     {
 *         type: "Group",
 *         permissions: [
 *             "READ_ACP",
 *             "WRITE",
 *         ],
 *         uri: "http://acs.amazonaws.com/groups/s3/LogDelivery",
 *     },
 * ]});
 * ```
 *
 * ## Import
 *
 * S3 bucket can be imported using the `bucket`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:s3/bucketV2:BucketV2 bucket bucket-name
 * ```
 */
class BucketV2 extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accelerationStatus"] = state ? state.accelerationStatus : undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["bucketDomainName"] = state ? state.bucketDomainName : undefined;
            resourceInputs["bucketPrefix"] = state ? state.bucketPrefix : undefined;
            resourceInputs["bucketRegionalDomainName"] = state ? state.bucketRegionalDomainName : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["grants"] = state ? state.grants : undefined;
            resourceInputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            resourceInputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            resourceInputs["loggings"] = state ? state.loggings : undefined;
            resourceInputs["objectLockConfiguration"] = state ? state.objectLockConfiguration : undefined;
            resourceInputs["objectLockEnabled"] = state ? state.objectLockEnabled : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replicationConfigurations"] = state ? state.replicationConfigurations : undefined;
            resourceInputs["requestPayer"] = state ? state.requestPayer : undefined;
            resourceInputs["serverSideEncryptionConfigurations"] = state ? state.serverSideEncryptionConfigurations : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["versionings"] = state ? state.versionings : undefined;
            resourceInputs["websiteDomain"] = state ? state.websiteDomain : undefined;
            resourceInputs["websiteEndpoint"] = state ? state.websiteEndpoint : undefined;
            resourceInputs["websites"] = state ? state.websites : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["accelerationStatus"] = args ? args.accelerationStatus : undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["arn"] = args ? args.arn : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["bucketPrefix"] = args ? args.bucketPrefix : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["grants"] = args ? args.grants : undefined;
            resourceInputs["hostedZoneId"] = args ? args.hostedZoneId : undefined;
            resourceInputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            resourceInputs["loggings"] = args ? args.loggings : undefined;
            resourceInputs["objectLockConfiguration"] = args ? args.objectLockConfiguration : undefined;
            resourceInputs["objectLockEnabled"] = args ? args.objectLockEnabled : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["replicationConfigurations"] = args ? args.replicationConfigurations : undefined;
            resourceInputs["requestPayer"] = args ? args.requestPayer : undefined;
            resourceInputs["serverSideEncryptionConfigurations"] = args ? args.serverSideEncryptionConfigurations : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["versionings"] = args ? args.versionings : undefined;
            resourceInputs["websites"] = args ? args.websites : undefined;
            resourceInputs["bucketDomainName"] = undefined /*out*/;
            resourceInputs["bucketRegionalDomainName"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["websiteDomain"] = undefined /*out*/;
            resourceInputs["websiteEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "aws:s3/bucket:Bucket" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(BucketV2.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing BucketV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BucketV2(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BucketV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketV2.__pulumiType;
    }
}
exports.BucketV2 = BucketV2;
/** @internal */
BucketV2.__pulumiType = 'aws:s3/bucketV2:BucketV2';
//# sourceMappingURL=bucketV2.js.map