"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CostCategory = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CE Cost Category.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.costexplorer.CostCategory("test", {
 *     rules: [
 *         {
 *             rule: {
 *                 dimension: {
 *                     key: "LINKED_ACCOUNT_NAME",
 *                     matchOptions: ["ENDS_WITH"],
 *                     values: ["-prod"],
 *                 },
 *             },
 *             value: "production",
 *         },
 *         {
 *             rule: {
 *                 dimension: {
 *                     key: "LINKED_ACCOUNT_NAME",
 *                     matchOptions: ["ENDS_WITH"],
 *                     values: ["-stg"],
 *                 },
 *             },
 *             value: "staging",
 *         },
 *         {
 *             rule: {
 *                 dimension: {
 *                     key: "LINKED_ACCOUNT_NAME",
 *                     matchOptions: ["ENDS_WITH"],
 *                     values: ["-dev"],
 *                 },
 *             },
 *             value: "testing",
 *         },
 *     ],
 *     ruleVersion: "CostCategoryExpression.v1",
 * });
 * ```
 *
 * ## Import
 *
 * `aws_ce_cost_category` can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import aws:costexplorer/costCategory:CostCategory example costCategoryARN
 * ```
 */
class CostCategory extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["defaultValue"] = state ? state.defaultValue : undefined;
            resourceInputs["effectiveEnd"] = state ? state.effectiveEnd : undefined;
            resourceInputs["effectiveStart"] = state ? state.effectiveStart : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ruleVersion"] = state ? state.ruleVersion : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["splitChargeRules"] = state ? state.splitChargeRules : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.ruleVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleVersion'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["defaultValue"] = args ? args.defaultValue : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ruleVersion"] = args ? args.ruleVersion : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["splitChargeRules"] = args ? args.splitChargeRules : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["effectiveEnd"] = undefined /*out*/;
            resourceInputs["effectiveStart"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CostCategory.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CostCategory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CostCategory(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CostCategory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CostCategory.__pulumiType;
    }
}
exports.CostCategory = CostCategory;
/** @internal */
CostCategory.__pulumiType = 'aws:costexplorer/costCategory:CostCategory';
//# sourceMappingURL=costCategory.js.map