"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtectionGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a grouping of protected resources so they can be handled as a collective.
 * This resource grouping improves the accuracy of detection and reduces false positives. For more information see
 * [Managing AWS Shield Advanced protection groups](https://docs.aws.amazon.com/waf/latest/developerguide/manage-protection-group.html)
 *
 * ## Example Usage
 * ### Create protection group for all resources
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.shield.ProtectionGroup("example", {
 *     aggregation: "MAX",
 *     pattern: "ALL",
 *     protectionGroupId: "example",
 * });
 * ```
 * ### Create protection group for arbitrary number of resources
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const currentRegion = aws.getRegion({});
 * const currentCallerIdentity = aws.getCallerIdentity({});
 * const exampleEip = new aws.ec2.Eip("exampleEip", {vpc: true});
 * const exampleProtection = new aws.shield.Protection("exampleProtection", {resourceArn: pulumi.all([currentRegion, currentCallerIdentity, exampleEip.id]).apply(([currentRegion, currentCallerIdentity, id]) => `arn:aws:ec2:${currentRegion.name}:${currentCallerIdentity.accountId}:eip-allocation/${id}`)});
 * const exampleProtectionGroup = new aws.shield.ProtectionGroup("exampleProtectionGroup", {
 *     protectionGroupId: "example",
 *     aggregation: "MEAN",
 *     pattern: "ARBITRARY",
 *     members: [pulumi.all([currentRegion, currentCallerIdentity, exampleEip.id]).apply(([currentRegion, currentCallerIdentity, id]) => `arn:aws:ec2:${currentRegion.name}:${currentCallerIdentity.accountId}:eip-allocation/${id}`)],
 * }, {
 *     dependsOn: [exampleProtection],
 * });
 * ```
 * ### Create protection group for a type of resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.shield.ProtectionGroup("example", {
 *     aggregation: "SUM",
 *     pattern: "BY_RESOURCE_TYPE",
 *     protectionGroupId: "example",
 *     resourceType: "ELASTIC_IP_ALLOCATION",
 * });
 * ```
 *
 * ## Import
 *
 * Shield protection group resources can be imported by specifying their protection group id.
 *
 * ```sh
 *  $ pulumi import aws:shield/protectionGroup:ProtectionGroup example example
 * ```
 */
class ProtectionGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["aggregation"] = state ? state.aggregation : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["protectionGroupArn"] = state ? state.protectionGroupArn : undefined;
            resourceInputs["protectionGroupId"] = state ? state.protectionGroupId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.aggregation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregation'");
            }
            if ((!args || args.pattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pattern'");
            }
            if ((!args || args.protectionGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protectionGroupId'");
            }
            resourceInputs["aggregation"] = args ? args.aggregation : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["protectionGroupId"] = args ? args.protectionGroupId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["protectionGroupArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProtectionGroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ProtectionGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProtectionGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProtectionGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProtectionGroup.__pulumiType;
    }
}
exports.ProtectionGroup = ProtectionGroup;
/** @internal */
ProtectionGroup.__pulumiType = 'aws:shield/protectionGroup:ProtectionGroup';
//# sourceMappingURL=protectionGroup.js.map