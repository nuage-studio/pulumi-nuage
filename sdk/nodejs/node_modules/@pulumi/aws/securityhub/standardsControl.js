"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandardsControl = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.securityhub.Account("example", {});
 * const cisAwsFoundationsBenchmark = new aws.securityhub.StandardsSubscription("cisAwsFoundationsBenchmark", {standardsArn: "arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0"}, {
 *     dependsOn: [example],
 * });
 * const ensureIamPasswordPolicyPreventsPasswordReuse = new aws.securityhub.StandardsControl("ensureIamPasswordPolicyPreventsPasswordReuse", {
 *     standardsControlArn: "arn:aws:securityhub:us-east-1:111111111111:control/cis-aws-foundations-benchmark/v/1.2.0/1.10",
 *     controlStatus: "DISABLED",
 *     disabledReason: "We handle password policies within Okta",
 * }, {
 *     dependsOn: [cisAwsFoundationsBenchmark],
 * });
 * ```
 */
class StandardsControl extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["controlId"] = state ? state.controlId : undefined;
            resourceInputs["controlStatus"] = state ? state.controlStatus : undefined;
            resourceInputs["controlStatusUpdatedAt"] = state ? state.controlStatusUpdatedAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabledReason"] = state ? state.disabledReason : undefined;
            resourceInputs["relatedRequirements"] = state ? state.relatedRequirements : undefined;
            resourceInputs["remediationUrl"] = state ? state.remediationUrl : undefined;
            resourceInputs["severityRating"] = state ? state.severityRating : undefined;
            resourceInputs["standardsControlArn"] = state ? state.standardsControlArn : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.controlStatus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlStatus'");
            }
            if ((!args || args.standardsControlArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'standardsControlArn'");
            }
            resourceInputs["controlStatus"] = args ? args.controlStatus : undefined;
            resourceInputs["disabledReason"] = args ? args.disabledReason : undefined;
            resourceInputs["standardsControlArn"] = args ? args.standardsControlArn : undefined;
            resourceInputs["controlId"] = undefined /*out*/;
            resourceInputs["controlStatusUpdatedAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["relatedRequirements"] = undefined /*out*/;
            resourceInputs["remediationUrl"] = undefined /*out*/;
            resourceInputs["severityRating"] = undefined /*out*/;
            resourceInputs["title"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StandardsControl.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing StandardsControl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StandardsControl(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StandardsControl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StandardsControl.__pulumiType;
    }
}
exports.StandardsControl = StandardsControl;
/** @internal */
StandardsControl.__pulumiType = 'aws:securityhub/standardsControl:StandardsControl';
//# sourceMappingURL=standardsControl.js.map