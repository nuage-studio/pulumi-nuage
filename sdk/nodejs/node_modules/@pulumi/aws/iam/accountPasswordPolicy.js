"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountPasswordPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * > **Note:** There is only a single policy allowed per AWS account. An existing policy will be lost when using this resource as an effect of this limitation.
 *
 * Manages Password Policy for the AWS Account.
 * See more about [Account Password Policy](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html)
 * in the official AWS docs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const strict = new aws.iam.AccountPasswordPolicy("strict", {
 *     allowUsersToChangePassword: true,
 *     minimumPasswordLength: 8,
 *     requireLowercaseCharacters: true,
 *     requireNumbers: true,
 *     requireSymbols: true,
 *     requireUppercaseCharacters: true,
 * });
 * ```
 *
 * ## Import
 *
 * IAM Account Password Policy can be imported using the word `iam-account-password-policy`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:iam/accountPasswordPolicy:AccountPasswordPolicy strict iam-account-password-policy
 * ```
 */
class AccountPasswordPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowUsersToChangePassword"] = state ? state.allowUsersToChangePassword : undefined;
            resourceInputs["expirePasswords"] = state ? state.expirePasswords : undefined;
            resourceInputs["hardExpiry"] = state ? state.hardExpiry : undefined;
            resourceInputs["maxPasswordAge"] = state ? state.maxPasswordAge : undefined;
            resourceInputs["minimumPasswordLength"] = state ? state.minimumPasswordLength : undefined;
            resourceInputs["passwordReusePrevention"] = state ? state.passwordReusePrevention : undefined;
            resourceInputs["requireLowercaseCharacters"] = state ? state.requireLowercaseCharacters : undefined;
            resourceInputs["requireNumbers"] = state ? state.requireNumbers : undefined;
            resourceInputs["requireSymbols"] = state ? state.requireSymbols : undefined;
            resourceInputs["requireUppercaseCharacters"] = state ? state.requireUppercaseCharacters : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["allowUsersToChangePassword"] = args ? args.allowUsersToChangePassword : undefined;
            resourceInputs["hardExpiry"] = args ? args.hardExpiry : undefined;
            resourceInputs["maxPasswordAge"] = args ? args.maxPasswordAge : undefined;
            resourceInputs["minimumPasswordLength"] = args ? args.minimumPasswordLength : undefined;
            resourceInputs["passwordReusePrevention"] = args ? args.passwordReusePrevention : undefined;
            resourceInputs["requireLowercaseCharacters"] = args ? args.requireLowercaseCharacters : undefined;
            resourceInputs["requireNumbers"] = args ? args.requireNumbers : undefined;
            resourceInputs["requireSymbols"] = args ? args.requireSymbols : undefined;
            resourceInputs["requireUppercaseCharacters"] = args ? args.requireUppercaseCharacters : undefined;
            resourceInputs["expirePasswords"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountPasswordPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AccountPasswordPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AccountPasswordPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AccountPasswordPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountPasswordPolicy.__pulumiType;
    }
}
exports.AccountPasswordPolicy = AccountPasswordPolicy;
/** @internal */
AccountPasswordPolicy.__pulumiType = 'aws:iam/accountPasswordPolicy:AccountPasswordPolicy';
//# sourceMappingURL=accountPasswordPolicy.js.map