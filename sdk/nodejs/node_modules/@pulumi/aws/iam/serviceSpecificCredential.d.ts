import * as pulumi from "@pulumi/pulumi";
/**
 * Provides an IAM Service Specific Credential.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleUser = new aws.iam.User("exampleUser", {});
 * const exampleServiceSpecificCredential = new aws.iam.ServiceSpecificCredential("exampleServiceSpecificCredential", {
 *     serviceName: "codecommit.amazonaws.com",
 *     userName: exampleUser.name,
 * });
 * ```
 *
 * ## Import
 *
 * IAM Service Specific Credentials can be imported using the `service_name:user_name:service_specific_credential_id`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:iam/serviceSpecificCredential:ServiceSpecificCredential default `codecommit.amazonaws.com:example:some-id`
 * ```
 */
export declare class ServiceSpecificCredential extends pulumi.CustomResource {
    /**
     * Get an existing ServiceSpecificCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceSpecificCredentialState, opts?: pulumi.CustomResourceOptions): ServiceSpecificCredential;
    /**
     * Returns true if the given object is an instance of ServiceSpecificCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ServiceSpecificCredential;
    /**
     * The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
     */
    readonly serviceName: pulumi.Output<string>;
    /**
     * The generated password for the service-specific credential.
     */
    readonly servicePassword: pulumi.Output<string>;
    /**
     * The unique identifier for the service-specific credential.
     */
    readonly serviceSpecificCredentialId: pulumi.Output<string>;
    /**
     * The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
     */
    readonly serviceUserName: pulumi.Output<string>;
    /**
     * The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
     */
    readonly status: pulumi.Output<string | undefined>;
    /**
     * The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
     */
    readonly userName: pulumi.Output<string>;
    /**
     * Create a ServiceSpecificCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceSpecificCredentialArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ServiceSpecificCredential resources.
 */
export interface ServiceSpecificCredentialState {
    /**
     * The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The generated password for the service-specific credential.
     */
    servicePassword?: pulumi.Input<string>;
    /**
     * The unique identifier for the service-specific credential.
     */
    serviceSpecificCredentialId?: pulumi.Input<string>;
    /**
     * The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
     */
    serviceUserName?: pulumi.Input<string>;
    /**
     * The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
     */
    userName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ServiceSpecificCredential resource.
 */
export interface ServiceSpecificCredentialArgs {
    /**
     * The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
     */
    serviceName: pulumi.Input<string>;
    /**
     * The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
     */
    userName: pulumi.Input<string>;
}
