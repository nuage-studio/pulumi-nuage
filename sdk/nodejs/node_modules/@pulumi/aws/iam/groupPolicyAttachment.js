"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupPolicyAttachment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Attaches a Managed IAM Policy to an IAM group
 *
 * > **NOTE:** The usage of this resource conflicts with the `aws.iam.PolicyAttachment` resource and will permanently show a difference if both are defined.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const group = new aws.iam.Group("group", {});
 * const policy = new aws.iam.Policy("policy", {
 *     description: "A test policy",
 *     policy: "{ ... policy JSON ... }",
 * });
 * const test_attach = new aws.iam.GroupPolicyAttachment("test-attach", {
 *     group: group.name,
 *     policyArn: policy.arn,
 * });
 * ```
 *
 * ## Import
 *
 * IAM group policy attachments can be imported using the group name and policy arn separated by `/`.
 *
 * ```sh
 *  $ pulumi import aws:iam/groupPolicyAttachment:GroupPolicyAttachment test-attach test-group/arn:aws:iam::xxxxxxxxxxxx:policy/test-policy
 * ```
 */
class GroupPolicyAttachment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["policyArn"] = state ? state.policyArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.policyArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyArn'");
            }
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["policyArn"] = args ? args.policyArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupPolicyAttachment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing GroupPolicyAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GroupPolicyAttachment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GroupPolicyAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupPolicyAttachment.__pulumiType;
    }
}
exports.GroupPolicyAttachment = GroupPolicyAttachment;
/** @internal */
GroupPolicyAttachment.__pulumiType = 'aws:iam/groupPolicyAttachment:GroupPolicyAttachment';
//# sourceMappingURL=groupPolicyAttachment.js.map