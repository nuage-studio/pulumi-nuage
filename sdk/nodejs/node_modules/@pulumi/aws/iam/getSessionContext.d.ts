import * as pulumi from "@pulumi/pulumi";
export declare function getSessionContext(args: GetSessionContextArgs, opts?: pulumi.InvokeOptions): Promise<GetSessionContextResult>;
/**
 * A collection of arguments for invoking getSessionContext.
 */
export interface GetSessionContextArgs {
    /**
     * ARN for an assumed role.
     */
    arn: string;
}
/**
 * A collection of values returned by getSessionContext.
 */
export interface GetSessionContextResult {
    readonly arn: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * IAM source role ARN if `arn` corresponds to an STS assumed role. Otherwise, `issuerArn` is equal to `arn`.
     */
    readonly issuerArn: string;
    /**
     * Unique identifier of the IAM role that issues the STS assumed role.
     */
    readonly issuerId: string;
    /**
     * Name of the source role. Only available if `arn` corresponds to an STS assumed role.
     */
    readonly issuerName: string;
    /**
     * Name of the STS session. Only available if `arn` corresponds to an STS assumed role.
     */
    readonly sessionName: string;
}
export declare function getSessionContextOutput(args: GetSessionContextOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSessionContextResult>;
/**
 * A collection of arguments for invoking getSessionContext.
 */
export interface GetSessionContextOutputArgs {
    /**
     * ARN for an assumed role.
     */
    arn: pulumi.Input<string>;
}
