"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = exports.SshKey = exports.SigningCertificate = exports.ServiceSpecificCredential = exports.ServiceLinkedRole = exports.ServerCertificate = exports.SamlProvider = exports.RolePolicyAttachment = exports.RolePolicy = exports.Role = exports.PolicyAttachment = exports.Policy = exports.OpenIdConnectProvider = exports.InstanceProfile = exports.GroupPolicyAttachment = exports.GroupPolicy = exports.GroupMembership = exports.Group = exports.getUsersOutput = exports.getUsers = exports.getUserSshKeyOutput = exports.getUserSshKey = exports.getUserOutput = exports.getUser = exports.getSessionContextOutput = exports.getSessionContext = exports.getServerCertificateOutput = exports.getServerCertificate = exports.getSamlProviderOutput = exports.getSamlProvider = exports.getRolesOutput = exports.getRoles = exports.getRoleOutput = exports.getRole = exports.getPolicyDocumentOutput = exports.getPolicyDocument = exports.getPolicyOutput = exports.getPolicy = exports.getOpenidConnectProviderOutput = exports.getOpenidConnectProvider = exports.getInstanceProfilesOutput = exports.getInstanceProfiles = exports.getInstanceProfileOutput = exports.getInstanceProfile = exports.getGroupOutput = exports.getGroup = exports.getAccountAlias = exports.AccountPasswordPolicy = exports.AccountAlias = exports.AccessKey = void 0;
exports.VirtualMfaDevice = exports.UserPolicyAttachment = exports.UserPolicy = exports.UserLoginProfile = exports.UserGroupMembership = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AccessKey = null;
exports.AccountAlias = null;
exports.AccountPasswordPolicy = null;
__exportStar(require("./documents"), exports);
exports.getAccountAlias = null;
exports.getGroup = null;
exports.getGroupOutput = null;
exports.getInstanceProfile = null;
exports.getInstanceProfileOutput = null;
exports.getInstanceProfiles = null;
exports.getInstanceProfilesOutput = null;
exports.getOpenidConnectProvider = null;
exports.getOpenidConnectProviderOutput = null;
exports.getPolicy = null;
exports.getPolicyOutput = null;
exports.getPolicyDocument = null;
exports.getPolicyDocumentOutput = null;
exports.getRole = null;
exports.getRoleOutput = null;
exports.getRoles = null;
exports.getRolesOutput = null;
exports.getSamlProvider = null;
exports.getSamlProviderOutput = null;
exports.getServerCertificate = null;
exports.getServerCertificateOutput = null;
exports.getSessionContext = null;
exports.getSessionContextOutput = null;
exports.getUser = null;
exports.getUserOutput = null;
exports.getUserSshKey = null;
exports.getUserSshKeyOutput = null;
exports.getUsers = null;
exports.getUsersOutput = null;
exports.Group = null;
exports.GroupMembership = null;
exports.GroupPolicy = null;
exports.GroupPolicyAttachment = null;
exports.InstanceProfile = null;
__exportStar(require("./managedPolicies"), exports);
exports.OpenIdConnectProvider = null;
exports.Policy = null;
exports.PolicyAttachment = null;
__exportStar(require("./principals"), exports);
exports.Role = null;
exports.RolePolicy = null;
exports.RolePolicyAttachment = null;
exports.SamlProvider = null;
exports.ServerCertificate = null;
exports.ServiceLinkedRole = null;
exports.ServiceSpecificCredential = null;
exports.SigningCertificate = null;
exports.SshKey = null;
exports.User = null;
exports.UserGroupMembership = null;
exports.UserLoginProfile = null;
exports.UserPolicy = null;
exports.UserPolicyAttachment = null;
exports.VirtualMfaDevice = null;
utilities.lazyLoad(exports, ["AccessKey"], () => require("./accessKey"));
utilities.lazyLoad(exports, ["AccountAlias"], () => require("./accountAlias"));
utilities.lazyLoad(exports, ["AccountPasswordPolicy"], () => require("./accountPasswordPolicy"));
utilities.lazyLoad(exports, ["getAccountAlias"], () => require("./getAccountAlias"));
utilities.lazyLoad(exports, ["getGroup", "getGroupOutput"], () => require("./getGroup"));
utilities.lazyLoad(exports, ["getInstanceProfile", "getInstanceProfileOutput"], () => require("./getInstanceProfile"));
utilities.lazyLoad(exports, ["getInstanceProfiles", "getInstanceProfilesOutput"], () => require("./getInstanceProfiles"));
utilities.lazyLoad(exports, ["getOpenidConnectProvider", "getOpenidConnectProviderOutput"], () => require("./getOpenidConnectProvider"));
utilities.lazyLoad(exports, ["getPolicy", "getPolicyOutput"], () => require("./getPolicy"));
utilities.lazyLoad(exports, ["getPolicyDocument", "getPolicyDocumentOutput"], () => require("./getPolicyDocument"));
utilities.lazyLoad(exports, ["getRole", "getRoleOutput"], () => require("./getRole"));
utilities.lazyLoad(exports, ["getRoles", "getRolesOutput"], () => require("./getRoles"));
utilities.lazyLoad(exports, ["getSamlProvider", "getSamlProviderOutput"], () => require("./getSamlProvider"));
utilities.lazyLoad(exports, ["getServerCertificate", "getServerCertificateOutput"], () => require("./getServerCertificate"));
utilities.lazyLoad(exports, ["getSessionContext", "getSessionContextOutput"], () => require("./getSessionContext"));
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
utilities.lazyLoad(exports, ["getUserSshKey", "getUserSshKeyOutput"], () => require("./getUserSshKey"));
utilities.lazyLoad(exports, ["getUsers", "getUsersOutput"], () => require("./getUsers"));
utilities.lazyLoad(exports, ["Group"], () => require("./group"));
utilities.lazyLoad(exports, ["GroupMembership"], () => require("./groupMembership"));
utilities.lazyLoad(exports, ["GroupPolicy"], () => require("./groupPolicy"));
utilities.lazyLoad(exports, ["GroupPolicyAttachment"], () => require("./groupPolicyAttachment"));
utilities.lazyLoad(exports, ["InstanceProfile"], () => require("./instanceProfile"));
utilities.lazyLoad(exports, ["OpenIdConnectProvider"], () => require("./openIdConnectProvider"));
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));
utilities.lazyLoad(exports, ["PolicyAttachment"], () => require("./policyAttachment"));
utilities.lazyLoad(exports, ["Role"], () => require("./role"));
utilities.lazyLoad(exports, ["RolePolicy"], () => require("./rolePolicy"));
utilities.lazyLoad(exports, ["RolePolicyAttachment"], () => require("./rolePolicyAttachment"));
utilities.lazyLoad(exports, ["SamlProvider"], () => require("./samlProvider"));
utilities.lazyLoad(exports, ["ServerCertificate"], () => require("./serverCertificate"));
utilities.lazyLoad(exports, ["ServiceLinkedRole"], () => require("./serviceLinkedRole"));
utilities.lazyLoad(exports, ["ServiceSpecificCredential"], () => require("./serviceSpecificCredential"));
utilities.lazyLoad(exports, ["SigningCertificate"], () => require("./signingCertificate"));
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));
utilities.lazyLoad(exports, ["User"], () => require("./user"));
utilities.lazyLoad(exports, ["UserGroupMembership"], () => require("./userGroupMembership"));
utilities.lazyLoad(exports, ["UserLoginProfile"], () => require("./userLoginProfile"));
utilities.lazyLoad(exports, ["UserPolicy"], () => require("./userPolicy"));
utilities.lazyLoad(exports, ["UserPolicyAttachment"], () => require("./userPolicyAttachment"));
utilities.lazyLoad(exports, ["VirtualMfaDevice"], () => require("./virtualMfaDevice"));
// Export enums:
__exportStar(require("../types/enums/iam"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:iam/accessKey:AccessKey":
                return new exports.AccessKey(name, undefined, { urn });
            case "aws:iam/accountAlias:AccountAlias":
                return new exports.AccountAlias(name, undefined, { urn });
            case "aws:iam/accountPasswordPolicy:AccountPasswordPolicy":
                return new exports.AccountPasswordPolicy(name, undefined, { urn });
            case "aws:iam/group:Group":
                return new exports.Group(name, undefined, { urn });
            case "aws:iam/groupMembership:GroupMembership":
                return new exports.GroupMembership(name, undefined, { urn });
            case "aws:iam/groupPolicy:GroupPolicy":
                return new exports.GroupPolicy(name, undefined, { urn });
            case "aws:iam/groupPolicyAttachment:GroupPolicyAttachment":
                return new exports.GroupPolicyAttachment(name, undefined, { urn });
            case "aws:iam/instanceProfile:InstanceProfile":
                return new exports.InstanceProfile(name, undefined, { urn });
            case "aws:iam/openIdConnectProvider:OpenIdConnectProvider":
                return new exports.OpenIdConnectProvider(name, undefined, { urn });
            case "aws:iam/policy:Policy":
                return new exports.Policy(name, undefined, { urn });
            case "aws:iam/policyAttachment:PolicyAttachment":
                return new exports.PolicyAttachment(name, undefined, { urn });
            case "aws:iam/role:Role":
                return new exports.Role(name, undefined, { urn });
            case "aws:iam/rolePolicy:RolePolicy":
                return new exports.RolePolicy(name, undefined, { urn });
            case "aws:iam/rolePolicyAttachment:RolePolicyAttachment":
                return new exports.RolePolicyAttachment(name, undefined, { urn });
            case "aws:iam/samlProvider:SamlProvider":
                return new exports.SamlProvider(name, undefined, { urn });
            case "aws:iam/serverCertificate:ServerCertificate":
                return new exports.ServerCertificate(name, undefined, { urn });
            case "aws:iam/serviceLinkedRole:ServiceLinkedRole":
                return new exports.ServiceLinkedRole(name, undefined, { urn });
            case "aws:iam/serviceSpecificCredential:ServiceSpecificCredential":
                return new exports.ServiceSpecificCredential(name, undefined, { urn });
            case "aws:iam/signingCertificate:SigningCertificate":
                return new exports.SigningCertificate(name, undefined, { urn });
            case "aws:iam/sshKey:SshKey":
                return new exports.SshKey(name, undefined, { urn });
            case "aws:iam/user:User":
                return new exports.User(name, undefined, { urn });
            case "aws:iam/userGroupMembership:UserGroupMembership":
                return new exports.UserGroupMembership(name, undefined, { urn });
            case "aws:iam/userLoginProfile:UserLoginProfile":
                return new exports.UserLoginProfile(name, undefined, { urn });
            case "aws:iam/userPolicy:UserPolicy":
                return new exports.UserPolicy(name, undefined, { urn });
            case "aws:iam/userPolicyAttachment:UserPolicyAttachment":
                return new exports.UserPolicyAttachment(name, undefined, { urn });
            case "aws:iam/virtualMfaDevice:VirtualMfaDevice":
                return new exports.VirtualMfaDevice(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "iam/accessKey", _module);
pulumi.runtime.registerResourceModule("aws", "iam/accountAlias", _module);
pulumi.runtime.registerResourceModule("aws", "iam/accountPasswordPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "iam/group", _module);
pulumi.runtime.registerResourceModule("aws", "iam/groupMembership", _module);
pulumi.runtime.registerResourceModule("aws", "iam/groupPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "iam/groupPolicyAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "iam/instanceProfile", _module);
pulumi.runtime.registerResourceModule("aws", "iam/openIdConnectProvider", _module);
pulumi.runtime.registerResourceModule("aws", "iam/policy", _module);
pulumi.runtime.registerResourceModule("aws", "iam/policyAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "iam/role", _module);
pulumi.runtime.registerResourceModule("aws", "iam/rolePolicy", _module);
pulumi.runtime.registerResourceModule("aws", "iam/rolePolicyAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "iam/samlProvider", _module);
pulumi.runtime.registerResourceModule("aws", "iam/serverCertificate", _module);
pulumi.runtime.registerResourceModule("aws", "iam/serviceLinkedRole", _module);
pulumi.runtime.registerResourceModule("aws", "iam/serviceSpecificCredential", _module);
pulumi.runtime.registerResourceModule("aws", "iam/signingCertificate", _module);
pulumi.runtime.registerResourceModule("aws", "iam/sshKey", _module);
pulumi.runtime.registerResourceModule("aws", "iam/user", _module);
pulumi.runtime.registerResourceModule("aws", "iam/userGroupMembership", _module);
pulumi.runtime.registerResourceModule("aws", "iam/userLoginProfile", _module);
pulumi.runtime.registerResourceModule("aws", "iam/userPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "iam/userPolicyAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "iam/virtualMfaDevice", _module);
//# sourceMappingURL=index.js.map