import * as pulumi from "@pulumi/pulumi";
/**
 * ## Import
 *
 * IAM Signing Certificates can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:iam/signingCertificate:SigningCertificate certificate IDIDIDIDID:user-name
 * ```
 */
export declare class SigningCertificate extends pulumi.CustomResource {
    /**
     * Get an existing SigningCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SigningCertificateState, opts?: pulumi.CustomResourceOptions): SigningCertificate;
    /**
     * Returns true if the given object is an instance of SigningCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SigningCertificate;
    /**
     * The contents of the signing certificate in PEM-encoded format.
     */
    readonly certificateBody: pulumi.Output<string>;
    /**
     * The ID for the signing certificate.
     */
    readonly certificateId: pulumi.Output<string>;
    /**
     * The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
     */
    readonly status: pulumi.Output<string | undefined>;
    /**
     * The name of the user the signing certificate is for.
     */
    readonly userName: pulumi.Output<string>;
    /**
     * Create a SigningCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SigningCertificateArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering SigningCertificate resources.
 */
export interface SigningCertificateState {
    /**
     * The contents of the signing certificate in PEM-encoded format.
     */
    certificateBody?: pulumi.Input<string>;
    /**
     * The ID for the signing certificate.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the user the signing certificate is for.
     */
    userName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a SigningCertificate resource.
 */
export interface SigningCertificateArgs {
    /**
     * The contents of the signing certificate in PEM-encoded format.
     */
    certificateBody: pulumi.Input<string>;
    /**
     * The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the user the signing certificate is for.
     */
    userName: pulumi.Input<string>;
}
