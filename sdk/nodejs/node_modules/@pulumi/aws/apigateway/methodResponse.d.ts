import * as pulumi from "@pulumi/pulumi";
import { RestApi } from "./index";
/**
 * Provides an HTTP Method Response for an API Gateway Resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const myDemoAPI = new aws.apigateway.RestApi("myDemoAPI", {description: "This is my API for demonstration purposes"});
 * const myDemoResource = new aws.apigateway.Resource("myDemoResource", {
 *     restApi: myDemoAPI.id,
 *     parentId: myDemoAPI.rootResourceId,
 *     pathPart: "mydemoresource",
 * });
 * const myDemoMethod = new aws.apigateway.Method("myDemoMethod", {
 *     restApi: myDemoAPI.id,
 *     resourceId: myDemoResource.id,
 *     httpMethod: "GET",
 *     authorization: "NONE",
 * });
 * const myDemoIntegration = new aws.apigateway.Integration("myDemoIntegration", {
 *     restApi: myDemoAPI.id,
 *     resourceId: myDemoResource.id,
 *     httpMethod: myDemoMethod.httpMethod,
 *     type: "MOCK",
 * });
 * const response200 = new aws.apigateway.MethodResponse("response200", {
 *     restApi: myDemoAPI.id,
 *     resourceId: myDemoResource.id,
 *     httpMethod: myDemoMethod.httpMethod,
 *     statusCode: "200",
 * });
 * ```
 *
 * ## Import
 *
 * `aws_api_gateway_method_response` can be imported using `REST-API-ID/RESOURCE-ID/HTTP-METHOD/STATUS-CODE`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:apigateway/methodResponse:MethodResponse example 12345abcde/67890fghij/GET/200
 * ```
 */
export declare class MethodResponse extends pulumi.CustomResource {
    /**
     * Get an existing MethodResponse resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MethodResponseState, opts?: pulumi.CustomResourceOptions): MethodResponse;
    /**
     * Returns true if the given object is an instance of MethodResponse.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is MethodResponse;
    /**
     * HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
     */
    readonly httpMethod: pulumi.Output<string>;
    /**
     * API resource ID
     */
    readonly resourceId: pulumi.Output<string>;
    /**
     * Map of the API models used for the response's content type
     */
    readonly responseModels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Map of response parameters that can be sent to the caller.
     * For example: `responseParameters = { "method.response.header.X-Some-Header" = true }`
     * would define that the header `X-Some-Header` can be provided on the response.
     */
    readonly responseParameters: pulumi.Output<{
        [key: string]: boolean;
    } | undefined>;
    /**
     * ID of the associated REST API
     */
    readonly restApi: pulumi.Output<string>;
    /**
     * HTTP status code
     */
    readonly statusCode: pulumi.Output<string>;
    /**
     * Create a MethodResponse resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MethodResponseArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering MethodResponse resources.
 */
export interface MethodResponseState {
    /**
     * HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
     */
    httpMethod?: pulumi.Input<string>;
    /**
     * API resource ID
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Map of the API models used for the response's content type
     */
    responseModels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Map of response parameters that can be sent to the caller.
     * For example: `responseParameters = { "method.response.header.X-Some-Header" = true }`
     * would define that the header `X-Some-Header` can be provided on the response.
     */
    responseParameters?: pulumi.Input<{
        [key: string]: pulumi.Input<boolean>;
    }>;
    /**
     * ID of the associated REST API
     */
    restApi?: pulumi.Input<string | RestApi>;
    /**
     * HTTP status code
     */
    statusCode?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a MethodResponse resource.
 */
export interface MethodResponseArgs {
    /**
     * HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
     */
    httpMethod: pulumi.Input<string>;
    /**
     * API resource ID
     */
    resourceId: pulumi.Input<string>;
    /**
     * Map of the API models used for the response's content type
     */
    responseModels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Map of response parameters that can be sent to the caller.
     * For example: `responseParameters = { "method.response.header.X-Some-Header" = true }`
     * would define that the header `X-Some-Header` can be provided on the response.
     */
    responseParameters?: pulumi.Input<{
        [key: string]: pulumi.Input<boolean>;
    }>;
    /**
     * ID of the associated REST API
     */
    restApi: pulumi.Input<string | RestApi>;
    /**
     * HTTP status code
     */
    statusCode: pulumi.Input<string>;
}
