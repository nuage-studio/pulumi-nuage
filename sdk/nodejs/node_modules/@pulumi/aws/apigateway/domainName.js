"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainName = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Registers a custom domain name for use with AWS API Gateway. Additional information about this functionality
 * can be found in the [API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html).
 *
 * This resource just establishes ownership of and the TLS settings for
 * a particular domain name. An API can be attached to a particular path
 * under the registered domain name using
 * the `aws.apigateway.BasePathMapping` resource.
 *
 * API Gateway domains can be defined as either 'edge-optimized' or 'regional'.  In an edge-optimized configuration,
 * API Gateway internally creates and manages a CloudFront distribution to route requests on the given hostname. In
 * addition to this resource it's necessary to create a DNS record corresponding to the given domain name which is an alias
 * (either Route53 alias or traditional CNAME) to the Cloudfront domain name exported in the `cloudfrontDomainName`
 * attribute.
 *
 * In a regional configuration, API Gateway does not create a CloudFront distribution to route requests to the API, though
 * a distribution can be created if needed. In either case, it is necessary to create a DNS record corresponding to the
 * given domain name which is an alias (either Route53 alias or traditional CNAME) to the regional domain name exported in
 * the `regionalDomainName` attribute.
 *
 * > **Note:** API Gateway requires the use of AWS Certificate Manager (ACM) certificates instead of Identity and Access Management (IAM) certificates in regions that support ACM. Regions that support ACM can be found in the [Regions and Endpoints Documentation](https://docs.aws.amazon.com/general/latest/gr/rande.html#acm_region). To import an existing private key and certificate into ACM or request an ACM certificate, see the `aws.acm.Certificate` resource.
 *
 * > **Note:** The `aws.apigateway.DomainName` resource expects dependency on the `aws.acm.CertificateValidation` as
 * only verified certificates can be used. This can be made either explicitly by adding the
 * `dependsOn = [aws_acm_certificate_validation.cert]` attribute. Or implicitly by referring certificate ARN
 * from the validation resource where it will be available after the resource creation:
 * `regionalCertificateArn = aws_acm_certificate_validation.cert.certificate_arn`.
 *
 * ## Example Usage
 * ### Edge Optimized (ACM Certificate)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleDomainName = new aws.apigateway.DomainName("exampleDomainName", {
 *     certificateArn: aws_acm_certificate_validation.example.certificate_arn,
 *     domainName: "api.example.com",
 * });
 * // Example DNS record using Route53.
 * // Route53 is not specifically required; any DNS host can be used.
 * const exampleRecord = new aws.route53.Record("exampleRecord", {
 *     name: exampleDomainName.domainName,
 *     type: "A",
 *     zoneId: aws_route53_zone.example.id,
 *     aliases: [{
 *         evaluateTargetHealth: true,
 *         name: exampleDomainName.cloudfrontDomainName,
 *         zoneId: exampleDomainName.cloudfrontZoneId,
 *     }],
 * });
 * ```
 * ### Edge Optimized (IAM Certificate)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const exampleDomainName = new aws.apigateway.DomainName("exampleDomainName", {
 *     domainName: "api.example.com",
 *     certificateName: "example-api",
 *     certificateBody: fs.readFileSync(`${path.module}/example.com/example.crt`),
 *     certificateChain: fs.readFileSync(`${path.module}/example.com/ca.crt`),
 *     certificatePrivateKey: fs.readFileSync(`${path.module}/example.com/example.key`),
 * });
 * // Example DNS record using Route53.
 * // Route53 is not specifically required; any DNS host can be used.
 * const exampleRecord = new aws.route53.Record("exampleRecord", {
 *     zoneId: aws_route53_zone.example.id,
 *     name: exampleDomainName.domainName,
 *     type: "A",
 *     aliases: [{
 *         name: exampleDomainName.cloudfrontDomainName,
 *         zoneId: exampleDomainName.cloudfrontZoneId,
 *         evaluateTargetHealth: true,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * API Gateway domain names can be imported using their `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:apigateway/domainName:DomainName example dev.example.com
 * ```
 */
class DomainName extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificateArn"] = state ? state.certificateArn : undefined;
            resourceInputs["certificateBody"] = state ? state.certificateBody : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["certificateName"] = state ? state.certificateName : undefined;
            resourceInputs["certificatePrivateKey"] = state ? state.certificatePrivateKey : undefined;
            resourceInputs["certificateUploadDate"] = state ? state.certificateUploadDate : undefined;
            resourceInputs["cloudfrontDomainName"] = state ? state.cloudfrontDomainName : undefined;
            resourceInputs["cloudfrontZoneId"] = state ? state.cloudfrontZoneId : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["endpointConfiguration"] = state ? state.endpointConfiguration : undefined;
            resourceInputs["mutualTlsAuthentication"] = state ? state.mutualTlsAuthentication : undefined;
            resourceInputs["ownershipVerificationCertificateArn"] = state ? state.ownershipVerificationCertificateArn : undefined;
            resourceInputs["regionalCertificateArn"] = state ? state.regionalCertificateArn : undefined;
            resourceInputs["regionalCertificateName"] = state ? state.regionalCertificateName : undefined;
            resourceInputs["regionalDomainName"] = state ? state.regionalDomainName : undefined;
            resourceInputs["regionalZoneId"] = state ? state.regionalZoneId : undefined;
            resourceInputs["securityPolicy"] = state ? state.securityPolicy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["certificateArn"] = args ? args.certificateArn : undefined;
            resourceInputs["certificateBody"] = args ? args.certificateBody : undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["certificateName"] = args ? args.certificateName : undefined;
            resourceInputs["certificatePrivateKey"] = args ? args.certificatePrivateKey : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["endpointConfiguration"] = args ? args.endpointConfiguration : undefined;
            resourceInputs["mutualTlsAuthentication"] = args ? args.mutualTlsAuthentication : undefined;
            resourceInputs["ownershipVerificationCertificateArn"] = args ? args.ownershipVerificationCertificateArn : undefined;
            resourceInputs["regionalCertificateArn"] = args ? args.regionalCertificateArn : undefined;
            resourceInputs["regionalCertificateName"] = args ? args.regionalCertificateName : undefined;
            resourceInputs["securityPolicy"] = args ? args.securityPolicy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["certificateUploadDate"] = undefined /*out*/;
            resourceInputs["cloudfrontDomainName"] = undefined /*out*/;
            resourceInputs["cloudfrontZoneId"] = undefined /*out*/;
            resourceInputs["regionalDomainName"] = undefined /*out*/;
            resourceInputs["regionalZoneId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainName.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DomainName resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DomainName(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DomainName.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainName.__pulumiType;
    }
}
exports.DomainName = DomainName;
/** @internal */
DomainName.__pulumiType = 'aws:apigateway/domainName:DomainName';
//# sourceMappingURL=domainName.js.map