"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsagePlanKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an API Gateway Usage Plan Key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.apigateway.RestApi("test", {});
 * // ...
 * const myusageplan = new aws.apigateway.UsagePlan("myusageplan", {apiStages: [{
 *     apiId: test.id,
 *     stage: aws_api_gateway_deployment.foo.stage_name,
 * }]});
 * const mykey = new aws.apigateway.ApiKey("mykey", {});
 * const main = new aws.apigateway.UsagePlanKey("main", {
 *     keyId: mykey.id,
 *     keyType: "API_KEY",
 *     usagePlanId: myusageplan.id,
 * });
 * ```
 *
 * ## Import
 *
 * AWS API Gateway Usage Plan Key can be imported using the `USAGE-PLAN-ID/USAGE-PLAN-KEY-ID`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:apigateway/usagePlanKey:UsagePlanKey key 12345abcde/zzz
 * ```
 */
class UsagePlanKey extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["usagePlanId"] = state ? state.usagePlanId : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if ((!args || args.keyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyType'");
            }
            if ((!args || args.usagePlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usagePlanId'");
            }
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["usagePlanId"] = args ? args.usagePlanId : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UsagePlanKey.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing UsagePlanKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UsagePlanKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UsagePlanKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UsagePlanKey.__pulumiType;
    }
}
exports.UsagePlanKey = UsagePlanKey;
/** @internal */
UsagePlanKey.__pulumiType = 'aws:apigateway/usagePlanKey:UsagePlanKey';
//# sourceMappingURL=usagePlanKey.js.map