import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a Log subscription for AWS Directory Service that pushes logs to cloudwatch.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleLogGroup = new aws.cloudwatch.LogGroup("exampleLogGroup", {retentionInDays: 14});
 * const ad-log-policyPolicyDocument = aws.iam.getPolicyDocumentOutput({
 *     statements: [{
 *         actions: [
 *             "logs:CreateLogStream",
 *             "logs:PutLogEvents",
 *         ],
 *         principals: [{
 *             identifiers: ["ds.amazonaws.com"],
 *             type: "Service",
 *         }],
 *         resources: [pulumi.interpolate`${exampleLogGroup.arn}:*`],
 *         effect: "Allow",
 *     }],
 * });
 * const ad_log_policyLogResourcePolicy = new aws.cloudwatch.LogResourcePolicy("ad-log-policyLogResourcePolicy", {
 *     policyDocument: ad_log_policyPolicyDocument.apply(ad_log_policyPolicyDocument => ad_log_policyPolicyDocument.json),
 *     policyName: "ad-log-policy",
 * });
 * const exampleLogService = new aws.directoryservice.LogService("exampleLogService", {
 *     directoryId: aws_directory_service_directory.example.id,
 *     logGroupName: exampleLogGroup.name,
 * });
 * ```
 *
 * ## Import
 *
 * Directory Service Log Subscriptions can be imported using the directory id, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:directoryservice/logService:LogService msad d-1234567890
 * ```
 */
export declare class LogService extends pulumi.CustomResource {
    /**
     * Get an existing LogService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogServiceState, opts?: pulumi.CustomResourceOptions): LogService;
    /**
     * Returns true if the given object is an instance of LogService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LogService;
    /**
     * ID of directory.
     */
    readonly directoryId: pulumi.Output<string>;
    /**
     * Name of the cloudwatch log group to which the logs should be published. The log group should be already created and the directory service principal should be provided with required permission to create stream and publish logs. Changing this value would delete the current subscription and create a new one. A directory can only have one log subscription at a time.
     */
    readonly logGroupName: pulumi.Output<string>;
    /**
     * Create a LogService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogServiceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering LogService resources.
 */
export interface LogServiceState {
    /**
     * ID of directory.
     */
    directoryId?: pulumi.Input<string>;
    /**
     * Name of the cloudwatch log group to which the logs should be published. The log group should be already created and the directory service principal should be provided with required permission to create stream and publish logs. Changing this value would delete the current subscription and create a new one. A directory can only have one log subscription at a time.
     */
    logGroupName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a LogService resource.
 */
export interface LogServiceArgs {
    /**
     * ID of directory.
     */
    directoryId: pulumi.Input<string>;
    /**
     * Name of the cloudwatch log group to which the logs should be published. The log group should be already created and the directory service principal should be provided with required permission to create stream and publish logs. Changing this value would delete the current subscription and create a new one. A directory can only have one log subscription at a time.
     */
    logGroupName: pulumi.Input<string>;
}
