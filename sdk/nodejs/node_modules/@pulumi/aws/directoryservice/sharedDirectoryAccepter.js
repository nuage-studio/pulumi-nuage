"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedDirectoryAccepter = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Accepts a shared directory in a consumer account.
 *
 * > **NOTE:** Destroying this resource removes the shared directory from the consumer account only.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleSharedDirectory = new aws.directoryservice.SharedDirectory("exampleSharedDirectory", {
 *     directoryId: aws_directory_service_directory.example.id,
 *     notes: "example",
 *     target: {
 *         id: data.aws_caller_identity.receiver.account_id,
 *     },
 * });
 * const exampleSharedDirectoryAccepter = new aws.directoryservice.SharedDirectoryAccepter("exampleSharedDirectoryAccepter", {sharedDirectoryId: exampleSharedDirectory.sharedDirectoryId}, {
 *     provider: "awsalternate",
 * });
 * ```
 *
 * ## Import
 *
 * Directory Service Shared Directories can be imported using the shared directory ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:directoryservice/sharedDirectoryAccepter:SharedDirectoryAccepter example d-9267633ece
 * ```
 */
class SharedDirectoryAccepter extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["ownerAccountId"] = state ? state.ownerAccountId : undefined;
            resourceInputs["ownerDirectoryId"] = state ? state.ownerDirectoryId : undefined;
            resourceInputs["sharedDirectoryId"] = state ? state.sharedDirectoryId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.sharedDirectoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedDirectoryId'");
            }
            resourceInputs["sharedDirectoryId"] = args ? args.sharedDirectoryId : undefined;
            resourceInputs["method"] = undefined /*out*/;
            resourceInputs["notes"] = undefined /*out*/;
            resourceInputs["ownerAccountId"] = undefined /*out*/;
            resourceInputs["ownerDirectoryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SharedDirectoryAccepter.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SharedDirectoryAccepter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SharedDirectoryAccepter(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SharedDirectoryAccepter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedDirectoryAccepter.__pulumiType;
    }
}
exports.SharedDirectoryAccepter = SharedDirectoryAccepter;
/** @internal */
SharedDirectoryAccepter.__pulumiType = 'aws:directoryservice/sharedDirectoryAccepter:SharedDirectoryAccepter';
//# sourceMappingURL=sharedDirectoryAccepter.js.map