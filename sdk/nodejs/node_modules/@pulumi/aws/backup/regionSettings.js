"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegionSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AWS Backup Region Settings resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.backup.RegionSettings("test", {
 *     resourceTypeManagementPreference: {
 *         DynamoDB: true,
 *         EFS: true,
 *     },
 *     resourceTypeOptInPreference: {
 *         Aurora: true,
 *         DocumentDB: true,
 *         DynamoDB: true,
 *         EBS: true,
 *         EC2: true,
 *         EFS: true,
 *         FSx: true,
 *         Neptune: true,
 *         RDS: true,
 *         "Storage Gateway": true,
 *         VirtualMachine: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Backup Region Settings can be imported using the `region`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:backup/regionSettings:RegionSettings test us-west-2
 * ```
 */
class RegionSettings extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["resourceTypeManagementPreference"] = state ? state.resourceTypeManagementPreference : undefined;
            resourceInputs["resourceTypeOptInPreference"] = state ? state.resourceTypeOptInPreference : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceTypeOptInPreference === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceTypeOptInPreference'");
            }
            resourceInputs["resourceTypeManagementPreference"] = args ? args.resourceTypeManagementPreference : undefined;
            resourceInputs["resourceTypeOptInPreference"] = args ? args.resourceTypeOptInPreference : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegionSettings.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing RegionSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RegionSettings(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RegionSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegionSettings.__pulumiType;
    }
}
exports.RegionSettings = RegionSettings;
/** @internal */
RegionSettings.__pulumiType = 'aws:backup/regionSettings:RegionSettings';
//# sourceMappingURL=regionSettings.js.map