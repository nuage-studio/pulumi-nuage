// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nuage.Aws
{
    [NuageResourceType("nuage:aws:ContainerFunction")]
    public partial class ContainerFunction : Pulumi.ComponentResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("ecr_image_name")]
        public Output<string> Ecr_image_name { get; private set; } = null!;

        [Output("function_url")]
        public Output<string> Function_url { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a ContainerFunction resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContainerFunction(string name, ContainerFunctionArgs? args = null, ComponentResourceOptions? options = null)
            : base("nuage:aws:ContainerFunction", name, args ?? new ContainerFunctionArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ContainerFunctionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Architecture, either `X86_64` or `ARM64`. Defaults to `x86_64`
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        /// <summary>
        /// Dockerfile context path.
        /// </summary>
        [Input("context")]
        public Input<string>? Context { get; set; }

        /// <summary>
        /// Description of the function.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Dockerfile path. Defaults to `./Dockerfile`
        /// </summary>
        [Input("dockerfile")]
        public Input<string>? Dockerfile { get; set; }

        [Input("environment")]
        private InputMap<string>? _environment;

        /// <summary>
        /// Environment Variables
        /// </summary>
        public InputMap<string> Environment
        {
            get => _environment ?? (_environment = new InputMap<string>());
            set => _environment = value;
        }

        /// <summary>
        /// Keep warm by refreshing the lambda function every 5 minutes. Defaults to `false`
        /// </summary>
        [Input("keepWarm")]
        public Input<bool>? KeepWarm { get; set; }

        /// <summary>
        /// Number of days for log retention to pass in cloudwatch log group..
        /// </summary>
        [Input("logRetentionInDays")]
        public Input<double>? LogRetentionInDays { get; set; }

        /// <summary>
        /// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `512`.
        /// </summary>
        [Input("memorySize")]
        public Input<double>? MemorySize { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Name prefix as an alternative to name and adds random suffix at the end.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// Policy Document for lambda.
        /// </summary>
        [Input("policyDocument")]
        public Input<string>? PolicyDocument { get; set; }

        /// <summary>
        /// Existing ECR repository name
        /// </summary>
        [Input("repositoryId")]
        public Input<string>? RepositoryId { get; set; }

        /// <summary>
        /// Amount of time your Lambda Function has to run in seconds. Defaults to `3`
        /// </summary>
        [Input("timeout")]
        public Input<double>? Timeout { get; set; }

        /// <summary>
        /// Use Lambda URL. Defaults to `false`
        /// </summary>
        [Input("url")]
        public Input<bool>? Url { get; set; }

        public ContainerFunctionArgs()
        {
        }
    }
}
