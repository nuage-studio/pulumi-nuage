# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *
import pulumi_aws

__all__ = [
    'BastionConfigArgs',
    'FunctionScheduleArgs',
    'FunctionUrlArgs',
]

@pulumi.input_type
class BastionConfigArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable data api. Defaults to `false`
        :param pulumi.Input[str] subnet_id: Public subnet id for the bastion host. You may use`awsx.ec2.Vpc.public_subnet_ids[0]`
        """
        pulumi.set(__self__, "enabled", enabled)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enable data api. Defaults to `false`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Public subnet id for the bastion host. You may use`awsx.ec2.Vpc.public_subnet_ids[0]`
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class FunctionScheduleArgs:
    def __init__(__self__, *,
                 schedule_expression: pulumi.Input[str],
                 schedule_input: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] schedule_expression: Expression for creating a cloudwatch event rule.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schedule_input: Input for cloudwatch event target.
        """
        pulumi.set(__self__, "schedule_expression", schedule_expression)
        if schedule_input is not None:
            pulumi.set(__self__, "schedule_input", schedule_input)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> pulumi.Input[str]:
        """
        Expression for creating a cloudwatch event rule.
        """
        return pulumi.get(self, "schedule_expression")

    @schedule_expression.setter
    def schedule_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_expression", value)

    @property
    @pulumi.getter(name="scheduleInput")
    def schedule_input(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Input for cloudwatch event target.
        """
        return pulumi.get(self, "schedule_input")

    @schedule_input.setter
    def schedule_input(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "schedule_input", value)


@pulumi.input_type
class FunctionUrlArgs:
    def __init__(__self__, *,
                 cors_configuration: Optional[pulumi.Input['pulumi_aws.lambda_.FunctionUrlCorsArgs']] = None,
                 url_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['pulumi_aws.lambda_.FunctionUrlCorsArgs'] cors_configuration: CORS Configuration.
        :param pulumi.Input[bool] url_enabled: Use Lambda URL. Defaults to `false`
        """
        if cors_configuration is not None:
            pulumi.set(__self__, "cors_configuration", cors_configuration)
        if url_enabled is not None:
            pulumi.set(__self__, "url_enabled", url_enabled)

    @property
    @pulumi.getter(name="corsConfiguration")
    def cors_configuration(self) -> Optional[pulumi.Input['pulumi_aws.lambda_.FunctionUrlCorsArgs']]:
        """
        CORS Configuration.
        """
        return pulumi.get(self, "cors_configuration")

    @cors_configuration.setter
    def cors_configuration(self, value: Optional[pulumi.Input['pulumi_aws.lambda_.FunctionUrlCorsArgs']]):
        pulumi.set(self, "cors_configuration", value)

    @property
    @pulumi.getter(name="urlEnabled")
    def url_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Use Lambda URL. Defaults to `false`
        """
        return pulumi.get(self, "url_enabled")

    @url_enabled.setter
    def url_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "url_enabled", value)


